# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.task import Task  # noqa: E501
from openapi_client.rest import ApiException

class TestTask(unittest.TestCase):
    """Task unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Task
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.task.Task()  # noqa: E501
        if include_optional :
            return Task(
                task_id = '7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                avatar_id = '7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                challenge_id = '7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                attempt_sequence_number = 2, 
                generation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                submission_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                image = openapi_client.models.image.Image(
                    image_url = '0', 
                    image_base64 = '0', 
                    image_content_type = '0', ), 
                evaluation_status = 'unallocated', 
                challenge_name = 'Tag Cats', 
                challenge_description = 'Tag the cats', 
                tags = [
                    openapi_client.models.tag.Tag(
                        tag_id = 'B07E91CB289F87791D78064ECC93754F19B13D419489F162', 
                        submission_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        node_type = 'vehicle', 
                        geometry = [
                            openapi_client.models.shape.Shape(
                                shape_id = '791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                                shape_type = 'Shape2DReactangle', )
                            ], 
                        task_id = '1CB289F87791D78064ECC93754F19B13D419489F162A', 
                        internal_subjective_opinion = openapi_client.models.internal_subjective_opinion.InternalSubjectiveOpinion(
                            opinion_emitter_id = 'ocr', 
                            opinion_reason_id = 'unreadable', 
                            attributed_belief_numerator = 5, 
                            attributed_disbelief_numerator = 2, 
                            unattributed_uncertainty_numerator = 1, 
                            common_denominator = 1, 
                            base_rate_numerator = 1, ), )
                    ], 
                edges = [
                    openapi_client.models.edge.Edge(
                        source_tag_id = '87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                        destination_tag_id = '7300124455B07E91CB289F87791D78064ECC93754F19B13D419489F1', 
                        source_text_box_id = '1', 
                        destination_text_box_id = '1', 
                        edge_type = 'has-greater-area', 
                        slack = 0.0, 
                        elasticity = 1.337, 
                        internal_subjective_opinion = openapi_client.models.internal_subjective_opinion.InternalSubjectiveOpinion(
                            opinion_emitter_id = 'ocr', 
                            opinion_reason_id = 'unreadable', 
                            attributed_belief_numerator = 5, 
                            attributed_disbelief_numerator = 2, 
                            unattributed_uncertainty_numerator = 1, 
                            common_denominator = 1, 
                            base_rate_numerator = 1, ), )
                    ], 
                resolution = openapi_client.models.task_resolution.TaskResolution(
                    description = 'Reported for ...', )
            )
        else :
            return Task(
        )

    def testTask(self):
        """Test Task"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
