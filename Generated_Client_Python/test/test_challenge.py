# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.challenge import Challenge  # noqa: E501
from openapi_client.rest import ApiException

class TestChallenge(unittest.TestCase):
    """Challenge unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Challenge
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.challenge.Challenge()  # noqa: E501
        if include_optional :
            return Challenge(
                challenge_id = 'DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                dataset_id = 'DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                evaluation_policy_id = 'DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                dispatch_policy_id = 'DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E', 
                creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                status = 'pending', 
                access_type = 'public', 
                tenant_role = 'SUPPLIER', 
                name = 'Dogs', 
                completion_percentage = 70, 
                completion_percentage_for_collaborator = 70, 
                description = 'Tag the cats', 
                budget = 3.14, 
                stared = True, 
                supplier_tenant_id = 'Dogs', 
                resolution = 'Tag the cats', 
                demander_tenant_id = 'Dogs', 
                initial_number_of_shards = 4, 
                dataset_metadata = openapi_client.models.challenge_dataset_metadata.Challenge_datasetMetadata(
                    name = 'Dogs', 
                    media_items = 1000, 
                    number_of_shards = 4, ), 
                tag_type = '2D_rectangle', 
                estimated_tags_per_media_item = 4, 
                node_taxonomy = consumer,overdue, 
                edge_taxonomy = is a, has a, 
                completion_percentages = [
                    openapi_client.models.challenge_completion_percentage.ChallengeCompletionPercentage(
                        shard = 1, 
                        stages = [
                            openapi_client.models.challenge_stage.ChallengeStage(
                                stage_number = 1, 
                                percentage = 100, 
                                operator = 'silicon', )
                            ], )
                    ], 
                expiration = 4, 
                challenge_access_token = 'DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E'
            )
        else :
            return Challenge(
                access_type = 'public',
        )

    def testChallenge(self):
        """Test Challenge"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
