# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DispatchPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dispatch_policy_id': 'str',
        'name': 'str',
        'number_of_users': 'int',
        'media_item_lock_timeout': 'int'
    }

    attribute_map = {
        'dispatch_policy_id': 'dispatchPolicyId',
        'name': 'name',
        'number_of_users': 'numberOfUsers',
        'media_item_lock_timeout': 'mediaItemLockTimeout'
    }

    def __init__(self, dispatch_policy_id=None, name=None, number_of_users=None, media_item_lock_timeout=None, local_vars_configuration=None):  # noqa: E501
        """DispatchPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dispatch_policy_id = None
        self._name = None
        self._number_of_users = None
        self._media_item_lock_timeout = None
        self.discriminator = None

        if dispatch_policy_id is not None:
            self.dispatch_policy_id = dispatch_policy_id
        if name is not None:
            self.name = name
        if number_of_users is not None:
            self.number_of_users = number_of_users
        if media_item_lock_timeout is not None:
            self.media_item_lock_timeout = media_item_lock_timeout

    @property
    def dispatch_policy_id(self):
        """Gets the dispatch_policy_id of this DispatchPolicy.  # noqa: E501

        Unique ID of dispatch policy  # noqa: E501

        :return: The dispatch_policy_id of this DispatchPolicy.  # noqa: E501
        :rtype: str
        """
        return self._dispatch_policy_id

    @dispatch_policy_id.setter
    def dispatch_policy_id(self, dispatch_policy_id):
        """Sets the dispatch_policy_id of this DispatchPolicy.

        Unique ID of dispatch policy  # noqa: E501

        :param dispatch_policy_id: The dispatch_policy_id of this DispatchPolicy.  # noqa: E501
        :type: str
        """

        self._dispatch_policy_id = dispatch_policy_id

    @property
    def name(self):
        """Gets the name of this DispatchPolicy.  # noqa: E501

        name  # noqa: E501

        :return: The name of this DispatchPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DispatchPolicy.

        name  # noqa: E501

        :param name: The name of this DispatchPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_users(self):
        """Gets the number_of_users of this DispatchPolicy.  # noqa: E501

        Number of users that are assigned the same task  # noqa: E501

        :return: The number_of_users of this DispatchPolicy.  # noqa: E501
        :rtype: int
        """
        return self._number_of_users

    @number_of_users.setter
    def number_of_users(self, number_of_users):
        """Sets the number_of_users of this DispatchPolicy.

        Number of users that are assigned the same task  # noqa: E501

        :param number_of_users: The number_of_users of this DispatchPolicy.  # noqa: E501
        :type: int
        """

        self._number_of_users = number_of_users

    @property
    def media_item_lock_timeout(self):
        """Gets the media_item_lock_timeout of this DispatchPolicy.  # noqa: E501

        Time to wait before assign the same mediaItem to other user  # noqa: E501

        :return: The media_item_lock_timeout of this DispatchPolicy.  # noqa: E501
        :rtype: int
        """
        return self._media_item_lock_timeout

    @media_item_lock_timeout.setter
    def media_item_lock_timeout(self, media_item_lock_timeout):
        """Sets the media_item_lock_timeout of this DispatchPolicy.

        Time to wait before assign the same mediaItem to other user  # noqa: E501

        :param media_item_lock_timeout: The media_item_lock_timeout of this DispatchPolicy.  # noqa: E501
        :type: int
        """

        self._media_item_lock_timeout = media_item_lock_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DispatchPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DispatchPolicy):
            return True

        return self.to_dict() != other.to_dict()
