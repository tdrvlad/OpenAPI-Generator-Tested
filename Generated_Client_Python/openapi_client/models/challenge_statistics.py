# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ChallengeStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'average_rate': 'float',
        'average_completion_time': 'float',
        'average_validation_rate': 'float',
        'payment_per_hour': 'float',
        'completion_time_passed': 'int',
        'completion_time_real': 'int',
        'users_work_time': 'list[ChallengeStatisticsUsersWorkTime]'
    }

    attribute_map = {
        'average_rate': 'averageRate',
        'average_completion_time': 'averageCompletionTime',
        'average_validation_rate': 'averageValidationRate',
        'payment_per_hour': 'paymentPerHour',
        'completion_time_passed': 'completionTimePassed',
        'completion_time_real': 'completionTimeReal',
        'users_work_time': 'usersWorkTime'
    }

    def __init__(self, average_rate=None, average_completion_time=None, average_validation_rate=None, payment_per_hour=None, completion_time_passed=None, completion_time_real=None, users_work_time=None, local_vars_configuration=None):  # noqa: E501
        """ChallengeStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._average_rate = None
        self._average_completion_time = None
        self._average_validation_rate = None
        self._payment_per_hour = None
        self._completion_time_passed = None
        self._completion_time_real = None
        self._users_work_time = None
        self.discriminator = None

        if average_rate is not None:
            self.average_rate = average_rate
        if average_completion_time is not None:
            self.average_completion_time = average_completion_time
        if average_validation_rate is not None:
            self.average_validation_rate = average_validation_rate
        if payment_per_hour is not None:
            self.payment_per_hour = payment_per_hour
        if completion_time_passed is not None:
            self.completion_time_passed = completion_time_passed
        if completion_time_real is not None:
            self.completion_time_real = completion_time_real
        if users_work_time is not None:
            self.users_work_time = users_work_time

    @property
    def average_rate(self):
        """Gets the average_rate of this ChallengeStatistics.  # noqa: E501

        average payment per challenge  # noqa: E501

        :return: The average_rate of this ChallengeStatistics.  # noqa: E501
        :rtype: float
        """
        return self._average_rate

    @average_rate.setter
    def average_rate(self, average_rate):
        """Sets the average_rate of this ChallengeStatistics.

        average payment per challenge  # noqa: E501

        :param average_rate: The average_rate of this ChallengeStatistics.  # noqa: E501
        :type: float
        """

        self._average_rate = average_rate

    @property
    def average_completion_time(self):
        """Gets the average_completion_time of this ChallengeStatistics.  # noqa: E501

        Average time to complete a task for a challenge  # noqa: E501

        :return: The average_completion_time of this ChallengeStatistics.  # noqa: E501
        :rtype: float
        """
        return self._average_completion_time

    @average_completion_time.setter
    def average_completion_time(self, average_completion_time):
        """Sets the average_completion_time of this ChallengeStatistics.

        Average time to complete a task for a challenge  # noqa: E501

        :param average_completion_time: The average_completion_time of this ChallengeStatistics.  # noqa: E501
        :type: float
        """

        self._average_completion_time = average_completion_time

    @property
    def average_validation_rate(self):
        """Gets the average_validation_rate of this ChallengeStatistics.  # noqa: E501

        Average valdation per challenge  # noqa: E501

        :return: The average_validation_rate of this ChallengeStatistics.  # noqa: E501
        :rtype: float
        """
        return self._average_validation_rate

    @average_validation_rate.setter
    def average_validation_rate(self, average_validation_rate):
        """Sets the average_validation_rate of this ChallengeStatistics.

        Average valdation per challenge  # noqa: E501

        :param average_validation_rate: The average_validation_rate of this ChallengeStatistics.  # noqa: E501
        :type: float
        """

        self._average_validation_rate = average_validation_rate

    @property
    def payment_per_hour(self):
        """Gets the payment_per_hour of this ChallengeStatistics.  # noqa: E501

        Estimated payment per hour  # noqa: E501

        :return: The payment_per_hour of this ChallengeStatistics.  # noqa: E501
        :rtype: float
        """
        return self._payment_per_hour

    @payment_per_hour.setter
    def payment_per_hour(self, payment_per_hour):
        """Sets the payment_per_hour of this ChallengeStatistics.

        Estimated payment per hour  # noqa: E501

        :param payment_per_hour: The payment_per_hour of this ChallengeStatistics.  # noqa: E501
        :type: float
        """

        self._payment_per_hour = payment_per_hour

    @property
    def completion_time_passed(self):
        """Gets the completion_time_passed of this ChallengeStatistics.  # noqa: E501

        completion time for all the task passed miliseconds  # noqa: E501

        :return: The completion_time_passed of this ChallengeStatistics.  # noqa: E501
        :rtype: int
        """
        return self._completion_time_passed

    @completion_time_passed.setter
    def completion_time_passed(self, completion_time_passed):
        """Sets the completion_time_passed of this ChallengeStatistics.

        completion time for all the task passed miliseconds  # noqa: E501

        :param completion_time_passed: The completion_time_passed of this ChallengeStatistics.  # noqa: E501
        :type: int
        """

        self._completion_time_passed = completion_time_passed

    @property
    def completion_time_real(self):
        """Gets the completion_time_real of this ChallengeStatistics.  # noqa: E501

        completion time for all the tasks miliseconds  # noqa: E501

        :return: The completion_time_real of this ChallengeStatistics.  # noqa: E501
        :rtype: int
        """
        return self._completion_time_real

    @completion_time_real.setter
    def completion_time_real(self, completion_time_real):
        """Sets the completion_time_real of this ChallengeStatistics.

        completion time for all the tasks miliseconds  # noqa: E501

        :param completion_time_real: The completion_time_real of this ChallengeStatistics.  # noqa: E501
        :type: int
        """

        self._completion_time_real = completion_time_real

    @property
    def users_work_time(self):
        """Gets the users_work_time of this ChallengeStatistics.  # noqa: E501

        graphs  # noqa: E501

        :return: The users_work_time of this ChallengeStatistics.  # noqa: E501
        :rtype: list[ChallengeStatisticsUsersWorkTime]
        """
        return self._users_work_time

    @users_work_time.setter
    def users_work_time(self, users_work_time):
        """Sets the users_work_time of this ChallengeStatistics.

        graphs  # noqa: E501

        :param users_work_time: The users_work_time of this ChallengeStatistics.  # noqa: E501
        :type: list[ChallengeStatisticsUsersWorkTime]
        """

        self._users_work_time = users_work_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChallengeStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChallengeStatistics):
            return True

        return self.to_dict() != other.to_dict()
