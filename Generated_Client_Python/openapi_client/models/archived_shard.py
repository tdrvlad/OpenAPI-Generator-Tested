# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ArchivedShard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'challenge_id': 'str',
        'shard': 'int',
        'archive_name': 'str',
        'creation_timestamp': 'datetime',
        'last_update_timestamp': 'datetime',
        'archive_completion_percentage': 'float',
        'current_completion_percentage': 'float'
    }

    attribute_map = {
        'challenge_id': 'challengeId',
        'shard': 'shard',
        'archive_name': 'archiveName',
        'creation_timestamp': 'creationTimestamp',
        'last_update_timestamp': 'lastUpdateTimestamp',
        'archive_completion_percentage': 'archiveCompletionPercentage',
        'current_completion_percentage': 'currentCompletionPercentage'
    }

    def __init__(self, challenge_id=None, shard=None, archive_name=None, creation_timestamp=None, last_update_timestamp=None, archive_completion_percentage=None, current_completion_percentage=None, local_vars_configuration=None):  # noqa: E501
        """ArchivedShard - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._challenge_id = None
        self._shard = None
        self._archive_name = None
        self._creation_timestamp = None
        self._last_update_timestamp = None
        self._archive_completion_percentage = None
        self._current_completion_percentage = None
        self.discriminator = None

        if challenge_id is not None:
            self.challenge_id = challenge_id
        if shard is not None:
            self.shard = shard
        if archive_name is not None:
            self.archive_name = archive_name
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if archive_completion_percentage is not None:
            self.archive_completion_percentage = archive_completion_percentage
        if current_completion_percentage is not None:
            self.current_completion_percentage = current_completion_percentage

    @property
    def challenge_id(self):
        """Gets the challenge_id of this ArchivedShard.  # noqa: E501

        Alpha-numeric, unique id of challenge.   # noqa: E501

        :return: The challenge_id of this ArchivedShard.  # noqa: E501
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this ArchivedShard.

        Alpha-numeric, unique id of challenge.   # noqa: E501

        :param challenge_id: The challenge_id of this ArchivedShard.  # noqa: E501
        :type: str
        """

        self._challenge_id = challenge_id

    @property
    def shard(self):
        """Gets the shard of this ArchivedShard.  # noqa: E501

        TBD  # noqa: E501

        :return: The shard of this ArchivedShard.  # noqa: E501
        :rtype: int
        """
        return self._shard

    @shard.setter
    def shard(self, shard):
        """Sets the shard of this ArchivedShard.

        TBD  # noqa: E501

        :param shard: The shard of this ArchivedShard.  # noqa: E501
        :type: int
        """

        self._shard = shard

    @property
    def archive_name(self):
        """Gets the archive_name of this ArchivedShard.  # noqa: E501

        name of the archived shard  # noqa: E501

        :return: The archive_name of this ArchivedShard.  # noqa: E501
        :rtype: str
        """
        return self._archive_name

    @archive_name.setter
    def archive_name(self, archive_name):
        """Sets the archive_name of this ArchivedShard.

        name of the archived shard  # noqa: E501

        :param archive_name: The archive_name of this ArchivedShard.  # noqa: E501
        :type: str
        """

        self._archive_name = archive_name

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ArchivedShard.  # noqa: E501

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :return: The creation_timestamp of this ArchivedShard.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ArchivedShard.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this ArchivedShard.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this ArchivedShard.  # noqa: E501

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :return: The last_update_timestamp of this ArchivedShard.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this ArchivedShard.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this ArchivedShard.  # noqa: E501
        :type: datetime
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def archive_completion_percentage(self):
        """Gets the archive_completion_percentage of this ArchivedShard.  # noqa: E501

        completion percentage of a challenge  # noqa: E501

        :return: The archive_completion_percentage of this ArchivedShard.  # noqa: E501
        :rtype: float
        """
        return self._archive_completion_percentage

    @archive_completion_percentage.setter
    def archive_completion_percentage(self, archive_completion_percentage):
        """Sets the archive_completion_percentage of this ArchivedShard.

        completion percentage of a challenge  # noqa: E501

        :param archive_completion_percentage: The archive_completion_percentage of this ArchivedShard.  # noqa: E501
        :type: float
        """

        self._archive_completion_percentage = archive_completion_percentage

    @property
    def current_completion_percentage(self):
        """Gets the current_completion_percentage of this ArchivedShard.  # noqa: E501

        completion percentage of a challenge  # noqa: E501

        :return: The current_completion_percentage of this ArchivedShard.  # noqa: E501
        :rtype: float
        """
        return self._current_completion_percentage

    @current_completion_percentage.setter
    def current_completion_percentage(self, current_completion_percentage):
        """Sets the current_completion_percentage of this ArchivedShard.

        completion percentage of a challenge  # noqa: E501

        :param current_completion_percentage: The current_completion_percentage of this ArchivedShard.  # noqa: E501
        :type: float
        """

        self._current_completion_percentage = current_completion_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArchivedShard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArchivedShard):
            return True

        return self.to_dict() != other.to_dict()
