# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Style(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'font_style': 'str',
        'font_variant': 'str',
        'font_size': 'int',
        'font_color': 'str'
    }

    attribute_map = {
        'font_style': 'font-style',
        'font_variant': 'font-variant',
        'font_size': 'font-size',
        'font_color': 'font-color'
    }

    def __init__(self, font_style=None, font_variant=None, font_size=None, font_color=None, local_vars_configuration=None):  # noqa: E501
        """Style - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._font_style = None
        self._font_variant = None
        self._font_size = None
        self._font_color = None
        self.discriminator = None

        if font_style is not None:
            self.font_style = font_style
        if font_variant is not None:
            self.font_variant = font_variant
        if font_size is not None:
            self.font_size = font_size
        if font_color is not None:
            self.font_color = font_color

    @property
    def font_style(self):
        """Gets the font_style of this Style.  # noqa: E501

        Character encoding type  # noqa: E501

        :return: The font_style of this Style.  # noqa: E501
        :rtype: str
        """
        return self._font_style

    @font_style.setter
    def font_style(self, font_style):
        """Sets the font_style of this Style.

        Character encoding type  # noqa: E501

        :param font_style: The font_style of this Style.  # noqa: E501
        :type: str
        """
        allowed_values = ["serif", "sans-serif", "handwritten", "collage"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and font_style not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `font_style` ({0}), must be one of {1}"  # noqa: E501
                .format(font_style, allowed_values)
            )

        self._font_style = font_style

    @property
    def font_variant(self):
        """Gets the font_variant of this Style.  # noqa: E501

        Character encoding type  # noqa: E501

        :return: The font_variant of this Style.  # noqa: E501
        :rtype: str
        """
        return self._font_variant

    @font_variant.setter
    def font_variant(self, font_variant):
        """Sets the font_variant of this Style.

        Character encoding type  # noqa: E501

        :param font_variant: The font_variant of this Style.  # noqa: E501
        :type: str
        """
        allowed_values = ["all-caps", "no-caps", "handwritten", "collage"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and font_variant not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `font_variant` ({0}), must be one of {1}"  # noqa: E501
                .format(font_variant, allowed_values)
            )

        self._font_variant = font_variant

    @property
    def font_size(self):
        """Gets the font_size of this Style.  # noqa: E501

        Size of font  # noqa: E501

        :return: The font_size of this Style.  # noqa: E501
        :rtype: int
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this Style.

        Size of font  # noqa: E501

        :param font_size: The font_size of this Style.  # noqa: E501
        :type: int
        """

        self._font_size = font_size

    @property
    def font_color(self):
        """Gets the font_color of this Style.  # noqa: E501

        Color in hex format   # noqa: E501

        :return: The font_color of this Style.  # noqa: E501
        :rtype: str
        """
        return self._font_color

    @font_color.setter
    def font_color(self, font_color):
        """Sets the font_color of this Style.

        Color in hex format   # noqa: E501

        :param font_color: The font_color of this Style.  # noqa: E501
        :type: str
        """

        self._font_color = font_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Style):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Style):
            return True

        return self.to_dict() != other.to_dict()
