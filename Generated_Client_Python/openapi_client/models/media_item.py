# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MediaItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'media_item_id': 'str',
        'type': 'str',
        'format': 'str',
        'descriptor': 'MediaDescriptor',
        'sharding': 'ShardingDescriptor',
        'image': 'Image'
    }

    attribute_map = {
        'media_item_id': 'mediaItemId',
        'type': 'type',
        'format': 'format',
        'descriptor': 'descriptor',
        'sharding': 'sharding',
        'image': 'image'
    }

    def __init__(self, media_item_id=None, type=None, format=None, descriptor=None, sharding=None, image=None, local_vars_configuration=None):  # noqa: E501
        """MediaItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._media_item_id = None
        self._type = None
        self._format = None
        self._descriptor = None
        self._sharding = None
        self._image = None
        self.discriminator = None

        if media_item_id is not None:
            self.media_item_id = media_item_id
        if type is not None:
            self.type = type
        if format is not None:
            self.format = format
        if descriptor is not None:
            self.descriptor = descriptor
        if sharding is not None:
            self.sharding = sharding
        if image is not None:
            self.image = image

    @property
    def media_item_id(self):
        """Gets the media_item_id of this MediaItem.  # noqa: E501

        [TBD] Alpha-numeric, unique id of media item  # noqa: E501

        :return: The media_item_id of this MediaItem.  # noqa: E501
        :rtype: str
        """
        return self._media_item_id

    @media_item_id.setter
    def media_item_id(self, media_item_id):
        """Sets the media_item_id of this MediaItem.

        [TBD] Alpha-numeric, unique id of media item  # noqa: E501

        :param media_item_id: The media_item_id of this MediaItem.  # noqa: E501
        :type: str
        """

        self._media_item_id = media_item_id

    @property
    def type(self):
        """Gets the type of this MediaItem.  # noqa: E501


        :return: The type of this MediaItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MediaItem.


        :param type: The type of this MediaItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["rgb-static-photo", "rgb-live-photo", "rgb-video", "audio-rgb-video", "audio-only", "text"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def format(self):
        """Gets the format of this MediaItem.  # noqa: E501


        :return: The format of this MediaItem.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MediaItem.


        :param format: The format of this MediaItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["image/heif", "image/heic", "image/heif-sequence", "image/jpeg", "image/png", "video/mp4", "video/3gpp", "video/quicktime", "video/x-msvideo", "video/x-ms-wmv"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def descriptor(self):
        """Gets the descriptor of this MediaItem.  # noqa: E501


        :return: The descriptor of this MediaItem.  # noqa: E501
        :rtype: MediaDescriptor
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this MediaItem.


        :param descriptor: The descriptor of this MediaItem.  # noqa: E501
        :type: MediaDescriptor
        """

        self._descriptor = descriptor

    @property
    def sharding(self):
        """Gets the sharding of this MediaItem.  # noqa: E501


        :return: The sharding of this MediaItem.  # noqa: E501
        :rtype: ShardingDescriptor
        """
        return self._sharding

    @sharding.setter
    def sharding(self, sharding):
        """Sets the sharding of this MediaItem.


        :param sharding: The sharding of this MediaItem.  # noqa: E501
        :type: ShardingDescriptor
        """

        self._sharding = sharding

    @property
    def image(self):
        """Gets the image of this MediaItem.  # noqa: E501


        :return: The image of this MediaItem.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this MediaItem.


        :param image: The image of this MediaItem.  # noqa: E501
        :type: Image
        """

        self._image = image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaItem):
            return True

        return self.to_dict() != other.to_dict()
