# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MergedTag(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'merged_tag_id': 'str',
        'media_item_id': 'str',
        'challenge_id': 'str',
        'permanent_identifier': 'PermanentIdentifier',
        'node_type': 'str',
        'geometry': 'list[Shape]',
        'evaluation': 'Evaluation',
        'composing_tags': 'list[str]',
        'evaluation_status': 'str'
    }

    attribute_map = {
        'merged_tag_id': 'mergedTagId',
        'media_item_id': 'mediaItemId',
        'challenge_id': 'challengeId',
        'permanent_identifier': 'permanentIdentifier',
        'node_type': 'nodeType',
        'geometry': 'geometry',
        'evaluation': 'evaluation',
        'composing_tags': 'composingTags',
        'evaluation_status': 'evaluationStatus'
    }

    def __init__(self, merged_tag_id=None, media_item_id=None, challenge_id=None, permanent_identifier=None, node_type=None, geometry=None, evaluation=None, composing_tags=None, evaluation_status=None, local_vars_configuration=None):  # noqa: E501
        """MergedTag - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._merged_tag_id = None
        self._media_item_id = None
        self._challenge_id = None
        self._permanent_identifier = None
        self._node_type = None
        self._geometry = None
        self._evaluation = None
        self._composing_tags = None
        self._evaluation_status = None
        self.discriminator = None

        if merged_tag_id is not None:
            self.merged_tag_id = merged_tag_id
        if media_item_id is not None:
            self.media_item_id = media_item_id
        if challenge_id is not None:
            self.challenge_id = challenge_id
        if permanent_identifier is not None:
            self.permanent_identifier = permanent_identifier
        if node_type is not None:
            self.node_type = node_type
        if geometry is not None:
            self.geometry = geometry
        if evaluation is not None:
            self.evaluation = evaluation
        if composing_tags is not None:
            self.composing_tags = composing_tags
        if evaluation_status is not None:
            self.evaluation_status = evaluation_status

    @property
    def merged_tag_id(self):
        """Gets the merged_tag_id of this MergedTag.  # noqa: E501

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The merged_tag_id of this MergedTag.  # noqa: E501
        :rtype: str
        """
        return self._merged_tag_id

    @merged_tag_id.setter
    def merged_tag_id(self, merged_tag_id):
        """Sets the merged_tag_id of this MergedTag.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param merged_tag_id: The merged_tag_id of this MergedTag.  # noqa: E501
        :type: str
        """

        self._merged_tag_id = merged_tag_id

    @property
    def media_item_id(self):
        """Gets the media_item_id of this MergedTag.  # noqa: E501

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The media_item_id of this MergedTag.  # noqa: E501
        :rtype: str
        """
        return self._media_item_id

    @media_item_id.setter
    def media_item_id(self, media_item_id):
        """Sets the media_item_id of this MergedTag.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param media_item_id: The media_item_id of this MergedTag.  # noqa: E501
        :type: str
        """

        self._media_item_id = media_item_id

    @property
    def challenge_id(self):
        """Gets the challenge_id of this MergedTag.  # noqa: E501

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The challenge_id of this MergedTag.  # noqa: E501
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this MergedTag.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param challenge_id: The challenge_id of this MergedTag.  # noqa: E501
        :type: str
        """

        self._challenge_id = challenge_id

    @property
    def permanent_identifier(self):
        """Gets the permanent_identifier of this MergedTag.  # noqa: E501


        :return: The permanent_identifier of this MergedTag.  # noqa: E501
        :rtype: PermanentIdentifier
        """
        return self._permanent_identifier

    @permanent_identifier.setter
    def permanent_identifier(self, permanent_identifier):
        """Sets the permanent_identifier of this MergedTag.


        :param permanent_identifier: The permanent_identifier of this MergedTag.  # noqa: E501
        :type: PermanentIdentifier
        """

        self._permanent_identifier = permanent_identifier

    @property
    def node_type(self):
        """Gets the node_type of this MergedTag.  # noqa: E501

        What type of object/event has been detected?  # noqa: E501

        :return: The node_type of this MergedTag.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this MergedTag.

        What type of object/event has been detected?  # noqa: E501

        :param node_type: The node_type of this MergedTag.  # noqa: E501
        :type: str
        """

        self._node_type = node_type

    @property
    def geometry(self):
        """Gets the geometry of this MergedTag.  # noqa: E501

        What are the shapes that have been merged to determine this tag?  # noqa: E501

        :return: The geometry of this MergedTag.  # noqa: E501
        :rtype: list[Shape]
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this MergedTag.

        What are the shapes that have been merged to determine this tag?  # noqa: E501

        :param geometry: The geometry of this MergedTag.  # noqa: E501
        :type: list[Shape]
        """

        self._geometry = geometry

    @property
    def evaluation(self):
        """Gets the evaluation of this MergedTag.  # noqa: E501


        :return: The evaluation of this MergedTag.  # noqa: E501
        :rtype: Evaluation
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this MergedTag.


        :param evaluation: The evaluation of this MergedTag.  # noqa: E501
        :type: Evaluation
        """

        self._evaluation = evaluation

    @property
    def composing_tags(self):
        """Gets the composing_tags of this MergedTag.  # noqa: E501

        What are the tags which have been merged?  # noqa: E501

        :return: The composing_tags of this MergedTag.  # noqa: E501
        :rtype: list[str]
        """
        return self._composing_tags

    @composing_tags.setter
    def composing_tags(self, composing_tags):
        """Sets the composing_tags of this MergedTag.

        What are the tags which have been merged?  # noqa: E501

        :param composing_tags: The composing_tags of this MergedTag.  # noqa: E501
        :type: list[str]
        """

        self._composing_tags = composing_tags

    @property
    def evaluation_status(self):
        """Gets the evaluation_status of this MergedTag.  # noqa: E501


        :return: The evaluation_status of this MergedTag.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_status

    @evaluation_status.setter
    def evaluation_status(self, evaluation_status):
        """Sets the evaluation_status of this MergedTag.


        :param evaluation_status: The evaluation_status of this MergedTag.  # noqa: E501
        :type: str
        """
        allowed_values = ["passed", "failed", "incomplete"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and evaluation_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `evaluation_status` ({0}), must be one of {1}"  # noqa: E501
                .format(evaluation_status, allowed_values)
            )

        self._evaluation_status = evaluation_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MergedTag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MergedTag):
            return True

        return self.to_dict() != other.to_dict()
