# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Dataset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_id': 'str',
        'type': 'DatasetTypeEnum',
        'creation_timestamp': 'datetime',
        'last_update_timestamp': 'datetime',
        'owning_account_id': 'str',
        'name': 'str',
        'image': 'Image',
        'storage_cost': 'float'
    }

    attribute_map = {
        'dataset_id': 'datasetId',
        'type': 'type',
        'creation_timestamp': 'creationTimestamp',
        'last_update_timestamp': 'lastUpdateTimestamp',
        'owning_account_id': 'owningAccountId',
        'name': 'name',
        'image': 'image',
        'storage_cost': 'storageCost'
    }

    def __init__(self, dataset_id=None, type=None, creation_timestamp=None, last_update_timestamp=None, owning_account_id=None, name=None, image=None, storage_cost=None, local_vars_configuration=None):  # noqa: E501
        """Dataset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_id = None
        self._type = None
        self._creation_timestamp = None
        self._last_update_timestamp = None
        self._owning_account_id = None
        self._name = None
        self._image = None
        self._storage_cost = None
        self.discriminator = None

        if dataset_id is not None:
            self.dataset_id = dataset_id
        if type is not None:
            self.type = type
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if owning_account_id is not None:
            self.owning_account_id = owning_account_id
        if name is not None:
            self.name = name
        if image is not None:
            self.image = image
        if storage_cost is not None:
            self.storage_cost = storage_cost

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Dataset.  # noqa: E501

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :return: The dataset_id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Dataset.

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :param dataset_id: The dataset_id of this Dataset.  # noqa: E501
        :type: str
        """

        self._dataset_id = dataset_id

    @property
    def type(self):
        """Gets the type of this Dataset.  # noqa: E501


        :return: The type of this Dataset.  # noqa: E501
        :rtype: DatasetTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dataset.


        :param type: The type of this Dataset.  # noqa: E501
        :type: DatasetTypeEnum
        """

        self._type = type

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this Dataset.  # noqa: E501

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :return: The creation_timestamp of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this Dataset.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this Dataset.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this Dataset.  # noqa: E501

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :return: The last_update_timestamp of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this Dataset.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this Dataset.  # noqa: E501
        :type: datetime
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def owning_account_id(self):
        """Gets the owning_account_id of this Dataset.  # noqa: E501

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :return: The owning_account_id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._owning_account_id

    @owning_account_id.setter
    def owning_account_id(self, owning_account_id):
        """Sets the owning_account_id of this Dataset.

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :param owning_account_id: The owning_account_id of this Dataset.  # noqa: E501
        :type: str
        """

        self._owning_account_id = owning_account_id

    @property
    def name(self):
        """Gets the name of this Dataset.  # noqa: E501

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The name of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param name: The name of this Dataset.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def image(self):
        """Gets the image of this Dataset.  # noqa: E501


        :return: The image of this Dataset.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Dataset.


        :param image: The image of this Dataset.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def storage_cost(self):
        """Gets the storage_cost of this Dataset.  # noqa: E501

        cost for storage in dollars per month  # noqa: E501

        :return: The storage_cost of this Dataset.  # noqa: E501
        :rtype: float
        """
        return self._storage_cost

    @storage_cost.setter
    def storage_cost(self, storage_cost):
        """Sets the storage_cost of this Dataset.

        cost for storage in dollars per month  # noqa: E501

        :param storage_cost: The storage_cost of this Dataset.  # noqa: E501
        :type: float
        """

        self._storage_cost = storage_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Dataset):
            return True

        return self.to_dict() != other.to_dict()
