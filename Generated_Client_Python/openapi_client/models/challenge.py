# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Challenge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'challenge_id': 'str',
        'dataset_id': 'str',
        'evaluation_policy_id': 'str',
        'dispatch_policy_id': 'str',
        'creation_timestamp': 'datetime',
        'status': 'ChallengeStatusEnum',
        'access_type': 'ChallengeAccessTypeEnum',
        'tenant_role': 'ChallengeTenantRoleEnum',
        'name': 'str',
        'completion_percentage': 'int',
        'completion_percentage_for_collaborator': 'int',
        'description': 'str',
        'budget': 'float',
        'stared': 'bool',
        'supplier_tenant_id': 'str',
        'resolution': 'str',
        'demander_tenant_id': 'str',
        'initial_number_of_shards': 'int',
        'dataset_metadata': 'ChallengeDatasetMetadata',
        'tag_type': 'ShapeTypeEnum',
        'estimated_tags_per_media_item': 'float',
        'node_taxonomy': 'list[str]',
        'edge_taxonomy': 'list[str]',
        'completion_percentages': 'list[ChallengeCompletionPercentage]',
        'expiration': 'int',
        'challenge_access_token': 'str'
    }

    attribute_map = {
        'challenge_id': 'challengeId',
        'dataset_id': 'datasetId',
        'evaluation_policy_id': 'evaluationPolicyId',
        'dispatch_policy_id': 'dispatchPolicyId',
        'creation_timestamp': 'creationTimestamp',
        'status': 'status',
        'access_type': 'accessType',
        'tenant_role': 'tenantRole',
        'name': 'name',
        'completion_percentage': 'completionPercentage',
        'completion_percentage_for_collaborator': 'completionPercentageForCollaborator',
        'description': 'description',
        'budget': 'budget',
        'stared': 'stared',
        'supplier_tenant_id': 'supplierTenantId',
        'resolution': 'resolution',
        'demander_tenant_id': 'demanderTenantId',
        'initial_number_of_shards': 'initialNumberOfShards',
        'dataset_metadata': 'datasetMetadata',
        'tag_type': 'tagType',
        'estimated_tags_per_media_item': 'estimatedTagsPerMediaItem',
        'node_taxonomy': 'nodeTaxonomy',
        'edge_taxonomy': 'edgeTaxonomy',
        'completion_percentages': 'completionPercentages',
        'expiration': 'expiration',
        'challenge_access_token': 'challengeAccessToken'
    }

    def __init__(self, challenge_id=None, dataset_id=None, evaluation_policy_id=None, dispatch_policy_id=None, creation_timestamp=None, status=None, access_type=None, tenant_role=None, name=None, completion_percentage=None, completion_percentage_for_collaborator=None, description=None, budget=None, stared=None, supplier_tenant_id=None, resolution=None, demander_tenant_id=None, initial_number_of_shards=None, dataset_metadata=None, tag_type=None, estimated_tags_per_media_item=None, node_taxonomy=None, edge_taxonomy=None, completion_percentages=None, expiration=None, challenge_access_token=None, local_vars_configuration=None):  # noqa: E501
        """Challenge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._challenge_id = None
        self._dataset_id = None
        self._evaluation_policy_id = None
        self._dispatch_policy_id = None
        self._creation_timestamp = None
        self._status = None
        self._access_type = None
        self._tenant_role = None
        self._name = None
        self._completion_percentage = None
        self._completion_percentage_for_collaborator = None
        self._description = None
        self._budget = None
        self._stared = None
        self._supplier_tenant_id = None
        self._resolution = None
        self._demander_tenant_id = None
        self._initial_number_of_shards = None
        self._dataset_metadata = None
        self._tag_type = None
        self._estimated_tags_per_media_item = None
        self._node_taxonomy = None
        self._edge_taxonomy = None
        self._completion_percentages = None
        self._expiration = None
        self._challenge_access_token = None
        self.discriminator = None

        if challenge_id is not None:
            self.challenge_id = challenge_id
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if evaluation_policy_id is not None:
            self.evaluation_policy_id = evaluation_policy_id
        if dispatch_policy_id is not None:
            self.dispatch_policy_id = dispatch_policy_id
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if status is not None:
            self.status = status
        self.access_type = access_type
        if tenant_role is not None:
            self.tenant_role = tenant_role
        if name is not None:
            self.name = name
        if completion_percentage is not None:
            self.completion_percentage = completion_percentage
        if completion_percentage_for_collaborator is not None:
            self.completion_percentage_for_collaborator = completion_percentage_for_collaborator
        if description is not None:
            self.description = description
        if budget is not None:
            self.budget = budget
        if stared is not None:
            self.stared = stared
        if supplier_tenant_id is not None:
            self.supplier_tenant_id = supplier_tenant_id
        if resolution is not None:
            self.resolution = resolution
        if demander_tenant_id is not None:
            self.demander_tenant_id = demander_tenant_id
        if initial_number_of_shards is not None:
            self.initial_number_of_shards = initial_number_of_shards
        if dataset_metadata is not None:
            self.dataset_metadata = dataset_metadata
        if tag_type is not None:
            self.tag_type = tag_type
        if estimated_tags_per_media_item is not None:
            self.estimated_tags_per_media_item = estimated_tags_per_media_item
        if node_taxonomy is not None:
            self.node_taxonomy = node_taxonomy
        if edge_taxonomy is not None:
            self.edge_taxonomy = edge_taxonomy
        if completion_percentages is not None:
            self.completion_percentages = completion_percentages
        if expiration is not None:
            self.expiration = expiration
        if challenge_access_token is not None:
            self.challenge_access_token = challenge_access_token

    @property
    def challenge_id(self):
        """Gets the challenge_id of this Challenge.  # noqa: E501

        Alpha-numeric, unique id of challenge.   # noqa: E501

        :return: The challenge_id of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this Challenge.

        Alpha-numeric, unique id of challenge.   # noqa: E501

        :param challenge_id: The challenge_id of this Challenge.  # noqa: E501
        :type: str
        """

        self._challenge_id = challenge_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Challenge.  # noqa: E501

        Alpha-numeric, unique id of dataset  # noqa: E501

        :return: The dataset_id of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Challenge.

        Alpha-numeric, unique id of dataset  # noqa: E501

        :param dataset_id: The dataset_id of this Challenge.  # noqa: E501
        :type: str
        """

        self._dataset_id = dataset_id

    @property
    def evaluation_policy_id(self):
        """Gets the evaluation_policy_id of this Challenge.  # noqa: E501

        Alpha-numeric, unique id of evaluation policy  # noqa: E501

        :return: The evaluation_policy_id of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_policy_id

    @evaluation_policy_id.setter
    def evaluation_policy_id(self, evaluation_policy_id):
        """Sets the evaluation_policy_id of this Challenge.

        Alpha-numeric, unique id of evaluation policy  # noqa: E501

        :param evaluation_policy_id: The evaluation_policy_id of this Challenge.  # noqa: E501
        :type: str
        """

        self._evaluation_policy_id = evaluation_policy_id

    @property
    def dispatch_policy_id(self):
        """Gets the dispatch_policy_id of this Challenge.  # noqa: E501

        Alpha-numeric, unique id of dispatch policy  # noqa: E501

        :return: The dispatch_policy_id of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._dispatch_policy_id

    @dispatch_policy_id.setter
    def dispatch_policy_id(self, dispatch_policy_id):
        """Sets the dispatch_policy_id of this Challenge.

        Alpha-numeric, unique id of dispatch policy  # noqa: E501

        :param dispatch_policy_id: The dispatch_policy_id of this Challenge.  # noqa: E501
        :type: str
        """

        self._dispatch_policy_id = dispatch_policy_id

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this Challenge.  # noqa: E501

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :return: The creation_timestamp of this Challenge.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this Challenge.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this Challenge.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def status(self):
        """Gets the status of this Challenge.  # noqa: E501


        :return: The status of this Challenge.  # noqa: E501
        :rtype: ChallengeStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Challenge.


        :param status: The status of this Challenge.  # noqa: E501
        :type: ChallengeStatusEnum
        """

        self._status = status

    @property
    def access_type(self):
        """Gets the access_type of this Challenge.  # noqa: E501


        :return: The access_type of this Challenge.  # noqa: E501
        :rtype: ChallengeAccessTypeEnum
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this Challenge.


        :param access_type: The access_type of this Challenge.  # noqa: E501
        :type: ChallengeAccessTypeEnum
        """
        if self.local_vars_configuration.client_side_validation and access_type is None:  # noqa: E501
            raise ValueError("Invalid value for `access_type`, must not be `None`")  # noqa: E501

        self._access_type = access_type

    @property
    def tenant_role(self):
        """Gets the tenant_role of this Challenge.  # noqa: E501


        :return: The tenant_role of this Challenge.  # noqa: E501
        :rtype: ChallengeTenantRoleEnum
        """
        return self._tenant_role

    @tenant_role.setter
    def tenant_role(self, tenant_role):
        """Sets the tenant_role of this Challenge.


        :param tenant_role: The tenant_role of this Challenge.  # noqa: E501
        :type: ChallengeTenantRoleEnum
        """

        self._tenant_role = tenant_role

    @property
    def name(self):
        """Gets the name of this Challenge.  # noqa: E501

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The name of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param name: The name of this Challenge.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def completion_percentage(self):
        """Gets the completion_percentage of this Challenge.  # noqa: E501

        completion percentage of a challenge  # noqa: E501

        :return: The completion_percentage of this Challenge.  # noqa: E501
        :rtype: int
        """
        return self._completion_percentage

    @completion_percentage.setter
    def completion_percentage(self, completion_percentage):
        """Sets the completion_percentage of this Challenge.

        completion percentage of a challenge  # noqa: E501

        :param completion_percentage: The completion_percentage of this Challenge.  # noqa: E501
        :type: int
        """

        self._completion_percentage = completion_percentage

    @property
    def completion_percentage_for_collaborator(self):
        """Gets the completion_percentage_for_collaborator of this Challenge.  # noqa: E501

        completion percentage of a challenge for a collaborator  # noqa: E501

        :return: The completion_percentage_for_collaborator of this Challenge.  # noqa: E501
        :rtype: int
        """
        return self._completion_percentage_for_collaborator

    @completion_percentage_for_collaborator.setter
    def completion_percentage_for_collaborator(self, completion_percentage_for_collaborator):
        """Sets the completion_percentage_for_collaborator of this Challenge.

        completion percentage of a challenge for a collaborator  # noqa: E501

        :param completion_percentage_for_collaborator: The completion_percentage_for_collaborator of this Challenge.  # noqa: E501
        :type: int
        """

        self._completion_percentage_for_collaborator = completion_percentage_for_collaborator

    @property
    def description(self):
        """Gets the description of this Challenge.  # noqa: E501

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The description of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param description: The description of this Challenge.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def budget(self):
        """Gets the budget of this Challenge.  # noqa: E501

        budget allocated for challenge  # noqa: E501

        :return: The budget of this Challenge.  # noqa: E501
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this Challenge.

        budget allocated for challenge  # noqa: E501

        :param budget: The budget of this Challenge.  # noqa: E501
        :type: float
        """

        self._budget = budget

    @property
    def stared(self):
        """Gets the stared of this Challenge.  # noqa: E501

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The stared of this Challenge.  # noqa: E501
        :rtype: bool
        """
        return self._stared

    @stared.setter
    def stared(self, stared):
        """Sets the stared of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param stared: The stared of this Challenge.  # noqa: E501
        :type: bool
        """

        self._stared = stared

    @property
    def supplier_tenant_id(self):
        """Gets the supplier_tenant_id of this Challenge.  # noqa: E501

        [TBD] Alpha-numeric, name of supplierTenantId  # noqa: E501

        :return: The supplier_tenant_id of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._supplier_tenant_id

    @supplier_tenant_id.setter
    def supplier_tenant_id(self, supplier_tenant_id):
        """Sets the supplier_tenant_id of this Challenge.

        [TBD] Alpha-numeric, name of supplierTenantId  # noqa: E501

        :param supplier_tenant_id: The supplier_tenant_id of this Challenge.  # noqa: E501
        :type: str
        """

        self._supplier_tenant_id = supplier_tenant_id

    @property
    def resolution(self):
        """Gets the resolution of this Challenge.  # noqa: E501

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The resolution of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param resolution: The resolution of this Challenge.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def demander_tenant_id(self):
        """Gets the demander_tenant_id of this Challenge.  # noqa: E501

        [TBD] Alpha-numeric, name of demanderTenantId  # noqa: E501

        :return: The demander_tenant_id of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._demander_tenant_id

    @demander_tenant_id.setter
    def demander_tenant_id(self, demander_tenant_id):
        """Sets the demander_tenant_id of this Challenge.

        [TBD] Alpha-numeric, name of demanderTenantId  # noqa: E501

        :param demander_tenant_id: The demander_tenant_id of this Challenge.  # noqa: E501
        :type: str
        """

        self._demander_tenant_id = demander_tenant_id

    @property
    def initial_number_of_shards(self):
        """Gets the initial_number_of_shards of this Challenge.  # noqa: E501

        shards in dataset  # noqa: E501

        :return: The initial_number_of_shards of this Challenge.  # noqa: E501
        :rtype: int
        """
        return self._initial_number_of_shards

    @initial_number_of_shards.setter
    def initial_number_of_shards(self, initial_number_of_shards):
        """Sets the initial_number_of_shards of this Challenge.

        shards in dataset  # noqa: E501

        :param initial_number_of_shards: The initial_number_of_shards of this Challenge.  # noqa: E501
        :type: int
        """

        self._initial_number_of_shards = initial_number_of_shards

    @property
    def dataset_metadata(self):
        """Gets the dataset_metadata of this Challenge.  # noqa: E501


        :return: The dataset_metadata of this Challenge.  # noqa: E501
        :rtype: ChallengeDatasetMetadata
        """
        return self._dataset_metadata

    @dataset_metadata.setter
    def dataset_metadata(self, dataset_metadata):
        """Sets the dataset_metadata of this Challenge.


        :param dataset_metadata: The dataset_metadata of this Challenge.  # noqa: E501
        :type: ChallengeDatasetMetadata
        """

        self._dataset_metadata = dataset_metadata

    @property
    def tag_type(self):
        """Gets the tag_type of this Challenge.  # noqa: E501


        :return: The tag_type of this Challenge.  # noqa: E501
        :rtype: ShapeTypeEnum
        """
        return self._tag_type

    @tag_type.setter
    def tag_type(self, tag_type):
        """Sets the tag_type of this Challenge.


        :param tag_type: The tag_type of this Challenge.  # noqa: E501
        :type: ShapeTypeEnum
        """

        self._tag_type = tag_type

    @property
    def estimated_tags_per_media_item(self):
        """Gets the estimated_tags_per_media_item of this Challenge.  # noqa: E501

        estimated Tags Per Media Item  # noqa: E501

        :return: The estimated_tags_per_media_item of this Challenge.  # noqa: E501
        :rtype: float
        """
        return self._estimated_tags_per_media_item

    @estimated_tags_per_media_item.setter
    def estimated_tags_per_media_item(self, estimated_tags_per_media_item):
        """Sets the estimated_tags_per_media_item of this Challenge.

        estimated Tags Per Media Item  # noqa: E501

        :param estimated_tags_per_media_item: The estimated_tags_per_media_item of this Challenge.  # noqa: E501
        :type: float
        """

        self._estimated_tags_per_media_item = estimated_tags_per_media_item

    @property
    def node_taxonomy(self):
        """Gets the node_taxonomy of this Challenge.  # noqa: E501

        taxonomy list for nodeType  # noqa: E501

        :return: The node_taxonomy of this Challenge.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_taxonomy

    @node_taxonomy.setter
    def node_taxonomy(self, node_taxonomy):
        """Sets the node_taxonomy of this Challenge.

        taxonomy list for nodeType  # noqa: E501

        :param node_taxonomy: The node_taxonomy of this Challenge.  # noqa: E501
        :type: list[str]
        """

        self._node_taxonomy = node_taxonomy

    @property
    def edge_taxonomy(self):
        """Gets the edge_taxonomy of this Challenge.  # noqa: E501

        taxonomy list for edgeType  # noqa: E501

        :return: The edge_taxonomy of this Challenge.  # noqa: E501
        :rtype: list[str]
        """
        return self._edge_taxonomy

    @edge_taxonomy.setter
    def edge_taxonomy(self, edge_taxonomy):
        """Sets the edge_taxonomy of this Challenge.

        taxonomy list for edgeType  # noqa: E501

        :param edge_taxonomy: The edge_taxonomy of this Challenge.  # noqa: E501
        :type: list[str]
        """

        self._edge_taxonomy = edge_taxonomy

    @property
    def completion_percentages(self):
        """Gets the completion_percentages of this Challenge.  # noqa: E501


        :return: The completion_percentages of this Challenge.  # noqa: E501
        :rtype: list[ChallengeCompletionPercentage]
        """
        return self._completion_percentages

    @completion_percentages.setter
    def completion_percentages(self, completion_percentages):
        """Sets the completion_percentages of this Challenge.


        :param completion_percentages: The completion_percentages of this Challenge.  # noqa: E501
        :type: list[ChallengeCompletionPercentage]
        """

        self._completion_percentages = completion_percentages

    @property
    def expiration(self):
        """Gets the expiration of this Challenge.  # noqa: E501

        hours until the challenge is expired  # noqa: E501

        :return: The expiration of this Challenge.  # noqa: E501
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this Challenge.

        hours until the challenge is expired  # noqa: E501

        :param expiration: The expiration of this Challenge.  # noqa: E501
        :type: int
        """

        self._expiration = expiration

    @property
    def challenge_access_token(self):
        """Gets the challenge_access_token of this Challenge.  # noqa: E501

        Token for accessing the challenge  # noqa: E501

        :return: The challenge_access_token of this Challenge.  # noqa: E501
        :rtype: str
        """
        return self._challenge_access_token

    @challenge_access_token.setter
    def challenge_access_token(self, challenge_access_token):
        """Sets the challenge_access_token of this Challenge.

        Token for accessing the challenge  # noqa: E501

        :param challenge_access_token: The challenge_access_token of this Challenge.  # noqa: E501
        :type: str
        """

        self._challenge_access_token = challenge_access_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Challenge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Challenge):
            return True

        return self.to_dict() != other.to_dict()
