# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Edge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_tag_id': 'str',
        'destination_tag_id': 'str',
        'source_text_box_id': 'str',
        'destination_text_box_id': 'str',
        'edge_type': 'str',
        'slack': 'float',
        'elasticity': 'float',
        'internal_subjective_opinion': 'InternalSubjectiveOpinion'
    }

    attribute_map = {
        'source_tag_id': 'sourceTagId',
        'destination_tag_id': 'destinationTagID',
        'source_text_box_id': 'sourceTextBoxId',
        'destination_text_box_id': 'destinationTextBoxId',
        'edge_type': 'edgeType',
        'slack': 'slack',
        'elasticity': 'elasticity',
        'internal_subjective_opinion': 'internalSubjectiveOpinion'
    }

    def __init__(self, source_tag_id=None, destination_tag_id=None, source_text_box_id=None, destination_text_box_id=None, edge_type=None, slack=None, elasticity=None, internal_subjective_opinion=None, local_vars_configuration=None):  # noqa: E501
        """Edge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source_tag_id = None
        self._destination_tag_id = None
        self._source_text_box_id = None
        self._destination_text_box_id = None
        self._edge_type = None
        self._slack = None
        self._elasticity = None
        self._internal_subjective_opinion = None
        self.discriminator = None

        if source_tag_id is not None:
            self.source_tag_id = source_tag_id
        if destination_tag_id is not None:
            self.destination_tag_id = destination_tag_id
        if source_text_box_id is not None:
            self.source_text_box_id = source_text_box_id
        if destination_text_box_id is not None:
            self.destination_text_box_id = destination_text_box_id
        if edge_type is not None:
            self.edge_type = edge_type
        if slack is not None:
            self.slack = slack
        if elasticity is not None:
            self.elasticity = elasticity
        if internal_subjective_opinion is not None:
            self.internal_subjective_opinion = internal_subjective_opinion

    @property
    def source_tag_id(self):
        """Gets the source_tag_id of this Edge.  # noqa: E501

        Need to find solution for unifying tag id's across taggers-collaborators.Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The source_tag_id of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._source_tag_id

    @source_tag_id.setter
    def source_tag_id(self, source_tag_id):
        """Sets the source_tag_id of this Edge.

        Need to find solution for unifying tag id's across taggers-collaborators.Alpha-numeric, unique id of tagged object  # noqa: E501

        :param source_tag_id: The source_tag_id of this Edge.  # noqa: E501
        :type: str
        """

        self._source_tag_id = source_tag_id

    @property
    def destination_tag_id(self):
        """Gets the destination_tag_id of this Edge.  # noqa: E501

        Need to find solution for unifying tag id's across taggers-collaborators. Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The destination_tag_id of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._destination_tag_id

    @destination_tag_id.setter
    def destination_tag_id(self, destination_tag_id):
        """Sets the destination_tag_id of this Edge.

        Need to find solution for unifying tag id's across taggers-collaborators. Alpha-numeric, unique id of tagged object  # noqa: E501

        :param destination_tag_id: The destination_tag_id of this Edge.  # noqa: E501
        :type: str
        """

        self._destination_tag_id = destination_tag_id

    @property
    def source_text_box_id(self):
        """Gets the source_text_box_id of this Edge.  # noqa: E501

        textBox id from inside sourceTag  # noqa: E501

        :return: The source_text_box_id of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._source_text_box_id

    @source_text_box_id.setter
    def source_text_box_id(self, source_text_box_id):
        """Sets the source_text_box_id of this Edge.

        textBox id from inside sourceTag  # noqa: E501

        :param source_text_box_id: The source_text_box_id of this Edge.  # noqa: E501
        :type: str
        """

        self._source_text_box_id = source_text_box_id

    @property
    def destination_text_box_id(self):
        """Gets the destination_text_box_id of this Edge.  # noqa: E501

        textBox id from inside destinationTag  # noqa: E501

        :return: The destination_text_box_id of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._destination_text_box_id

    @destination_text_box_id.setter
    def destination_text_box_id(self, destination_text_box_id):
        """Sets the destination_text_box_id of this Edge.

        textBox id from inside destinationTag  # noqa: E501

        :param destination_text_box_id: The destination_text_box_id of this Edge.  # noqa: E501
        :type: str
        """

        self._destination_text_box_id = destination_text_box_id

    @property
    def edge_type(self):
        """Gets the edge_type of this Edge.  # noqa: E501

        The type of the relationship between the two objects. Can be extended to discrete histogram of types. All types must belong to taxonomy or the challenge must allow for open-taxonomy.  # noqa: E501

        :return: The edge_type of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._edge_type

    @edge_type.setter
    def edge_type(self, edge_type):
        """Sets the edge_type of this Edge.

        The type of the relationship between the two objects. Can be extended to discrete histogram of types. All types must belong to taxonomy or the challenge must allow for open-taxonomy.  # noqa: E501

        :param edge_type: The edge_type of this Edge.  # noqa: E501
        :type: str
        """

        self._edge_type = edge_type

    @property
    def slack(self):
        """Gets the slack of this Edge.  # noqa: E501

        How much the edge can allow for the nodes to move without changing its length?  # noqa: E501

        :return: The slack of this Edge.  # noqa: E501
        :rtype: float
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this Edge.

        How much the edge can allow for the nodes to move without changing its length?  # noqa: E501

        :param slack: The slack of this Edge.  # noqa: E501
        :type: float
        """

        self._slack = slack

    @property
    def elasticity(self):
        """Gets the elasticity of this Edge.  # noqa: E501

        How much the edge can extended or contracted?  # noqa: E501

        :return: The elasticity of this Edge.  # noqa: E501
        :rtype: float
        """
        return self._elasticity

    @elasticity.setter
    def elasticity(self, elasticity):
        """Sets the elasticity of this Edge.

        How much the edge can extended or contracted?  # noqa: E501

        :param elasticity: The elasticity of this Edge.  # noqa: E501
        :type: float
        """

        self._elasticity = elasticity

    @property
    def internal_subjective_opinion(self):
        """Gets the internal_subjective_opinion of this Edge.  # noqa: E501


        :return: The internal_subjective_opinion of this Edge.  # noqa: E501
        :rtype: InternalSubjectiveOpinion
        """
        return self._internal_subjective_opinion

    @internal_subjective_opinion.setter
    def internal_subjective_opinion(self, internal_subjective_opinion):
        """Sets the internal_subjective_opinion of this Edge.


        :param internal_subjective_opinion: The internal_subjective_opinion of this Edge.  # noqa: E501
        :type: InternalSubjectiveOpinion
        """

        self._internal_subjective_opinion = internal_subjective_opinion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Edge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Edge):
            return True

        return self.to_dict() != other.to_dict()
