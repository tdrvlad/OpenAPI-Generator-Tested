# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_id': 'str',
        'avatar_id': 'str',
        'challenge_id': 'str',
        'attempt_sequence_number': 'int',
        'generation_timestamp': 'datetime',
        'submission_timestamp': 'datetime',
        'image': 'Image',
        'evaluation_status': 'str',
        'challenge_name': 'str',
        'challenge_description': 'str',
        'tags': 'list[Tag]',
        'edges': 'list[Edge]',
        'resolution': 'TaskResolution'
    }

    attribute_map = {
        'task_id': 'taskId',
        'avatar_id': 'avatarId',
        'challenge_id': 'challengeId',
        'attempt_sequence_number': 'attemptSequenceNumber',
        'generation_timestamp': 'generationTimestamp',
        'submission_timestamp': 'submissionTimestamp',
        'image': 'image',
        'evaluation_status': 'evaluationStatus',
        'challenge_name': 'challengeName',
        'challenge_description': 'challengeDescription',
        'tags': 'tags',
        'edges': 'edges',
        'resolution': 'resolution'
    }

    def __init__(self, task_id=None, avatar_id=None, challenge_id=None, attempt_sequence_number=None, generation_timestamp=None, submission_timestamp=None, image=None, evaluation_status=None, challenge_name=None, challenge_description=None, tags=None, edges=None, resolution=None, local_vars_configuration=None):  # noqa: E501
        """Task - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_id = None
        self._avatar_id = None
        self._challenge_id = None
        self._attempt_sequence_number = None
        self._generation_timestamp = None
        self._submission_timestamp = None
        self._image = None
        self._evaluation_status = None
        self._challenge_name = None
        self._challenge_description = None
        self._tags = None
        self._edges = None
        self._resolution = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        if avatar_id is not None:
            self.avatar_id = avatar_id
        if challenge_id is not None:
            self.challenge_id = challenge_id
        if attempt_sequence_number is not None:
            self.attempt_sequence_number = attempt_sequence_number
        if generation_timestamp is not None:
            self.generation_timestamp = generation_timestamp
        if submission_timestamp is not None:
            self.submission_timestamp = submission_timestamp
        if image is not None:
            self.image = image
        if evaluation_status is not None:
            self.evaluation_status = evaluation_status
        if challenge_name is not None:
            self.challenge_name = challenge_name
        if challenge_description is not None:
            self.challenge_description = challenge_description
        if tags is not None:
            self.tags = tags
        if edges is not None:
            self.edges = edges
        if resolution is not None:
            self.resolution = resolution

    @property
    def task_id(self):
        """Gets the task_id of this Task.  # noqa: E501

        Alpha-numeric, unique id of user who has performed the task  # noqa: E501

        :return: The task_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Task.

        Alpha-numeric, unique id of user who has performed the task  # noqa: E501

        :param task_id: The task_id of this Task.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def avatar_id(self):
        """Gets the avatar_id of this Task.  # noqa: E501

        Alpha-numeric, unique id of user who has performed the task.  # noqa: E501

        :return: The avatar_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._avatar_id

    @avatar_id.setter
    def avatar_id(self, avatar_id):
        """Sets the avatar_id of this Task.

        Alpha-numeric, unique id of user who has performed the task.  # noqa: E501

        :param avatar_id: The avatar_id of this Task.  # noqa: E501
        :type: str
        """

        self._avatar_id = avatar_id

    @property
    def challenge_id(self):
        """Gets the challenge_id of this Task.  # noqa: E501

        Alpa-numeric, unique id of challenge.   # noqa: E501

        :return: The challenge_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this Task.

        Alpa-numeric, unique id of challenge.   # noqa: E501

        :param challenge_id: The challenge_id of this Task.  # noqa: E501
        :type: str
        """

        self._challenge_id = challenge_id

    @property
    def attempt_sequence_number(self):
        """Gets the attempt_sequence_number of this Task.  # noqa: E501

        Identifies the number of evaluation attempts performed on this specific media item.  # noqa: E501

        :return: The attempt_sequence_number of this Task.  # noqa: E501
        :rtype: int
        """
        return self._attempt_sequence_number

    @attempt_sequence_number.setter
    def attempt_sequence_number(self, attempt_sequence_number):
        """Sets the attempt_sequence_number of this Task.

        Identifies the number of evaluation attempts performed on this specific media item.  # noqa: E501

        :param attempt_sequence_number: The attempt_sequence_number of this Task.  # noqa: E501
        :type: int
        """

        self._attempt_sequence_number = attempt_sequence_number

    @property
    def generation_timestamp(self):
        """Gets the generation_timestamp of this Task.  # noqa: E501

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was requested by the user  # noqa: E501

        :return: The generation_timestamp of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._generation_timestamp

    @generation_timestamp.setter
    def generation_timestamp(self, generation_timestamp):
        """Sets the generation_timestamp of this Task.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was requested by the user  # noqa: E501

        :param generation_timestamp: The generation_timestamp of this Task.  # noqa: E501
        :type: datetime
        """

        self._generation_timestamp = generation_timestamp

    @property
    def submission_timestamp(self):
        """Gets the submission_timestamp of this Task.  # noqa: E501

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was submitted by the user  # noqa: E501

        :return: The submission_timestamp of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._submission_timestamp

    @submission_timestamp.setter
    def submission_timestamp(self, submission_timestamp):
        """Sets the submission_timestamp of this Task.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was submitted by the user  # noqa: E501

        :param submission_timestamp: The submission_timestamp of this Task.  # noqa: E501
        :type: datetime
        """

        self._submission_timestamp = submission_timestamp

    @property
    def image(self):
        """Gets the image of this Task.  # noqa: E501


        :return: The image of this Task.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Task.


        :param image: The image of this Task.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def evaluation_status(self):
        """Gets the evaluation_status of this Task.  # noqa: E501


        :return: The evaluation_status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_status

    @evaluation_status.setter
    def evaluation_status(self, evaluation_status):
        """Sets the evaluation_status of this Task.


        :param evaluation_status: The evaluation_status of this Task.  # noqa: E501
        :type: str
        """
        allowed_values = ["unallocated", "leased", "not-evaluated", "passed", "failed", "skipped", "timed-out", "permamnently-failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and evaluation_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `evaluation_status` ({0}), must be one of {1}"  # noqa: E501
                .format(evaluation_status, allowed_values)
            )

        self._evaluation_status = evaluation_status

    @property
    def challenge_name(self):
        """Gets the challenge_name of this Task.  # noqa: E501

        Name of Challenge  # noqa: E501

        :return: The challenge_name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._challenge_name

    @challenge_name.setter
    def challenge_name(self, challenge_name):
        """Sets the challenge_name of this Task.

        Name of Challenge  # noqa: E501

        :param challenge_name: The challenge_name of this Task.  # noqa: E501
        :type: str
        """

        self._challenge_name = challenge_name

    @property
    def challenge_description(self):
        """Gets the challenge_description of this Task.  # noqa: E501

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The challenge_description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._challenge_description

    @challenge_description.setter
    def challenge_description(self, challenge_description):
        """Sets the challenge_description of this Task.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param challenge_description: The challenge_description of this Task.  # noqa: E501
        :type: str
        """

        self._challenge_description = challenge_description

    @property
    def tags(self):
        """Gets the tags of this Task.  # noqa: E501


        :return: The tags of this Task.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Task.


        :param tags: The tags of this Task.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def edges(self):
        """Gets the edges of this Task.  # noqa: E501


        :return: The edges of this Task.  # noqa: E501
        :rtype: list[Edge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this Task.


        :param edges: The edges of this Task.  # noqa: E501
        :type: list[Edge]
        """

        self._edges = edges

    @property
    def resolution(self):
        """Gets the resolution of this Task.  # noqa: E501


        :return: The resolution of this Task.  # noqa: E501
        :rtype: TaskResolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Task.


        :param resolution: The resolution of this Task.  # noqa: E501
        :type: TaskResolution
        """

        self._resolution = resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
