# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Evaluation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'confidence': 'float',
        'subjective_opinion': 'SubjectiveOpinion'
    }

    attribute_map = {
        'confidence': 'confidence',
        'subjective_opinion': 'subjectiveOpinion'
    }

    def __init__(self, confidence=None, subjective_opinion=None, local_vars_configuration=None):  # noqa: E501
        """Evaluation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._confidence = None
        self._subjective_opinion = None
        self.discriminator = None

        if confidence is not None:
            self.confidence = confidence
        if subjective_opinion is not None:
            self.subjective_opinion = subjective_opinion

    @property
    def confidence(self):
        """Gets the confidence of this Evaluation.  # noqa: E501

        The confidence of the merged tag (from several tags), based on IoU (Intersection over Union) of the composing tags. The confidence is the reduce form of the SubjectiveOpinion, representing only its belief part.  # noqa: E501

        :return: The confidence of this Evaluation.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Evaluation.

        The confidence of the merged tag (from several tags), based on IoU (Intersection over Union) of the composing tags. The confidence is the reduce form of the SubjectiveOpinion, representing only its belief part.  # noqa: E501

        :param confidence: The confidence of this Evaluation.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def subjective_opinion(self):
        """Gets the subjective_opinion of this Evaluation.  # noqa: E501


        :return: The subjective_opinion of this Evaluation.  # noqa: E501
        :rtype: SubjectiveOpinion
        """
        return self._subjective_opinion

    @subjective_opinion.setter
    def subjective_opinion(self, subjective_opinion):
        """Sets the subjective_opinion of this Evaluation.


        :param subjective_opinion: The subjective_opinion of this Evaluation.  # noqa: E501
        :type: SubjectiveOpinion
        """

        self._subjective_opinion = subjective_opinion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Evaluation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Evaluation):
            return True

        return self.to_dict() != other.to_dict()
