# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ChallengeBudgetRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_id': 'str',
        'evaluation_policy_id': 'str',
        'dispatch_policy_id': 'str',
        'tag_type': 'ShapeTypeEnum',
        'estimated_tags_per_media_item': 'float'
    }

    attribute_map = {
        'dataset_id': 'datasetId',
        'evaluation_policy_id': 'evaluationPolicyId',
        'dispatch_policy_id': 'dispatchPolicyId',
        'tag_type': 'tagType',
        'estimated_tags_per_media_item': 'estimatedTagsPerMediaItem'
    }

    def __init__(self, dataset_id=None, evaluation_policy_id=None, dispatch_policy_id=None, tag_type=None, estimated_tags_per_media_item=None, local_vars_configuration=None):  # noqa: E501
        """ChallengeBudgetRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_id = None
        self._evaluation_policy_id = None
        self._dispatch_policy_id = None
        self._tag_type = None
        self._estimated_tags_per_media_item = None
        self.discriminator = None

        if dataset_id is not None:
            self.dataset_id = dataset_id
        if evaluation_policy_id is not None:
            self.evaluation_policy_id = evaluation_policy_id
        if dispatch_policy_id is not None:
            self.dispatch_policy_id = dispatch_policy_id
        if tag_type is not None:
            self.tag_type = tag_type
        if estimated_tags_per_media_item is not None:
            self.estimated_tags_per_media_item = estimated_tags_per_media_item

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ChallengeBudgetRequest.  # noqa: E501

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :return: The dataset_id of this ChallengeBudgetRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ChallengeBudgetRequest.

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :param dataset_id: The dataset_id of this ChallengeBudgetRequest.  # noqa: E501
        :type: str
        """

        self._dataset_id = dataset_id

    @property
    def evaluation_policy_id(self):
        """Gets the evaluation_policy_id of this ChallengeBudgetRequest.  # noqa: E501

        Alpha-numeric, unique id of evaluation policy  # noqa: E501

        :return: The evaluation_policy_id of this ChallengeBudgetRequest.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_policy_id

    @evaluation_policy_id.setter
    def evaluation_policy_id(self, evaluation_policy_id):
        """Sets the evaluation_policy_id of this ChallengeBudgetRequest.

        Alpha-numeric, unique id of evaluation policy  # noqa: E501

        :param evaluation_policy_id: The evaluation_policy_id of this ChallengeBudgetRequest.  # noqa: E501
        :type: str
        """

        self._evaluation_policy_id = evaluation_policy_id

    @property
    def dispatch_policy_id(self):
        """Gets the dispatch_policy_id of this ChallengeBudgetRequest.  # noqa: E501

        Alpha-numeric, unique id of dispatch policy  # noqa: E501

        :return: The dispatch_policy_id of this ChallengeBudgetRequest.  # noqa: E501
        :rtype: str
        """
        return self._dispatch_policy_id

    @dispatch_policy_id.setter
    def dispatch_policy_id(self, dispatch_policy_id):
        """Sets the dispatch_policy_id of this ChallengeBudgetRequest.

        Alpha-numeric, unique id of dispatch policy  # noqa: E501

        :param dispatch_policy_id: The dispatch_policy_id of this ChallengeBudgetRequest.  # noqa: E501
        :type: str
        """

        self._dispatch_policy_id = dispatch_policy_id

    @property
    def tag_type(self):
        """Gets the tag_type of this ChallengeBudgetRequest.  # noqa: E501


        :return: The tag_type of this ChallengeBudgetRequest.  # noqa: E501
        :rtype: ShapeTypeEnum
        """
        return self._tag_type

    @tag_type.setter
    def tag_type(self, tag_type):
        """Sets the tag_type of this ChallengeBudgetRequest.


        :param tag_type: The tag_type of this ChallengeBudgetRequest.  # noqa: E501
        :type: ShapeTypeEnum
        """

        self._tag_type = tag_type

    @property
    def estimated_tags_per_media_item(self):
        """Gets the estimated_tags_per_media_item of this ChallengeBudgetRequest.  # noqa: E501

        estimated Tags Per Media Item  # noqa: E501

        :return: The estimated_tags_per_media_item of this ChallengeBudgetRequest.  # noqa: E501
        :rtype: float
        """
        return self._estimated_tags_per_media_item

    @estimated_tags_per_media_item.setter
    def estimated_tags_per_media_item(self, estimated_tags_per_media_item):
        """Sets the estimated_tags_per_media_item of this ChallengeBudgetRequest.

        estimated Tags Per Media Item  # noqa: E501

        :param estimated_tags_per_media_item: The estimated_tags_per_media_item of this ChallengeBudgetRequest.  # noqa: E501
        :type: float
        """

        self._estimated_tags_per_media_item = estimated_tags_per_media_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChallengeBudgetRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChallengeBudgetRequest):
            return True

        return self.to_dict() != other.to_dict()
