# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Shape(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'shape_id': 'str',
        'shape_type': 'str'
    }

    attribute_map = {
        'shape_id': 'shapeId',
        'shape_type': 'shapeType'
    }

    discriminator_value_class_map = {
        'Shape2DRectangleTextBlock': 'Shape2DRectangleTextBlock',
        'Shape2DPolygon': 'Shape2DPolygon',
        'Shape2DPolygonTextBlock': 'Shape2DPolygonTextBlock',
        'Shape2DTimeboundPolygon': 'Shape2DTimeboundPolygon',
        'Shape2DRectangle': 'Shape2DRectangle'
    }

    def __init__(self, shape_id=None, shape_type=None, local_vars_configuration=None):  # noqa: E501
        """Shape - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._shape_id = None
        self._shape_type = None
        self.discriminator = 'shape_type'

        self.shape_id = shape_id
        self.shape_type = shape_type

    @property
    def shape_id(self):
        """Gets the shape_id of this Shape.  # noqa: E501

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :return: The shape_id of this Shape.  # noqa: E501
        :rtype: str
        """
        return self._shape_id

    @shape_id.setter
    def shape_id(self, shape_id):
        """Sets the shape_id of this Shape.

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :param shape_id: The shape_id of this Shape.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and shape_id is None:  # noqa: E501
            raise ValueError("Invalid value for `shape_id`, must not be `None`")  # noqa: E501

        self._shape_id = shape_id

    @property
    def shape_type(self):
        """Gets the shape_type of this Shape.  # noqa: E501

        descriminator  # noqa: E501

        :return: The shape_type of this Shape.  # noqa: E501
        :rtype: str
        """
        return self._shape_type

    @shape_type.setter
    def shape_type(self, shape_type):
        """Sets the shape_type of this Shape.

        descriminator  # noqa: E501

        :param shape_type: The shape_type of this Shape.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and shape_type is None:  # noqa: E501
            raise ValueError("Invalid value for `shape_type`, must not be `None`")  # noqa: E501

        self._shape_type = shape_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shape):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Shape):
            return True

        return self.to_dict() != other.to_dict()
