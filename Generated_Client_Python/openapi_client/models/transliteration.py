# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Transliteration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language_code': 'str',
        'compressed_character_sequence': 'str',
        'encoding': 'str',
        'charset': 'str',
        'direction': 'str',
        'collation_language': 'str',
        'character_sequence': 'list[ObservableSymbol]'
    }

    attribute_map = {
        'language_code': 'languageCode',
        'compressed_character_sequence': 'compressedCharacterSequence',
        'encoding': 'encoding',
        'charset': 'charset',
        'direction': 'direction',
        'collation_language': 'collation-language',
        'character_sequence': 'characterSequence'
    }

    def __init__(self, language_code=None, compressed_character_sequence=None, encoding=None, charset=None, direction=None, collation_language=None, character_sequence=None, local_vars_configuration=None):  # noqa: E501
        """Transliteration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language_code = None
        self._compressed_character_sequence = None
        self._encoding = None
        self._charset = None
        self._direction = None
        self._collation_language = None
        self._character_sequence = None
        self.discriminator = None

        if language_code is not None:
            self.language_code = language_code
        if compressed_character_sequence is not None:
            self.compressed_character_sequence = compressed_character_sequence
        if encoding is not None:
            self.encoding = encoding
        if charset is not None:
            self.charset = charset
        if direction is not None:
            self.direction = direction
        if collation_language is not None:
            self.collation_language = collation_language
        if character_sequence is not None:
            self.character_sequence = character_sequence

    @property
    def language_code(self):
        """Gets the language_code of this Transliteration.  # noqa: E501

        The BCP-47 language code  # noqa: E501

        :return: The language_code of this Transliteration.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Transliteration.

        The BCP-47 language code  # noqa: E501

        :param language_code: The language_code of this Transliteration.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def compressed_character_sequence(self):
        """Gets the compressed_character_sequence of this Transliteration.  # noqa: E501

        compressed version of character sequence  # noqa: E501

        :return: The compressed_character_sequence of this Transliteration.  # noqa: E501
        :rtype: str
        """
        return self._compressed_character_sequence

    @compressed_character_sequence.setter
    def compressed_character_sequence(self, compressed_character_sequence):
        """Sets the compressed_character_sequence of this Transliteration.

        compressed version of character sequence  # noqa: E501

        :param compressed_character_sequence: The compressed_character_sequence of this Transliteration.  # noqa: E501
        :type: str
        """

        self._compressed_character_sequence = compressed_character_sequence

    @property
    def encoding(self):
        """Gets the encoding of this Transliteration.  # noqa: E501

        Character encoding type  # noqa: E501

        :return: The encoding of this Transliteration.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this Transliteration.

        Character encoding type  # noqa: E501

        :param encoding: The encoding of this Transliteration.  # noqa: E501
        :type: str
        """
        allowed_values = ["ISO-646-ASCII", "UTF-8"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and encoding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def charset(self):
        """Gets the charset of this Transliteration.  # noqa: E501

        The set of characters allowed , alphabet  # noqa: E501

        :return: The charset of this Transliteration.  # noqa: E501
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this Transliteration.

        The set of characters allowed , alphabet  # noqa: E501

        :param charset: The charset of this Transliteration.  # noqa: E501
        :type: str
        """
        allowed_values = ["latin1", "latin2", "cp1251", "greek", "hebrew"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and charset not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `charset` ({0}), must be one of {1}"  # noqa: E501
                .format(charset, allowed_values)
            )

        self._charset = charset

    @property
    def direction(self):
        """Gets the direction of this Transliteration.  # noqa: E501

        reading direction  # noqa: E501

        :return: The direction of this Transliteration.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Transliteration.

        reading direction  # noqa: E501

        :param direction: The direction of this Transliteration.  # noqa: E501
        :type: str
        """
        allowed_values = ["left-to-right", "right-to-left", "top-to-bottom", "bottom-to-top"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and direction not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def collation_language(self):
        """Gets the collation_language of this Transliteration.  # noqa: E501

        collation use for comparing and sorting the characters, as per Unicode Sorting Algorithm  # noqa: E501

        :return: The collation_language of this Transliteration.  # noqa: E501
        :rtype: str
        """
        return self._collation_language

    @collation_language.setter
    def collation_language(self, collation_language):
        """Sets the collation_language of this Transliteration.

        collation use for comparing and sorting the characters, as per Unicode Sorting Algorithm  # noqa: E501

        :param collation_language: The collation_language of this Transliteration.  # noqa: E501
        :type: str
        """
        allowed_values = ["utf8_romanian_ci", "latin2_general_ci", "cp1250_general_ci", "greek_general_ci", "hebrew_general_ci"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and collation_language not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `collation_language` ({0}), must be one of {1}"  # noqa: E501
                .format(collation_language, allowed_values)
            )

        self._collation_language = collation_language

    @property
    def character_sequence(self):
        """Gets the character_sequence of this Transliteration.  # noqa: E501

        The order of the characters, according to the direction of the transliteration  # noqa: E501

        :return: The character_sequence of this Transliteration.  # noqa: E501
        :rtype: list[ObservableSymbol]
        """
        return self._character_sequence

    @character_sequence.setter
    def character_sequence(self, character_sequence):
        """Sets the character_sequence of this Transliteration.

        The order of the characters, according to the direction of the transliteration  # noqa: E501

        :param character_sequence: The character_sequence of this Transliteration.  # noqa: E501
        :type: list[ObservableSymbol]
        """

        self._character_sequence = character_sequence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transliteration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transliteration):
            return True

        return self.to_dict() != other.to_dict()
