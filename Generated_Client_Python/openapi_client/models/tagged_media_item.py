# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TaggedMediaItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tagged_media_item_id': 'str',
        'media_item_id': 'str',
        'challenge_id': 'str',
        'composing_tasks': 'list[str]',
        'merged_tags': 'list[MergedTag]',
        'image': 'Image',
        'merged_edges': 'list[Edge]'
    }

    attribute_map = {
        'tagged_media_item_id': 'taggedMediaItemId',
        'media_item_id': 'mediaItemId',
        'challenge_id': 'challengeId',
        'composing_tasks': 'composingTasks',
        'merged_tags': 'mergedTags',
        'image': 'image',
        'merged_edges': 'mergedEdges'
    }

    def __init__(self, tagged_media_item_id=None, media_item_id=None, challenge_id=None, composing_tasks=None, merged_tags=None, image=None, merged_edges=None, local_vars_configuration=None):  # noqa: E501
        """TaggedMediaItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tagged_media_item_id = None
        self._media_item_id = None
        self._challenge_id = None
        self._composing_tasks = None
        self._merged_tags = None
        self._image = None
        self._merged_edges = None
        self.discriminator = None

        if tagged_media_item_id is not None:
            self.tagged_media_item_id = tagged_media_item_id
        if media_item_id is not None:
            self.media_item_id = media_item_id
        if challenge_id is not None:
            self.challenge_id = challenge_id
        if composing_tasks is not None:
            self.composing_tasks = composing_tasks
        if merged_tags is not None:
            self.merged_tags = merged_tags
        if image is not None:
            self.image = image
        if merged_edges is not None:
            self.merged_edges = merged_edges

    @property
    def tagged_media_item_id(self):
        """Gets the tagged_media_item_id of this TaggedMediaItem.  # noqa: E501

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The tagged_media_item_id of this TaggedMediaItem.  # noqa: E501
        :rtype: str
        """
        return self._tagged_media_item_id

    @tagged_media_item_id.setter
    def tagged_media_item_id(self, tagged_media_item_id):
        """Sets the tagged_media_item_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param tagged_media_item_id: The tagged_media_item_id of this TaggedMediaItem.  # noqa: E501
        :type: str
        """

        self._tagged_media_item_id = tagged_media_item_id

    @property
    def media_item_id(self):
        """Gets the media_item_id of this TaggedMediaItem.  # noqa: E501

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The media_item_id of this TaggedMediaItem.  # noqa: E501
        :rtype: str
        """
        return self._media_item_id

    @media_item_id.setter
    def media_item_id(self, media_item_id):
        """Sets the media_item_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param media_item_id: The media_item_id of this TaggedMediaItem.  # noqa: E501
        :type: str
        """

        self._media_item_id = media_item_id

    @property
    def challenge_id(self):
        """Gets the challenge_id of this TaggedMediaItem.  # noqa: E501

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The challenge_id of this TaggedMediaItem.  # noqa: E501
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param challenge_id: The challenge_id of this TaggedMediaItem.  # noqa: E501
        :type: str
        """

        self._challenge_id = challenge_id

    @property
    def composing_tasks(self):
        """Gets the composing_tasks of this TaggedMediaItem.  # noqa: E501

        What are the tasks contributed in the determination of these tags?  # noqa: E501

        :return: The composing_tasks of this TaggedMediaItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._composing_tasks

    @composing_tasks.setter
    def composing_tasks(self, composing_tasks):
        """Sets the composing_tasks of this TaggedMediaItem.

        What are the tasks contributed in the determination of these tags?  # noqa: E501

        :param composing_tasks: The composing_tasks of this TaggedMediaItem.  # noqa: E501
        :type: list[str]
        """

        self._composing_tasks = composing_tasks

    @property
    def merged_tags(self):
        """Gets the merged_tags of this TaggedMediaItem.  # noqa: E501


        :return: The merged_tags of this TaggedMediaItem.  # noqa: E501
        :rtype: list[MergedTag]
        """
        return self._merged_tags

    @merged_tags.setter
    def merged_tags(self, merged_tags):
        """Sets the merged_tags of this TaggedMediaItem.


        :param merged_tags: The merged_tags of this TaggedMediaItem.  # noqa: E501
        :type: list[MergedTag]
        """

        self._merged_tags = merged_tags

    @property
    def image(self):
        """Gets the image of this TaggedMediaItem.  # noqa: E501


        :return: The image of this TaggedMediaItem.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this TaggedMediaItem.


        :param image: The image of this TaggedMediaItem.  # noqa: E501
        :type: Image
        """

        self._image = image

    @property
    def merged_edges(self):
        """Gets the merged_edges of this TaggedMediaItem.  # noqa: E501


        :return: The merged_edges of this TaggedMediaItem.  # noqa: E501
        :rtype: list[Edge]
        """
        return self._merged_edges

    @merged_edges.setter
    def merged_edges(self, merged_edges):
        """Sets the merged_edges of this TaggedMediaItem.


        :param merged_edges: The merged_edges of this TaggedMediaItem.  # noqa: E501
        :type: list[Edge]
        """

        self._merged_edges = merged_edges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaggedMediaItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaggedMediaItem):
            return True

        return self.to_dict() != other.to_dict()
