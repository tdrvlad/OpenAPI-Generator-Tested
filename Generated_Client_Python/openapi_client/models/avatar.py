# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Avatar(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avatar_id': 'str',
        'life_form': 'LifeFormEnum',
        'assigned_challenges': 'list[Challenge]'
    }

    attribute_map = {
        'avatar_id': 'avatarId',
        'life_form': 'lifeForm',
        'assigned_challenges': 'assignedChallenges'
    }

    def __init__(self, avatar_id=None, life_form=None, assigned_challenges=None, local_vars_configuration=None):  # noqa: E501
        """Avatar - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._avatar_id = None
        self._life_form = None
        self._assigned_challenges = None
        self.discriminator = None

        if avatar_id is not None:
            self.avatar_id = avatar_id
        if life_form is not None:
            self.life_form = life_form
        if assigned_challenges is not None:
            self.assigned_challenges = assigned_challenges

    @property
    def avatar_id(self):
        """Gets the avatar_id of this Avatar.  # noqa: E501

        [TBD] Alpha-numeric, unique id of avatar  # noqa: E501

        :return: The avatar_id of this Avatar.  # noqa: E501
        :rtype: str
        """
        return self._avatar_id

    @avatar_id.setter
    def avatar_id(self, avatar_id):
        """Sets the avatar_id of this Avatar.

        [TBD] Alpha-numeric, unique id of avatar  # noqa: E501

        :param avatar_id: The avatar_id of this Avatar.  # noqa: E501
        :type: str
        """

        self._avatar_id = avatar_id

    @property
    def life_form(self):
        """Gets the life_form of this Avatar.  # noqa: E501


        :return: The life_form of this Avatar.  # noqa: E501
        :rtype: LifeFormEnum
        """
        return self._life_form

    @life_form.setter
    def life_form(self, life_form):
        """Sets the life_form of this Avatar.


        :param life_form: The life_form of this Avatar.  # noqa: E501
        :type: LifeFormEnum
        """

        self._life_form = life_form

    @property
    def assigned_challenges(self):
        """Gets the assigned_challenges of this Avatar.  # noqa: E501

        assignedChallenges  # noqa: E501

        :return: The assigned_challenges of this Avatar.  # noqa: E501
        :rtype: list[Challenge]
        """
        return self._assigned_challenges

    @assigned_challenges.setter
    def assigned_challenges(self, assigned_challenges):
        """Sets the assigned_challenges of this Avatar.

        assignedChallenges  # noqa: E501

        :param assigned_challenges: The assigned_challenges of this Avatar.  # noqa: E501
        :type: list[Challenge]
        """

        self._assigned_challenges = assigned_challenges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Avatar):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Avatar):
            return True

        return self.to_dict() != other.to_dict()
