# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ChallengeDatasetMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'media_items': 'int',
        'number_of_shards': 'int'
    }

    attribute_map = {
        'name': 'name',
        'media_items': 'mediaItems',
        'number_of_shards': 'numberOfShards'
    }

    def __init__(self, name=None, media_items=None, number_of_shards=None, local_vars_configuration=None):  # noqa: E501
        """ChallengeDatasetMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._media_items = None
        self._number_of_shards = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if media_items is not None:
            self.media_items = media_items
        if number_of_shards is not None:
            self.number_of_shards = number_of_shards

    @property
    def name(self):
        """Gets the name of this ChallengeDatasetMetadata.  # noqa: E501

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The name of this ChallengeDatasetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChallengeDatasetMetadata.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param name: The name of this ChallengeDatasetMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def media_items(self):
        """Gets the media_items of this ChallengeDatasetMetadata.  # noqa: E501

        estimated Tags Per Media Item  # noqa: E501

        :return: The media_items of this ChallengeDatasetMetadata.  # noqa: E501
        :rtype: int
        """
        return self._media_items

    @media_items.setter
    def media_items(self, media_items):
        """Sets the media_items of this ChallengeDatasetMetadata.

        estimated Tags Per Media Item  # noqa: E501

        :param media_items: The media_items of this ChallengeDatasetMetadata.  # noqa: E501
        :type: int
        """

        self._media_items = media_items

    @property
    def number_of_shards(self):
        """Gets the number_of_shards of this ChallengeDatasetMetadata.  # noqa: E501

        shards in dataset  # noqa: E501

        :return: The number_of_shards of this ChallengeDatasetMetadata.  # noqa: E501
        :rtype: int
        """
        return self._number_of_shards

    @number_of_shards.setter
    def number_of_shards(self, number_of_shards):
        """Sets the number_of_shards of this ChallengeDatasetMetadata.

        shards in dataset  # noqa: E501

        :param number_of_shards: The number_of_shards of this ChallengeDatasetMetadata.  # noqa: E501
        :type: int
        """

        self._number_of_shards = number_of_shards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChallengeDatasetMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChallengeDatasetMetadata):
            return True

        return self.to_dict() != other.to_dict()
