# coding: utf-8

"""
    DeepVISS TAG

    DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Contact: office@deepviss.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ChallengeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def archive_shard(self, challenge_id, shard, **kwargs):  # noqa: E501
        """Archive shard from challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_shard(challenge_id, shard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the challenge (required)
        :param int shard: The identifier of the shard (required)
        :param bool force:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ArchivedShard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.archive_shard_with_http_info(challenge_id, shard, **kwargs)  # noqa: E501

    def archive_shard_with_http_info(self, challenge_id, shard, **kwargs):  # noqa: E501
        """Archive shard from challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_shard_with_http_info(challenge_id, shard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the challenge (required)
        :param int shard: The identifier of the shard (required)
        :param bool force:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ArchivedShard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'shard',
            'force'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archive_shard" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `archive_shard`")  # noqa: E501
        # verify the required parameter 'shard' is set
        if self.api_client.client_side_validation and ('shard' not in local_var_params or  # noqa: E501
                                                        local_var_params['shard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `shard` when calling `archive_shard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501
        if 'shard' in local_var_params:
            path_params['shard'] = local_var_params['shard']  # noqa: E501

        query_params = []
        if 'force' in local_var_params and local_var_params['force'] is not None:  # noqa: E501
            query_params.append(('force', local_var_params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/archive/{shard}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArchivedShard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def archived_shard_list(self, challenge_id, **kwargs):  # noqa: E501
        """Get archive list from challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archived_shard_list(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the challenge (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ArchivedShard]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.archived_shard_list_with_http_info(challenge_id, **kwargs)  # noqa: E501

    def archived_shard_list_with_http_info(self, challenge_id, **kwargs):  # noqa: E501
        """Get archive list from challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archived_shard_list_with_http_info(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the challenge (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ArchivedShard], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method archived_shard_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `archived_shard_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/archive/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ArchivedShard]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_challenge(self, assign_users_request, **kwargs):  # noqa: E501
        """Assign a private challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_challenge(assign_users_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AssignUsersRequest assign_users_request: The users to be assigned to a challenge (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.assign_challenge_with_http_info(assign_users_request, **kwargs)  # noqa: E501

    def assign_challenge_with_http_info(self, assign_users_request, **kwargs):  # noqa: E501
        """Assign a private challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_challenge_with_http_info(assign_users_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param AssignUsersRequest assign_users_request: The users to be assigned to a challenge (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'assign_users_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'assign_users_request' is set
        if self.api_client.client_side_validation and ('assign_users_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['assign_users_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `assign_users_request` when calling `assign_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assign_users_request' in local_var_params:
            body_params = local_var_params['assign_users_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_tenant_to_challenge(self, challenge_id, tenant_id, **kwargs):  # noqa: E501
        """Star a public challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_tenant_to_challenge(challenge_id, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: (required)
        :param str tenant_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.assign_tenant_to_challenge_with_http_info(challenge_id, tenant_id, **kwargs)  # noqa: E501

    def assign_tenant_to_challenge_with_http_info(self, challenge_id, tenant_id, **kwargs):  # noqa: E501
        """Star a public challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_tenant_to_challenge_with_http_info(challenge_id, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: (required)
        :param str tenant_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'tenant_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_tenant_to_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `assign_tenant_to_challenge`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if self.api_client.client_side_validation and ('tenant_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['tenant_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tenant_id` when calling `assign_tenant_to_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501
        if 'tenant_id' in local_var_params:
            path_params['tenantId'] = local_var_params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/assign-tenant/{tenantId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_challenge(self, challenge, **kwargs):  # noqa: E501
        """Create a new challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_challenge(challenge, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Challenge challenge: The challenge object to be created (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Challenge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_challenge_with_http_info(challenge, **kwargs)  # noqa: E501

    def create_challenge_with_http_info(self, challenge, **kwargs):  # noqa: E501
        """Create a new challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_challenge_with_http_info(challenge, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Challenge challenge: The challenge object to be created (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Challenge, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge' is set
        if self.api_client.client_side_validation and ('challenge' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge` when calling `create_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'challenge' in local_var_params:
            body_params = local_var_params['challenge']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Challenge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_challenge(self, challenge_id, shard, **kwargs):  # noqa: E501
        """Download tagged items from challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_challenge(challenge_id, shard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the challenge (required)
        :param int shard: The identifier of the shard (required)
        :param str x_auth_credential:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.download_challenge_with_http_info(challenge_id, shard, **kwargs)  # noqa: E501

    def download_challenge_with_http_info(self, challenge_id, shard, **kwargs):  # noqa: E501
        """Download tagged items from challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_challenge_with_http_info(challenge_id, shard, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the challenge (required)
        :param int shard: The identifier of the shard (required)
        :param str x_auth_credential:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'shard',
            'x_auth_credential'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `download_challenge`")  # noqa: E501
        # verify the required parameter 'shard' is set
        if self.api_client.client_side_validation and ('shard' not in local_var_params or  # noqa: E501
                                                        local_var_params['shard'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `shard` when calling `download_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501
        if 'shard' in local_var_params:
            path_params['shard'] = local_var_params['shard']  # noqa: E501

        query_params = []
        if 'x_auth_credential' in local_var_params and local_var_params['x_auth_credential'] is not None:  # noqa: E501
            query_params.append(('X-Auth-Credential', local_var_params['x_auth_credential']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/download/{shard}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def force_merge_tagged_media_item(self, challenge_id, **kwargs):  # noqa: E501
        """force merge  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.force_merge_tagged_media_item(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the dataset (required)
        :param str challenge_name: The identifier of the tagged media item
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Challenge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.force_merge_tagged_media_item_with_http_info(challenge_id, **kwargs)  # noqa: E501

    def force_merge_tagged_media_item_with_http_info(self, challenge_id, **kwargs):  # noqa: E501
        """force merge  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.force_merge_tagged_media_item_with_http_info(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the dataset (required)
        :param str challenge_name: The identifier of the tagged media item
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Challenge, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'challenge_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method force_merge_tagged_media_item" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `force_merge_tagged_media_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501

        query_params = []
        if 'challenge_name' in local_var_params and local_var_params['challenge_name'] is not None:  # noqa: E501
            query_params.append(('challengeName', local_var_params['challenge_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/force-merge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Challenge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_challenge(self, challenge_id, **kwargs):  # noqa: E501
        """Retrieve list of challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the dataset (required)
        :param str access_token:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Challenge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_challenge_with_http_info(challenge_id, **kwargs)  # noqa: E501

    def get_challenge_with_http_info(self, challenge_id, **kwargs):  # noqa: E501
        """Retrieve list of challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_with_http_info(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the dataset (required)
        :param str access_token:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Challenge, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'access_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `get_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501

        query_params = []
        if 'access_token' in local_var_params and local_var_params['access_token'] is not None:  # noqa: E501
            query_params.append(('accessToken', local_var_params['access_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Challenge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_challenge_cost(self, challenge_budget_request, **kwargs):  # noqa: E501
        """get estimated cost for challenge  # noqa: E501

        estimage challenge budget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_cost(challenge_budget_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ChallengeBudgetRequest challenge_budget_request: The challenge options (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ChallengeBudgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_challenge_cost_with_http_info(challenge_budget_request, **kwargs)  # noqa: E501

    def get_challenge_cost_with_http_info(self, challenge_budget_request, **kwargs):  # noqa: E501
        """get estimated cost for challenge  # noqa: E501

        estimage challenge budget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_cost_with_http_info(challenge_budget_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ChallengeBudgetRequest challenge_budget_request: The challenge options (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ChallengeBudgetResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_budget_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_challenge_cost" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_budget_request' is set
        if self.api_client.client_side_validation and ('challenge_budget_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_budget_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_budget_request` when calling `get_challenge_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'challenge_budget_request' in local_var_params:
            body_params = local_var_params['challenge_budget_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/cost', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChallengeBudgetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_challenge_list_broker(self, **kwargs):  # noqa: E501
        """Retrieve list of challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_list_broker(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_name:
        :param str access_type:
        :param bool liked:
        :param int page_size:
        :param int page_number:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Challenge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_challenge_list_broker_with_http_info(**kwargs)  # noqa: E501

    def get_challenge_list_broker_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve list of challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_list_broker_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_name:
        :param str access_type:
        :param bool liked:
        :param int page_size:
        :param int page_number:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Challenge], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_name',
            'access_type',
            'liked',
            'page_size',
            'page_number'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_challenge_list_broker" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'challenge_name' in local_var_params and local_var_params['challenge_name'] is not None:  # noqa: E501
            query_params.append(('challengeName', local_var_params['challenge_name']))  # noqa: E501
        if 'access_type' in local_var_params and local_var_params['access_type'] is not None:  # noqa: E501
            query_params.append(('accessType', local_var_params['access_type']))  # noqa: E501
        if 'liked' in local_var_params and local_var_params['liked'] is not None:  # noqa: E501
            query_params.append(('liked', local_var_params['liked']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_number' in local_var_params and local_var_params['page_number'] is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/broker/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Challenge]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_challenge_list_collaborator(self, **kwargs):  # noqa: E501
        """Retrieve list of challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_list_collaborator(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_name:
        :param str access_type:
        :param bool liked:
        :param int page_size:
        :param int page_number:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Challenge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_challenge_list_collaborator_with_http_info(**kwargs)  # noqa: E501

    def get_challenge_list_collaborator_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve list of challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_list_collaborator_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_name:
        :param str access_type:
        :param bool liked:
        :param int page_size:
        :param int page_number:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Challenge], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_name',
            'access_type',
            'liked',
            'page_size',
            'page_number'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_challenge_list_collaborator" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'challenge_name' in local_var_params and local_var_params['challenge_name'] is not None:  # noqa: E501
            query_params.append(('challengeName', local_var_params['challenge_name']))  # noqa: E501
        if 'access_type' in local_var_params and local_var_params['access_type'] is not None:  # noqa: E501
            query_params.append(('accessType', local_var_params['access_type']))  # noqa: E501
        if 'liked' in local_var_params and local_var_params['liked'] is not None:  # noqa: E501
            query_params.append(('liked', local_var_params['liked']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_number' in local_var_params and local_var_params['page_number'] is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/collaborator/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Challenge]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_challenge_list_supervisor(self, **kwargs):  # noqa: E501
        """Retrieve list of challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_list_supervisor(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_name:
        :param str access_type:
        :param bool liked:
        :param int page_size:
        :param int page_number:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Challenge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_challenge_list_supervisor_with_http_info(**kwargs)  # noqa: E501

    def get_challenge_list_supervisor_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve list of challenges  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_challenge_list_supervisor_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_name:
        :param str access_type:
        :param bool liked:
        :param int page_size:
        :param int page_number:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Challenge], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_name',
            'access_type',
            'liked',
            'page_size',
            'page_number'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_challenge_list_supervisor" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'challenge_name' in local_var_params and local_var_params['challenge_name'] is not None:  # noqa: E501
            query_params.append(('challengeName', local_var_params['challenge_name']))  # noqa: E501
        if 'access_type' in local_var_params and local_var_params['access_type'] is not None:  # noqa: E501
            query_params.append(('accessType', local_var_params['access_type']))  # noqa: E501
        if 'liked' in local_var_params and local_var_params['liked'] is not None:  # noqa: E501
            query_params.append(('liked', local_var_params['liked']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_number' in local_var_params and local_var_params['page_number'] is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/supervisor/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Challenge]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tagged_items(self, challenge_id, **kwargs):  # noqa: E501
        """Retrieve list tagged media items  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tagged_items(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the dataset (required)
        :param int page_size:
        :param int page_number:
        :param int stage:
        :param str access_token:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TaggedMediaItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tagged_items_with_http_info(challenge_id, **kwargs)  # noqa: E501

    def get_tagged_items_with_http_info(self, challenge_id, **kwargs):  # noqa: E501
        """Retrieve list tagged media items  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tagged_items_with_http_info(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the dataset (required)
        :param int page_size:
        :param int page_number:
        :param int stage:
        :param str access_token:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TaggedMediaItem], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'page_size',
            'page_number',
            'stage',
            'access_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tagged_items" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `get_tagged_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501

        query_params = []
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_number' in local_var_params and local_var_params['page_number'] is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if 'stage' in local_var_params and local_var_params['stage'] is not None:  # noqa: E501
            query_params.append(('stage', local_var_params['stage']))  # noqa: E501
        if 'access_token' in local_var_params and local_var_params['access_token'] is not None:  # noqa: E501
            query_params.append(('accessToken', local_var_params['access_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/tagged-item/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TaggedMediaItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_challenge(self, challenge_id, patch_challenge, **kwargs):  # noqa: E501
        """Update challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_challenge(challenge_id, patch_challenge, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the dataset (required)
        :param PatchChallenge patch_challenge: The new challenge object (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Challenge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_challenge_with_http_info(challenge_id, patch_challenge, **kwargs)  # noqa: E501

    def patch_challenge_with_http_info(self, challenge_id, patch_challenge, **kwargs):  # noqa: E501
        """Update challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_challenge_with_http_info(challenge_id, patch_challenge, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: The identifier of the dataset (required)
        :param PatchChallenge patch_challenge: The new challenge object (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Challenge, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'patch_challenge'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `patch_challenge`")  # noqa: E501
        # verify the required parameter 'patch_challenge' is set
        if self.api_client.client_side_validation and ('patch_challenge' not in local_var_params or  # noqa: E501
                                                        local_var_params['patch_challenge'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `patch_challenge` when calling `patch_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patch_challenge' in local_var_params:
            body_params = local_var_params['patch_challenge']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Challenge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reject_challenge(self, challenge_id, body, **kwargs):  # noqa: E501
        """Star a public challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reject_challenge(challenge_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: (required)
        :param str body: The challenge object to be created (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.reject_challenge_with_http_info(challenge_id, body, **kwargs)  # noqa: E501

    def reject_challenge_with_http_info(self, challenge_id, body, **kwargs):  # noqa: E501
        """Star a public challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reject_challenge_with_http_info(challenge_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: (required)
        :param str body: The challenge object to be created (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reject_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `reject_challenge`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `reject_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def star_challenge(self, challenge_id, **kwargs):  # noqa: E501
        """Star a public challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.star_challenge(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.star_challenge_with_http_info(challenge_id, **kwargs)  # noqa: E501

    def star_challenge_with_http_info(self, challenge_id, **kwargs):  # noqa: E501
        """Star a public challenge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.star_challenge_with_http_info(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method star_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `star_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/star', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statistics_challenge(self, challenge_id, **kwargs):  # noqa: E501
        """Get challenge statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistics_challenge(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ChallengeStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.statistics_challenge_with_http_info(challenge_id, **kwargs)  # noqa: E501

    def statistics_challenge_with_http_info(self, challenge_id, **kwargs):  # noqa: E501
        """Get challenge statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistics_challenge_with_http_info(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ChallengeStatistics, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_challenge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `statistics_challenge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'challenge_id' in local_var_params:
            path_params['challengeId'] = local_var_params['challenge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/challenge/{challengeId}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChallengeStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
