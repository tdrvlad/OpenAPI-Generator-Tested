/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PermanentIdentifierSegment,
    PermanentIdentifierSegmentFromJSON,
    PermanentIdentifierSegmentFromJSONTyped,
    PermanentIdentifierSegmentToJSON,
} from './';

/**
 * The object with describes the composite identifier
 * @export
 * @interface PermanentIdentifier
 */
export interface PermanentIdentifier {
    /**
     * The hashcode obtained by running a SHA-512 on the binary values of the segments, in the ascending order of indexes
     * @type {string}
     * @memberof PermanentIdentifier
     */
    hashCode?: string;
    /**
     * The segments (sub-keys) that compose the permanent identifier.
     * @type {Array<PermanentIdentifierSegment>}
     * @memberof PermanentIdentifier
     */
    segments?: Array<PermanentIdentifierSegment>;
}

export function PermanentIdentifierFromJSON(json: any): PermanentIdentifier {
    return PermanentIdentifierFromJSONTyped(json, false);
}

export function PermanentIdentifierFromJSONTyped(json: any, ignoreDiscriminator: boolean): PermanentIdentifier {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hashCode': !exists(json, 'hashCode') ? undefined : json['hashCode'],
        'segments': !exists(json, 'segments') ? undefined : ((json['segments'] as Array<any>).map(PermanentIdentifierSegmentFromJSON)),
    };
}

export function PermanentIdentifierToJSON(value?: PermanentIdentifier | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hashCode': value.hashCode,
        'segments': value.segments === undefined ? undefined : ((value.segments as Array<any>).map(PermanentIdentifierSegmentToJSON)),
    };
}


