/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    InternalSubjectiveOpinion,
    InternalSubjectiveOpinionFromJSON,
    InternalSubjectiveOpinionFromJSONTyped,
    InternalSubjectiveOpinionToJSON,
    Shape,
    ShapeFromJSON,
    ShapeFromJSONTyped,
    ShapeToJSON,
} from './';

/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * Alpha-numeric, unique id of tagged object
     * @type {string}
     * @memberof Tag
     */
    tagId?: string;
    /**
     * Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)
     * @type {Date}
     * @memberof Tag
     */
    submissionTimestamp?: Date;
    /**
     * What does the object that has been detected represent. Can be extended to discrete histogram of types.
     * @type {string}
     * @memberof Tag
     */
    nodeType?: string;
    /**
     * What are the shapes that compose the tag?
     * @type {Array<Shape>}
     * @memberof Tag
     */
    geometry?: Array<Shape>;
    /**
     * Alpha-numeric, unique id of task object
     * @type {string}
     * @memberof Tag
     */
    taskId?: string;
    /**
     * 
     * @type {InternalSubjectiveOpinion}
     * @memberof Tag
     */
    internalSubjectiveOpinion?: InternalSubjectiveOpinion;
}

export function TagFromJSON(json: any): Tag {
    return TagFromJSONTyped(json, false);
}

export function TagFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tag {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tagId': !exists(json, 'tagId') ? undefined : json['tagId'],
        'submissionTimestamp': !exists(json, 'submissionTimestamp') ? undefined : (new Date(json['submissionTimestamp'])),
        'nodeType': !exists(json, 'nodeType') ? undefined : json['nodeType'],
        'geometry': !exists(json, 'geometry') ? undefined : ((json['geometry'] as Array<any>).map(ShapeFromJSON)),
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'internalSubjectiveOpinion': !exists(json, 'internalSubjectiveOpinion') ? undefined : InternalSubjectiveOpinionFromJSON(json['internalSubjectiveOpinion']),
    };
}

export function TagToJSON(value?: Tag | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tagId': value.tagId,
        'submissionTimestamp': value.submissionTimestamp === undefined ? undefined : (value.submissionTimestamp.toISOString()),
        'nodeType': value.nodeType,
        'geometry': value.geometry === undefined ? undefined : ((value.geometry as Array<any>).map(ShapeToJSON)),
        'taskId': value.taskId,
        'internalSubjectiveOpinion': InternalSubjectiveOpinionToJSON(value.internalSubjectiveOpinion),
    };
}


