/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChallengeAccessTypeEnum,
    ChallengeAccessTypeEnumFromJSON,
    ChallengeAccessTypeEnumFromJSONTyped,
    ChallengeAccessTypeEnumToJSON,
    ChallengeCompletionPercentage,
    ChallengeCompletionPercentageFromJSON,
    ChallengeCompletionPercentageFromJSONTyped,
    ChallengeCompletionPercentageToJSON,
    ChallengeDatasetMetadata,
    ChallengeDatasetMetadataFromJSON,
    ChallengeDatasetMetadataFromJSONTyped,
    ChallengeDatasetMetadataToJSON,
    ChallengeStatusEnum,
    ChallengeStatusEnumFromJSON,
    ChallengeStatusEnumFromJSONTyped,
    ChallengeStatusEnumToJSON,
    ChallengeTenantRoleEnum,
    ChallengeTenantRoleEnumFromJSON,
    ChallengeTenantRoleEnumFromJSONTyped,
    ChallengeTenantRoleEnumToJSON,
    ShapeTypeEnum,
    ShapeTypeEnumFromJSON,
    ShapeTypeEnumFromJSONTyped,
    ShapeTypeEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface Challenge
 */
export interface Challenge {
    /**
     * Alpha-numeric, unique id of challenge. 
     * @type {string}
     * @memberof Challenge
     */
    challengeId?: string;
    /**
     * Alpha-numeric, unique id of dataset
     * @type {string}
     * @memberof Challenge
     */
    datasetId?: string;
    /**
     * Alpha-numeric, unique id of evaluation policy
     * @type {string}
     * @memberof Challenge
     */
    evaluationPolicyId?: string;
    /**
     * Alpha-numeric, unique id of dispatch policy
     * @type {string}
     * @memberof Challenge
     */
    dispatchPolicyId?: string;
    /**
     * Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)
     * @type {Date}
     * @memberof Challenge
     */
    creationTimestamp?: Date;
    /**
     * 
     * @type {ChallengeStatusEnum}
     * @memberof Challenge
     */
    status?: ChallengeStatusEnum;
    /**
     * 
     * @type {ChallengeAccessTypeEnum}
     * @memberof Challenge
     */
    accessType: ChallengeAccessTypeEnum;
    /**
     * 
     * @type {ChallengeTenantRoleEnum}
     * @memberof Challenge
     */
    tenantRole?: ChallengeTenantRoleEnum;
    /**
     * [TBD] Alpha-numeric, name of dataset
     * @type {string}
     * @memberof Challenge
     */
    name?: string;
    /**
     * completion percentage of a challenge
     * @type {number}
     * @memberof Challenge
     */
    completionPercentage?: number;
    /**
     * completion percentage of a challenge for a collaborator
     * @type {number}
     * @memberof Challenge
     */
    completionPercentageForCollaborator?: number;
    /**
     * [TBD] Alpha-numeric, name of dataset
     * @type {string}
     * @memberof Challenge
     */
    description?: string;
    /**
     * budget allocated for challenge
     * @type {number}
     * @memberof Challenge
     */
    budget?: number;
    /**
     * [TBD] Alpha-numeric, name of dataset
     * @type {boolean}
     * @memberof Challenge
     */
    stared?: boolean;
    /**
     * [TBD] Alpha-numeric, name of supplierTenantId
     * @type {string}
     * @memberof Challenge
     */
    supplierTenantId?: string;
    /**
     * [TBD] Alpha-numeric, name of dataset
     * @type {string}
     * @memberof Challenge
     */
    resolution?: string;
    /**
     * [TBD] Alpha-numeric, name of demanderTenantId
     * @type {string}
     * @memberof Challenge
     */
    demanderTenantId?: string;
    /**
     * shards in dataset
     * @type {number}
     * @memberof Challenge
     */
    initialNumberOfShards?: number;
    /**
     * 
     * @type {ChallengeDatasetMetadata}
     * @memberof Challenge
     */
    datasetMetadata?: ChallengeDatasetMetadata;
    /**
     * 
     * @type {ShapeTypeEnum}
     * @memberof Challenge
     */
    tagType?: ShapeTypeEnum;
    /**
     * estimated Tags Per Media Item
     * @type {number}
     * @memberof Challenge
     */
    estimatedTagsPerMediaItem?: number;
    /**
     * taxonomy list for nodeType
     * @type {Array<string>}
     * @memberof Challenge
     */
    nodeTaxonomy?: Array<string>;
    /**
     * taxonomy list for edgeType
     * @type {Array<string>}
     * @memberof Challenge
     */
    edgeTaxonomy?: Array<string>;
    /**
     * 
     * @type {Array<ChallengeCompletionPercentage>}
     * @memberof Challenge
     */
    completionPercentages?: Array<ChallengeCompletionPercentage>;
    /**
     * hours until the challenge is expired
     * @type {number}
     * @memberof Challenge
     */
    expiration?: number;
    /**
     * Token for accessing the challenge
     * @type {string}
     * @memberof Challenge
     */
    challengeAccessToken?: string;
}

export function ChallengeFromJSON(json: any): Challenge {
    return ChallengeFromJSONTyped(json, false);
}

export function ChallengeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Challenge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challengeId': !exists(json, 'challengeId') ? undefined : json['challengeId'],
        'datasetId': !exists(json, 'datasetId') ? undefined : json['datasetId'],
        'evaluationPolicyId': !exists(json, 'evaluationPolicyId') ? undefined : json['evaluationPolicyId'],
        'dispatchPolicyId': !exists(json, 'dispatchPolicyId') ? undefined : json['dispatchPolicyId'],
        'creationTimestamp': !exists(json, 'creationTimestamp') ? undefined : (new Date(json['creationTimestamp'])),
        'status': !exists(json, 'status') ? undefined : ChallengeStatusEnumFromJSON(json['status']),
        'accessType': ChallengeAccessTypeEnumFromJSON(json['accessType']),
        'tenantRole': !exists(json, 'tenantRole') ? undefined : ChallengeTenantRoleEnumFromJSON(json['tenantRole']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'completionPercentage': !exists(json, 'completionPercentage') ? undefined : json['completionPercentage'],
        'completionPercentageForCollaborator': !exists(json, 'completionPercentageForCollaborator') ? undefined : json['completionPercentageForCollaborator'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'budget': !exists(json, 'budget') ? undefined : json['budget'],
        'stared': !exists(json, 'stared') ? undefined : json['stared'],
        'supplierTenantId': !exists(json, 'supplierTenantId') ? undefined : json['supplierTenantId'],
        'resolution': !exists(json, 'resolution') ? undefined : json['resolution'],
        'demanderTenantId': !exists(json, 'demanderTenantId') ? undefined : json['demanderTenantId'],
        'initialNumberOfShards': !exists(json, 'initialNumberOfShards') ? undefined : json['initialNumberOfShards'],
        'datasetMetadata': !exists(json, 'datasetMetadata') ? undefined : ChallengeDatasetMetadataFromJSON(json['datasetMetadata']),
        'tagType': !exists(json, 'tagType') ? undefined : ShapeTypeEnumFromJSON(json['tagType']),
        'estimatedTagsPerMediaItem': !exists(json, 'estimatedTagsPerMediaItem') ? undefined : json['estimatedTagsPerMediaItem'],
        'nodeTaxonomy': !exists(json, 'nodeTaxonomy') ? undefined : json['nodeTaxonomy'],
        'edgeTaxonomy': !exists(json, 'edgeTaxonomy') ? undefined : json['edgeTaxonomy'],
        'completionPercentages': !exists(json, 'completionPercentages') ? undefined : ((json['completionPercentages'] as Array<any>).map(ChallengeCompletionPercentageFromJSON)),
        'expiration': !exists(json, 'expiration') ? undefined : json['expiration'],
        'challengeAccessToken': !exists(json, 'challengeAccessToken') ? undefined : json['challengeAccessToken'],
    };
}

export function ChallengeToJSON(value?: Challenge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challengeId': value.challengeId,
        'datasetId': value.datasetId,
        'evaluationPolicyId': value.evaluationPolicyId,
        'dispatchPolicyId': value.dispatchPolicyId,
        'creationTimestamp': value.creationTimestamp === undefined ? undefined : (value.creationTimestamp.toISOString()),
        'status': ChallengeStatusEnumToJSON(value.status),
        'accessType': ChallengeAccessTypeEnumToJSON(value.accessType),
        'tenantRole': ChallengeTenantRoleEnumToJSON(value.tenantRole),
        'name': value.name,
        'completionPercentage': value.completionPercentage,
        'completionPercentageForCollaborator': value.completionPercentageForCollaborator,
        'description': value.description,
        'budget': value.budget,
        'stared': value.stared,
        'supplierTenantId': value.supplierTenantId,
        'resolution': value.resolution,
        'demanderTenantId': value.demanderTenantId,
        'initialNumberOfShards': value.initialNumberOfShards,
        'datasetMetadata': ChallengeDatasetMetadataToJSON(value.datasetMetadata),
        'tagType': ShapeTypeEnumToJSON(value.tagType),
        'estimatedTagsPerMediaItem': value.estimatedTagsPerMediaItem,
        'nodeTaxonomy': value.nodeTaxonomy,
        'edgeTaxonomy': value.edgeTaxonomy,
        'completionPercentages': value.completionPercentages === undefined ? undefined : ((value.completionPercentages as Array<any>).map(ChallengeCompletionPercentageToJSON)),
        'expiration': value.expiration,
        'challengeAccessToken': value.challengeAccessToken,
    };
}


