/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Recognized style of the writing, including font family, font type, size, color
 * @export
 * @interface Style
 */
export interface Style {
    /**
     * Character encoding type
     * @type {string}
     * @memberof Style
     */
    fontStyle?: StyleFontStyleEnum;
    /**
     * Character encoding type
     * @type {string}
     * @memberof Style
     */
    fontVariant?: StyleFontVariantEnum;
    /**
     * Size of font
     * @type {number}
     * @memberof Style
     */
    fontSize?: number;
    /**
     * Color in hex format 
     * @type {string}
     * @memberof Style
     */
    fontColor?: string;
}

export function StyleFromJSON(json: any): Style {
    return StyleFromJSONTyped(json, false);
}

export function StyleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Style {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fontStyle': !exists(json, 'font-style') ? undefined : json['font-style'],
        'fontVariant': !exists(json, 'font-variant') ? undefined : json['font-variant'],
        'fontSize': !exists(json, 'font-size') ? undefined : json['font-size'],
        'fontColor': !exists(json, 'font-color') ? undefined : json['font-color'],
    };
}

export function StyleToJSON(value?: Style | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'font-style': value.fontStyle,
        'font-variant': value.fontVariant,
        'font-size': value.fontSize,
        'font-color': value.fontColor,
    };
}

/**
* @export
* @enum {string}
*/
export enum StyleFontStyleEnum {
    Serif = 'serif',
    SansSerif = 'sans-serif',
    Handwritten = 'handwritten',
    Collage = 'collage'
}
/**
* @export
* @enum {string}
*/
export enum StyleFontVariantEnum {
    AllCaps = 'all-caps',
    NoCaps = 'no-caps',
    Handwritten = 'handwritten',
    Collage = 'collage'
}


