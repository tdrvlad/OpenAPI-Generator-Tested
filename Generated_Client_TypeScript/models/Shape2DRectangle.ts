/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Shape,
    ShapeFromJSON,
    ShapeFromJSONTyped,
    ShapeToJSON,
    Shape2DRectangleAllOf,
    Shape2DRectangleAllOfFromJSON,
    Shape2DRectangleAllOfFromJSONTyped,
    Shape2DRectangleAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface Shape2DRectangle
 */
export interface Shape2DRectangle extends Shape {
    /**
     * Top coordinate of the tag, relative to media raster
     * @type {number}
     * @memberof Shape2DRectangle
     */
    top?: number;
    /**
     * Left coordinate of the tag, relative to media raster
     * @type {number}
     * @memberof Shape2DRectangle
     */
    left?: number;
    /**
     * Right coordinate of the tag, relative to media raster
     * @type {number}
     * @memberof Shape2DRectangle
     */
    right?: number;
    /**
     * Bottom coordinate of the tag, relative to media raster
     * @type {number}
     * @memberof Shape2DRectangle
     */
    bottom?: number;
}

export function Shape2DRectangleFromJSON(json: any): Shape2DRectangle {
    return Shape2DRectangleFromJSONTyped(json, false);
}

export function Shape2DRectangleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Shape2DRectangle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ShapeFromJSONTyped(json, ignoreDiscriminator),
        'top': !exists(json, 'top') ? undefined : json['top'],
        'left': !exists(json, 'left') ? undefined : json['left'],
        'right': !exists(json, 'right') ? undefined : json['right'],
        'bottom': !exists(json, 'bottom') ? undefined : json['bottom'],
    };
}

export function Shape2DRectangleToJSON(value?: Shape2DRectangle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ShapeToJSON(value),
        'top': value.top,
        'left': value.left,
        'right': value.right,
        'bottom': value.bottom,
    };
}


