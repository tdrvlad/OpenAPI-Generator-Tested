/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChallengeAccessTypeEnum,
    ChallengeAccessTypeEnumFromJSON,
    ChallengeAccessTypeEnumFromJSONTyped,
    ChallengeAccessTypeEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface PatchChallenge
 */
export interface PatchChallenge {
    /**
     * Alpha-numeric, unique id of evaluation policy
     * @type {string}
     * @memberof PatchChallenge
     */
    evaluationPolicyId?: string;
    /**
     * Alpha-numeric, unique id of dispatch policy
     * @type {string}
     * @memberof PatchChallenge
     */
    dispatchPolicyId?: string;
    /**
     * 
     * @type {ChallengeAccessTypeEnum}
     * @memberof PatchChallenge
     */
    accessType?: ChallengeAccessTypeEnum;
    /**
     * [TBD] Alpha-numeric, name of dataset
     * @type {string}
     * @memberof PatchChallenge
     */
    name?: string;
    /**
     * [TBD] Alpha-numeric, name of dataset
     * @type {string}
     * @memberof PatchChallenge
     */
    description?: string;
    /**
     * budget allocated for challenge
     * @type {number}
     * @memberof PatchChallenge
     */
    budget?: number;
}

export function PatchChallengeFromJSON(json: any): PatchChallenge {
    return PatchChallengeFromJSONTyped(json, false);
}

export function PatchChallengeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchChallenge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'evaluationPolicyId': !exists(json, 'evaluationPolicyId') ? undefined : json['evaluationPolicyId'],
        'dispatchPolicyId': !exists(json, 'dispatchPolicyId') ? undefined : json['dispatchPolicyId'],
        'accessType': !exists(json, 'accessType') ? undefined : ChallengeAccessTypeEnumFromJSON(json['accessType']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'budget': !exists(json, 'budget') ? undefined : json['budget'],
    };
}

export function PatchChallengeToJSON(value?: PatchChallenge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'evaluationPolicyId': value.evaluationPolicyId,
        'dispatchPolicyId': value.dispatchPolicyId,
        'accessType': ChallengeAccessTypeEnumToJSON(value.accessType),
        'name': value.name,
        'description': value.description,
        'budget': value.budget,
    };
}


