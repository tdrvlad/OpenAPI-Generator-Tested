/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DatasetTypeEnum,
    DatasetTypeEnumFromJSON,
    DatasetTypeEnumFromJSONTyped,
    DatasetTypeEnumToJSON,
    Image,
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
} from './';

/**
 * 
 * @export
 * @interface Dataset
 */
export interface Dataset {
    /**
     * [TBD] Alpha-numeric, unique id of dataset
     * @type {string}
     * @memberof Dataset
     */
    datasetId?: string;
    /**
     * 
     * @type {DatasetTypeEnum}
     * @memberof Dataset
     */
    type?: DatasetTypeEnum;
    /**
     * Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)
     * @type {Date}
     * @memberof Dataset
     */
    creationTimestamp?: Date;
    /**
     * Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)
     * @type {Date}
     * @memberof Dataset
     */
    lastUpdateTimestamp?: Date;
    /**
     * [TBD] Alpha-numeric, unique id of dataset
     * @type {string}
     * @memberof Dataset
     */
    owningAccountId?: string;
    /**
     * [TBD] Alpha-numeric, name of dataset
     * @type {string}
     * @memberof Dataset
     */
    name?: string;
    /**
     * 
     * @type {Image}
     * @memberof Dataset
     */
    image?: Image;
    /**
     * cost for storage in dollars per month
     * @type {number}
     * @memberof Dataset
     */
    storageCost?: number;
}

export function DatasetFromJSON(json: any): Dataset {
    return DatasetFromJSONTyped(json, false);
}

export function DatasetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Dataset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'datasetId': !exists(json, 'datasetId') ? undefined : json['datasetId'],
        'type': !exists(json, 'type') ? undefined : DatasetTypeEnumFromJSON(json['type']),
        'creationTimestamp': !exists(json, 'creationTimestamp') ? undefined : (new Date(json['creationTimestamp'])),
        'lastUpdateTimestamp': !exists(json, 'lastUpdateTimestamp') ? undefined : (new Date(json['lastUpdateTimestamp'])),
        'owningAccountId': !exists(json, 'owningAccountId') ? undefined : json['owningAccountId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'image': !exists(json, 'image') ? undefined : ImageFromJSON(json['image']),
        'storageCost': !exists(json, 'storageCost') ? undefined : json['storageCost'],
    };
}

export function DatasetToJSON(value?: Dataset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'datasetId': value.datasetId,
        'type': DatasetTypeEnumToJSON(value.type),
        'creationTimestamp': value.creationTimestamp === undefined ? undefined : (value.creationTimestamp.toISOString()),
        'lastUpdateTimestamp': value.lastUpdateTimestamp === undefined ? undefined : (value.lastUpdateTimestamp.toISOString()),
        'owningAccountId': value.owningAccountId,
        'name': value.name,
        'image': ImageToJSON(value.image),
        'storageCost': value.storageCost,
    };
}


