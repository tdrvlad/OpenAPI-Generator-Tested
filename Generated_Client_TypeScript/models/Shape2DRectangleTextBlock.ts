/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Shape2DRectangle,
    Shape2DRectangleFromJSON,
    Shape2DRectangleFromJSONTyped,
    Shape2DRectangleToJSON,
    Shape2DRectangleTextBlockAllOf,
    Shape2DRectangleTextBlockAllOfFromJSON,
    Shape2DRectangleTextBlockAllOfFromJSONTyped,
    Shape2DRectangleTextBlockAllOfToJSON,
    Style,
    StyleFromJSON,
    StyleFromJSONTyped,
    StyleToJSON,
    Transliteration,
    TransliterationFromJSON,
    TransliterationFromJSONTyped,
    TransliterationToJSON,
} from './';

/**
 * 
 * @export
 * @interface Shape2DRectangleTextBlock
 */
export interface Shape2DRectangleTextBlock extends Shape2DRectangle {
    /**
     * 
     * @type {Transliteration}
     * @memberof Shape2DRectangleTextBlock
     */
    transliteration?: Transliteration;
    /**
     * 
     * @type {Style}
     * @memberof Shape2DRectangleTextBlock
     */
    style?: Style;
}

export function Shape2DRectangleTextBlockFromJSON(json: any): Shape2DRectangleTextBlock {
    return Shape2DRectangleTextBlockFromJSONTyped(json, false);
}

export function Shape2DRectangleTextBlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Shape2DRectangleTextBlock {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...Shape2DRectangleFromJSONTyped(json, ignoreDiscriminator),
        'transliteration': !exists(json, 'transliteration') ? undefined : TransliterationFromJSON(json['transliteration']),
        'style': !exists(json, 'style') ? undefined : StyleFromJSON(json['style']),
    };
}

export function Shape2DRectangleTextBlockToJSON(value?: Shape2DRectangleTextBlock | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...Shape2DRectangleToJSON(value),
        'transliteration': TransliterationToJSON(value.transliteration),
        'style': StyleToJSON(value.style),
    };
}


