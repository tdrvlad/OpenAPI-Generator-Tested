/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Evaluation,
    EvaluationFromJSON,
    EvaluationFromJSONTyped,
    EvaluationToJSON,
    PermanentIdentifier,
    PermanentIdentifierFromJSON,
    PermanentIdentifierFromJSONTyped,
    PermanentIdentifierToJSON,
    Shape,
    ShapeFromJSON,
    ShapeFromJSONTyped,
    ShapeToJSON,
} from './';

/**
 * 
 * @export
 * @interface MergedTag
 */
export interface MergedTag {
    /**
     * Alpha-numeric, unique id of tagged object
     * @type {string}
     * @memberof MergedTag
     */
    mergedTagId?: string;
    /**
     * Alpha-numeric, unique id of tagged object
     * @type {string}
     * @memberof MergedTag
     */
    mediaItemId?: string;
    /**
     * Alpha-numeric, unique id of tagged object
     * @type {string}
     * @memberof MergedTag
     */
    challengeId?: string;
    /**
     * 
     * @type {PermanentIdentifier}
     * @memberof MergedTag
     */
    permanentIdentifier?: PermanentIdentifier;
    /**
     * What type of object/event has been detected?
     * @type {string}
     * @memberof MergedTag
     */
    nodeType?: string;
    /**
     * What are the shapes that have been merged to determine this tag?
     * @type {Array<Shape>}
     * @memberof MergedTag
     */
    geometry?: Array<Shape>;
    /**
     * 
     * @type {Evaluation}
     * @memberof MergedTag
     */
    evaluation?: Evaluation;
    /**
     * What are the tags which have been merged?
     * @type {Array<string>}
     * @memberof MergedTag
     */
    composingTags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MergedTag
     */
    evaluationStatus?: MergedTagEvaluationStatusEnum;
}

export function MergedTagFromJSON(json: any): MergedTag {
    return MergedTagFromJSONTyped(json, false);
}

export function MergedTagFromJSONTyped(json: any, ignoreDiscriminator: boolean): MergedTag {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mergedTagId': !exists(json, 'mergedTagId') ? undefined : json['mergedTagId'],
        'mediaItemId': !exists(json, 'mediaItemId') ? undefined : json['mediaItemId'],
        'challengeId': !exists(json, 'challengeId') ? undefined : json['challengeId'],
        'permanentIdentifier': !exists(json, 'permanentIdentifier') ? undefined : PermanentIdentifierFromJSON(json['permanentIdentifier']),
        'nodeType': !exists(json, 'nodeType') ? undefined : json['nodeType'],
        'geometry': !exists(json, 'geometry') ? undefined : ((json['geometry'] as Array<any>).map(ShapeFromJSON)),
        'evaluation': !exists(json, 'evaluation') ? undefined : EvaluationFromJSON(json['evaluation']),
        'composingTags': !exists(json, 'composingTags') ? undefined : json['composingTags'],
        'evaluationStatus': !exists(json, 'evaluationStatus') ? undefined : json['evaluationStatus'],
    };
}

export function MergedTagToJSON(value?: MergedTag | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mergedTagId': value.mergedTagId,
        'mediaItemId': value.mediaItemId,
        'challengeId': value.challengeId,
        'permanentIdentifier': PermanentIdentifierToJSON(value.permanentIdentifier),
        'nodeType': value.nodeType,
        'geometry': value.geometry === undefined ? undefined : ((value.geometry as Array<any>).map(ShapeToJSON)),
        'evaluation': EvaluationToJSON(value.evaluation),
        'composingTags': value.composingTags,
        'evaluationStatus': value.evaluationStatus,
    };
}

/**
* @export
* @enum {string}
*/
export enum MergedTagEvaluationStatusEnum {
    Passed = 'passed',
    Failed = 'failed',
    Incomplete = 'incomplete'
}


