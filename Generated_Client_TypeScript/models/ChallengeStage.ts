/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LifeFormEnum,
    LifeFormEnumFromJSON,
    LifeFormEnumFromJSONTyped,
    LifeFormEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface ChallengeStage
 */
export interface ChallengeStage {
    /**
     * stage number
     * @type {number}
     * @memberof ChallengeStage
     */
    stageNumber?: number;
    /**
     * completion percentage for this stage
     * @type {number}
     * @memberof ChallengeStage
     */
    percentage?: number;
    /**
     * 
     * @type {LifeFormEnum}
     * @memberof ChallengeStage
     */
    operator?: LifeFormEnum;
}

export function ChallengeStageFromJSON(json: any): ChallengeStage {
    return ChallengeStageFromJSONTyped(json, false);
}

export function ChallengeStageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChallengeStage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stageNumber': !exists(json, 'stageNumber') ? undefined : json['stageNumber'],
        'percentage': !exists(json, 'percentage') ? undefined : json['percentage'],
        'operator': !exists(json, 'operator') ? undefined : LifeFormEnumFromJSON(json['operator']),
    };
}

export function ChallengeStageToJSON(value?: ChallengeStage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stageNumber': value.stageNumber,
        'percentage': value.percentage,
        'operator': LifeFormEnumToJSON(value.operator),
    };
}


