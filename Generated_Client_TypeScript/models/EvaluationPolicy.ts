/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The parameters used in the evaluation of a challenge, its tasks and their Tags.
 * @export
 * @interface EvaluationPolicy
 */
export interface EvaluationPolicy {
    /**
     * Unique ID of evaluation policy
     * @type {string}
     * @memberof EvaluationPolicy
     */
    evaluationPolicyId?: string;
    /**
     * name
     * @type {string}
     * @memberof EvaluationPolicy
     */
    name?: string;
    /**
     * The minimum amount of overlap between two tags, which, in conjuction with a matching object-type, is a condition for merging two tags
     * @type {number}
     * @memberof EvaluationPolicy
     */
    spatialOverlapThreshold?: number;
    /**
     * The penalty incurred for a tag that is NOT matched with other tags
     * @type {number}
     * @memberof EvaluationPolicy
     */
    harshness?: number;
    /**
     * The rank (power) of the generalized mean used for evaluating a task composed of several tags. Negative values mean harsher evaluations, values larger than 1.0 mean less harsh evaluations. Default value is 1.0 (arithmetic mean). 
     * @type {number}
     * @memberof EvaluationPolicy
     */
    rankOfMean?: number;
    /**
     * If set to 'algebraic', negative results on one task will be substracted from user payout.
     * @type {string}
     * @memberof EvaluationPolicy
     */
    summationType?: EvaluationPolicySummationTypeEnum;
}

export function EvaluationPolicyFromJSON(json: any): EvaluationPolicy {
    return EvaluationPolicyFromJSONTyped(json, false);
}

export function EvaluationPolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvaluationPolicy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'evaluationPolicyId': !exists(json, 'evaluationPolicyId') ? undefined : json['evaluationPolicyId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'spatialOverlapThreshold': !exists(json, 'spatialOverlapThreshold') ? undefined : json['spatialOverlapThreshold'],
        'harshness': !exists(json, 'harshness') ? undefined : json['harshness'],
        'rankOfMean': !exists(json, 'rankOfMean') ? undefined : json['rankOfMean'],
        'summationType': !exists(json, 'summationType') ? undefined : json['summationType'],
    };
}

export function EvaluationPolicyToJSON(value?: EvaluationPolicy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'evaluationPolicyId': value.evaluationPolicyId,
        'name': value.name,
        'spatialOverlapThreshold': value.spatialOverlapThreshold,
        'harshness': value.harshness,
        'rankOfMean': value.rankOfMean,
        'summationType': value.summationType,
    };
}

/**
* @export
* @enum {string}
*/
export enum EvaluationPolicySummationTypeEnum {
    Algebraic = 'algebraic',
    NonNegative = 'non-negative'
}


