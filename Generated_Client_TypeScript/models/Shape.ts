/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     Shape2DRectangleFromJSONTyped,
     Shape2DPolygonFromJSONTyped,
     Shape2DTimeboundPolygonFromJSONTyped,
     Shape2DRectangleTextBlockFromJSONTyped,
     Shape2DPolygonTextBlockFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface Shape
 */
export interface Shape {
    /**
     * [TBD] Alpha-numeric, unique id of dataset
     * @type {string}
     * @memberof Shape
     */
    shapeId: string;
    /**
     * descriminator
     * @type {string}
     * @memberof Shape
     */
    shapeType: string;
}

export function ShapeFromJSON(json: any): Shape {
    return ShapeFromJSONTyped(json, false);
}

export function ShapeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Shape {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['shapeType'] === '2D_rectangle') {
            return Shape2DRectangleFromJSONTyped(json, true);
        }
        if (json['shapeType'] === '2D_polygon') {
            return Shape2DPolygonFromJSONTyped(json, true);
        }
        if (json['shapeType'] === '2D_timebound_polygon') {
            return Shape2DTimeboundPolygonFromJSONTyped(json, true);
        }
        if (json['shapeType'] === '2D_rectangle_text_block') {
            return Shape2DRectangleTextBlockFromJSONTyped(json, true);
        }
        if (json['shapeType'] === '2D_polygon_text_block') {
            return Shape2DPolygonTextBlockFromJSONTyped(json, true);
        }
    }
    return {
        
        'shapeId': json['shapeId'],
        'shapeType': json['shapeType'],
    };
}

export function ShapeToJSON(value?: Shape | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shapeId': value.shapeId,
        'shapeType': value.shapeType,
    };
}


