/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Challenge,
    ChallengeFromJSON,
    ChallengeFromJSONTyped,
    ChallengeToJSON,
    LifeFormEnum,
    LifeFormEnumFromJSON,
    LifeFormEnumFromJSONTyped,
    LifeFormEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface Avatar
 */
export interface Avatar {
    /**
     * [TBD] Alpha-numeric, unique id of avatar
     * @type {string}
     * @memberof Avatar
     */
    avatarId?: string;
    /**
     * 
     * @type {LifeFormEnum}
     * @memberof Avatar
     */
    lifeForm?: LifeFormEnum;
    /**
     * assignedChallenges
     * @type {Array<Challenge>}
     * @memberof Avatar
     */
    assignedChallenges?: Array<Challenge>;
}

export function AvatarFromJSON(json: any): Avatar {
    return AvatarFromJSONTyped(json, false);
}

export function AvatarFromJSONTyped(json: any, ignoreDiscriminator: boolean): Avatar {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'avatarId': !exists(json, 'avatarId') ? undefined : json['avatarId'],
        'lifeForm': !exists(json, 'lifeForm') ? undefined : LifeFormEnumFromJSON(json['lifeForm']),
        'assignedChallenges': !exists(json, 'assignedChallenges') ? undefined : ((json['assignedChallenges'] as Array<any>).map(ChallengeFromJSON)),
    };
}

export function AvatarToJSON(value?: Avatar | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'avatarId': value.avatarId,
        'lifeForm': LifeFormEnumToJSON(value.lifeForm),
        'assignedChallenges': value.assignedChallenges === undefined ? undefined : ((value.assignedChallenges as Array<any>).map(ChallengeToJSON)),
    };
}


