/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Image,
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
    MediaDescriptor,
    MediaDescriptorFromJSON,
    MediaDescriptorFromJSONTyped,
    MediaDescriptorToJSON,
    ShardingDescriptor,
    ShardingDescriptorFromJSON,
    ShardingDescriptorFromJSONTyped,
    ShardingDescriptorToJSON,
} from './';

/**
 * 
 * @export
 * @interface MediaItem
 */
export interface MediaItem {
    /**
     * [TBD] Alpha-numeric, unique id of media item
     * @type {string}
     * @memberof MediaItem
     */
    mediaItemId?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    type?: MediaItemTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    format?: MediaItemFormatEnum;
    /**
     * 
     * @type {MediaDescriptor}
     * @memberof MediaItem
     */
    descriptor?: MediaDescriptor;
    /**
     * 
     * @type {ShardingDescriptor}
     * @memberof MediaItem
     */
    sharding?: ShardingDescriptor;
    /**
     * 
     * @type {Image}
     * @memberof MediaItem
     */
    image?: Image;
}

export function MediaItemFromJSON(json: any): MediaItem {
    return MediaItemFromJSONTyped(json, false);
}

export function MediaItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mediaItemId': !exists(json, 'mediaItemId') ? undefined : json['mediaItemId'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'format': !exists(json, 'format') ? undefined : json['format'],
        'descriptor': !exists(json, 'descriptor') ? undefined : MediaDescriptorFromJSON(json['descriptor']),
        'sharding': !exists(json, 'sharding') ? undefined : ShardingDescriptorFromJSON(json['sharding']),
        'image': !exists(json, 'image') ? undefined : ImageFromJSON(json['image']),
    };
}

export function MediaItemToJSON(value?: MediaItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mediaItemId': value.mediaItemId,
        'type': value.type,
        'format': value.format,
        'descriptor': MediaDescriptorToJSON(value.descriptor),
        'sharding': ShardingDescriptorToJSON(value.sharding),
        'image': ImageToJSON(value.image),
    };
}

/**
* @export
* @enum {string}
*/
export enum MediaItemTypeEnum {
    RgbStaticPhoto = 'rgb-static-photo',
    RgbLivePhoto = 'rgb-live-photo',
    RgbVideo = 'rgb-video',
    AudioRgbVideo = 'audio-rgb-video',
    AudioOnly = 'audio-only',
    Text = 'text'
}
/**
* @export
* @enum {string}
*/
export enum MediaItemFormatEnum {
    ImageHeif = 'image/heif',
    ImageHeic = 'image/heic',
    ImageHeifSequence = 'image/heif-sequence',
    ImageJpeg = 'image/jpeg',
    ImagePng = 'image/png',
    VideoMp4 = 'video/mp4',
    Video3gpp = 'video/3gpp',
    VideoQuicktime = 'video/quicktime',
    VideoXMsvideo = 'video/x-msvideo',
    VideoXMsWmv = 'video/x-ms-wmv'
}


