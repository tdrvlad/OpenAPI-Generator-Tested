/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Dataset,
    DatasetFromJSON,
    DatasetToJSON,
    DatasetStorageCost,
    DatasetStorageCostFromJSON,
    DatasetStorageCostToJSON,
} from '../models';

export interface AddMediaItemRequest {
    datasetId: string;
}

export interface CreateDatasetRequest {
    datasetName?: string;
    datasetType?: string;
    staticImage?: string;
}

export interface DeleteDatasetRequest {
    requestBody: Array<string>;
}

export interface GetDatasetRequest {
    datasetId: string;
}

export interface GetStorageCostRequest {
    datasetId?: string;
    size?: number;
}

/**
 * 
 */
export class DatasetApi extends runtime.BaseAPI {

    /**
     * Multiple status values can be provided with comma separated strings
     * add media items to dataset
     */
    async addMediaItemRaw(requestParameters: AddMediaItemRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling addMediaItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dataset/media-item/{datasetId}`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * add media items to dataset
     */
    async addMediaItem(requestParameters: AddMediaItemRequest): Promise<void> {
        await this.addMediaItemRaw(requestParameters);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of datasets
     */
    async createDatasetRaw(requestParameters: CreateDatasetRequest): Promise<runtime.ApiResponse<Dataset>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasetName !== undefined) {
            queryParameters['datasetName'] = requestParameters.datasetName;
        }

        if (requestParameters.datasetType !== undefined) {
            queryParameters['datasetType'] = requestParameters.datasetType;
        }

        if (requestParameters.staticImage !== undefined) {
            queryParameters['staticImage'] = requestParameters.staticImage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dataset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of datasets
     */
    async createDataset(requestParameters: CreateDatasetRequest): Promise<Dataset> {
        const response = await this.createDatasetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Delete dataset
     */
    async deleteDatasetRaw(requestParameters: DeleteDatasetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling deleteDataset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dataset`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Delete dataset
     */
    async deleteDataset(requestParameters: DeleteDatasetRequest): Promise<void> {
        await this.deleteDatasetRaw(requestParameters);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve dataset info
     */
    async getDatasetRaw(requestParameters: GetDatasetRequest): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling getDataset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dataset/{datasetId}`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve dataset info
     */
    async getDataset(requestParameters: GetDatasetRequest): Promise<Dataset> {
        const response = await this.getDatasetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of datasets
     */
    async getDatasetListRaw(): Promise<runtime.ApiResponse<Array<Dataset>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dataset/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatasetFromJSON));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of datasets
     */
    async getDatasetList(): Promise<Array<Dataset>> {
        const response = await this.getDatasetListRaw();
        return await response.value();
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of static images
     */
    async getDatasetStaticImagesRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dataset/static-image/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of static images
     */
    async getDatasetStaticImages(): Promise<Array<string>> {
        const response = await this.getDatasetStaticImagesRaw();
        return await response.value();
    }

    /**
     * optional parameter datasetId for new shards
     * get estimated cost for storage
     */
    async getStorageCostRaw(requestParameters: GetStorageCostRequest): Promise<runtime.ApiResponse<DatasetStorageCost>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.datasetId !== undefined) {
            queryParameters['datasetId'] = requestParameters.datasetId;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dataset/cost`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetStorageCostFromJSON(jsonValue));
    }

    /**
     * optional parameter datasetId for new shards
     * get estimated cost for storage
     */
    async getStorageCost(requestParameters: GetStorageCostRequest): Promise<DatasetStorageCost> {
        const response = await this.getStorageCostRaw(requestParameters);
        return await response.value();
    }

}
