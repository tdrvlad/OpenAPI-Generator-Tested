/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EvaluationPolicy,
    EvaluationPolicyFromJSON,
    EvaluationPolicyToJSON,
} from '../models';

export interface CreateEvaluationPolicyRequest {
    evaluationPolicy: EvaluationPolicy;
}

/**
 * 
 */
export class EvaluationPolicyApi extends runtime.BaseAPI {

    /**
     * Create a new evaluationPolicy.
     */
    async createEvaluationPolicyRaw(requestParameters: CreateEvaluationPolicyRequest): Promise<runtime.ApiResponse<EvaluationPolicy>> {
        if (requestParameters.evaluationPolicy === null || requestParameters.evaluationPolicy === undefined) {
            throw new runtime.RequiredError('evaluationPolicy','Required parameter requestParameters.evaluationPolicy was null or undefined when calling createEvaluationPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/evaluation-policy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EvaluationPolicyToJSON(requestParameters.evaluationPolicy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EvaluationPolicyFromJSON(jsonValue));
    }

    /**
     * Create a new evaluationPolicy.
     */
    async createEvaluationPolicy(requestParameters: CreateEvaluationPolicyRequest): Promise<EvaluationPolicy> {
        const response = await this.createEvaluationPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of evaluation policies
     */
    async getEvaluationPolicyListRaw(): Promise<runtime.ApiResponse<Array<EvaluationPolicy>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/evaluation-policy/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EvaluationPolicyFromJSON));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of evaluation policies
     */
    async getEvaluationPolicyList(): Promise<Array<EvaluationPolicy>> {
        const response = await this.getEvaluationPolicyListRaw();
        return await response.value();
    }

}
