/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetTaskResponse,
    GetTaskResponseFromJSON,
    GetTaskResponseToJSON,
    Task,
    TaskFromJSON,
    TaskToJSON,
} from '../models';

export interface GetTaskRequest {
    challengeId: string;
}

export interface SubmitTaskRequest {
    taskId: string;
    task: Task;
}

/**
 * 
 */
export class TaskApi extends runtime.BaseAPI {

    /**
     * Multiple status values can be provided with comma separated strings
     * Get new task
     */
    async getTaskRaw(requestParameters: GetTaskRequest): Promise<runtime.ApiResponse<GetTaskResponse>> {
        if (requestParameters.challengeId === null || requestParameters.challengeId === undefined) {
            throw new runtime.RequiredError('challengeId','Required parameter requestParameters.challengeId was null or undefined when calling getTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/{challengeId}`.replace(`{${"challengeId"}}`, encodeURIComponent(String(requestParameters.challengeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskResponseFromJSON(jsonValue));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Get new task
     */
    async getTask(requestParameters: GetTaskRequest): Promise<GetTaskResponse> {
        const response = await this.getTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Submit  task
     */
    async submitTaskRaw(requestParameters: SubmitTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling submitTask.');
        }

        if (requestParameters.task === null || requestParameters.task === undefined) {
            throw new runtime.RequiredError('task','Required parameter requestParameters.task was null or undefined when calling submitTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/task/{taskId}/submit`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Submit  task
     */
    async submitTask(requestParameters: SubmitTaskRequest): Promise<Task> {
        const response = await this.submitTaskRaw(requestParameters);
        return await response.value();
    }

}
