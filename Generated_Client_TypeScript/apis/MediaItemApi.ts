/* tslint:disable */
/* eslint-disable */
/**
 * DeepVISS TAG
 * DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: office@deepviss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MediaItem,
    MediaItemFromJSON,
    MediaItemToJSON,
} from '../models';

export interface DeleteMediaItemsRequest {
    requestBody: Array<string>;
}

export interface GetMediaItemRequest {
    bucketName: string;
    mediaItem: string;
}

export interface GetMediaItemListRequest {
    datasetId: string;
    pageSize?: number;
    pageNumber?: number;
}

/**
 * 
 */
export class MediaItemApi extends runtime.BaseAPI {

    /**
     * Multiple status values can be provided with comma separated strings
     * Delete mediaItem
     */
    async deleteMediaItemsRaw(requestParameters: DeleteMediaItemsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling deleteMediaItems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/media-item`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Delete mediaItem
     */
    async deleteMediaItems(requestParameters: DeleteMediaItemsRequest): Promise<void> {
        await this.deleteMediaItemsRaw(requestParameters);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve media item
     */
    async getMediaItemRaw(requestParameters: GetMediaItemRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.bucketName === null || requestParameters.bucketName === undefined) {
            throw new runtime.RequiredError('bucketName','Required parameter requestParameters.bucketName was null or undefined when calling getMediaItem.');
        }

        if (requestParameters.mediaItem === null || requestParameters.mediaItem === undefined) {
            throw new runtime.RequiredError('mediaItem','Required parameter requestParameters.mediaItem was null or undefined when calling getMediaItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media-item/{bucketName}/{mediaItem}`.replace(`{${"bucketName"}}`, encodeURIComponent(String(requestParameters.bucketName))).replace(`{${"mediaItem"}}`, encodeURIComponent(String(requestParameters.mediaItem))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve media item
     */
    async getMediaItem(requestParameters: GetMediaItemRequest): Promise<string> {
        const response = await this.getMediaItemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of mediaItems
     */
    async getMediaItemListRaw(requestParameters: GetMediaItemListRequest): Promise<runtime.ApiResponse<Array<MediaItem>>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling getMediaItemList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media-item/{datasetId}/list`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MediaItemFromJSON));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Retrieve list of mediaItems
     */
    async getMediaItemList(requestParameters: GetMediaItemListRequest): Promise<Array<MediaItem>> {
        const response = await this.getMediaItemListRaw(requestParameters);
        return await response.value();
    }

}
