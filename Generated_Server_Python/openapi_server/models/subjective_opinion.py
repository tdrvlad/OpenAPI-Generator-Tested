# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SubjectiveOpinion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opinion_emitter_id=None, opinion_reason_id=None, belief=None, disbelief=None, uncertainty=None, base_rate_probability=None):  # noqa: E501
        """SubjectiveOpinion - a model defined in OpenAPI

        :param opinion_emitter_id: The opinion_emitter_id of this SubjectiveOpinion.  # noqa: E501
        :type opinion_emitter_id: str
        :param opinion_reason_id: The opinion_reason_id of this SubjectiveOpinion.  # noqa: E501
        :type opinion_reason_id: str
        :param belief: The belief of this SubjectiveOpinion.  # noqa: E501
        :type belief: float
        :param disbelief: The disbelief of this SubjectiveOpinion.  # noqa: E501
        :type disbelief: float
        :param uncertainty: The uncertainty of this SubjectiveOpinion.  # noqa: E501
        :type uncertainty: float
        :param base_rate_probability: The base_rate_probability of this SubjectiveOpinion.  # noqa: E501
        :type base_rate_probability: float
        """
        self.openapi_types = {
            'opinion_emitter_id': str,
            'opinion_reason_id': str,
            'belief': float,
            'disbelief': float,
            'uncertainty': float,
            'base_rate_probability': float
        }

        self.attribute_map = {
            'opinion_emitter_id': 'opinionEmitterId',
            'opinion_reason_id': 'opinionReasonId',
            'belief': 'belief',
            'disbelief': 'disbelief',
            'uncertainty': 'uncertainty',
            'base_rate_probability': 'baseRateProbability'
        }

        self._opinion_emitter_id = opinion_emitter_id
        self._opinion_reason_id = opinion_reason_id
        self._belief = belief
        self._disbelief = disbelief
        self._uncertainty = uncertainty
        self._base_rate_probability = base_rate_probability

    @classmethod
    def from_dict(cls, dikt) -> 'SubjectiveOpinion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubjectiveOpinion of this SubjectiveOpinion.  # noqa: E501
        :rtype: SubjectiveOpinion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opinion_emitter_id(self):
        """Gets the opinion_emitter_id of this SubjectiveOpinion.

        Functional source, if any, for this opinion, such a specific condition or internal state encoutered. May be empty.  # noqa: E501

        :return: The opinion_emitter_id of this SubjectiveOpinion.
        :rtype: str
        """
        return self._opinion_emitter_id

    @opinion_emitter_id.setter
    def opinion_emitter_id(self, opinion_emitter_id):
        """Sets the opinion_emitter_id of this SubjectiveOpinion.

        Functional source, if any, for this opinion, such a specific condition or internal state encoutered. May be empty.  # noqa: E501

        :param opinion_emitter_id: The opinion_emitter_id of this SubjectiveOpinion.
        :type opinion_emitter_id: str
        """

        self._opinion_emitter_id = opinion_emitter_id

    @property
    def opinion_reason_id(self):
        """Gets the opinion_reason_id of this SubjectiveOpinion.

        Reason evoked, invoked or inferred by source for this opinion. May be empty.  # noqa: E501

        :return: The opinion_reason_id of this SubjectiveOpinion.
        :rtype: str
        """
        return self._opinion_reason_id

    @opinion_reason_id.setter
    def opinion_reason_id(self, opinion_reason_id):
        """Sets the opinion_reason_id of this SubjectiveOpinion.

        Reason evoked, invoked or inferred by source for this opinion. May be empty.  # noqa: E501

        :param opinion_reason_id: The opinion_reason_id of this SubjectiveOpinion.
        :type opinion_reason_id: str
        """

        self._opinion_reason_id = opinion_reason_id

    @property
    def belief(self):
        """Gets the belief of this SubjectiveOpinion.

        attributed to belief that the opinion is TRUE. belief mass (bx) normalized.  # noqa: E501

        :return: The belief of this SubjectiveOpinion.
        :rtype: float
        """
        return self._belief

    @belief.setter
    def belief(self, belief):
        """Sets the belief of this SubjectiveOpinion.

        attributed to belief that the opinion is TRUE. belief mass (bx) normalized.  # noqa: E501

        :param belief: The belief of this SubjectiveOpinion.
        :type belief: float
        """

        self._belief = belief

    @property
    def disbelief(self):
        """Gets the disbelief of this SubjectiveOpinion.

        attributed to belief that the opinion is FALSE. disbelief mass (dx)  normalized  # noqa: E501

        :return: The disbelief of this SubjectiveOpinion.
        :rtype: float
        """
        return self._disbelief

    @disbelief.setter
    def disbelief(self, disbelief):
        """Sets the disbelief of this SubjectiveOpinion.

        attributed to belief that the opinion is FALSE. disbelief mass (dx)  normalized  # noqa: E501

        :param disbelief: The disbelief of this SubjectiveOpinion.
        :type disbelief: float
        """

        self._disbelief = disbelief

    @property
    def uncertainty(self):
        """Gets the uncertainty of this SubjectiveOpinion.

        unattributed to either belief or disbelief and thus represent uncertainty. uncertainty mass (ux) normalized.  # noqa: E501

        :return: The uncertainty of this SubjectiveOpinion.
        :rtype: float
        """
        return self._uncertainty

    @uncertainty.setter
    def uncertainty(self, uncertainty):
        """Sets the uncertainty of this SubjectiveOpinion.

        unattributed to either belief or disbelief and thus represent uncertainty. uncertainty mass (ux) normalized.  # noqa: E501

        :param uncertainty: The uncertainty of this SubjectiveOpinion.
        :type uncertainty: float
        """

        self._uncertainty = uncertainty

    @property
    def base_rate_probability(self):
        """Gets the base_rate_probability of this SubjectiveOpinion.

        The probability of the opinion being true in the absence of the information generating it.  # noqa: E501

        :return: The base_rate_probability of this SubjectiveOpinion.
        :rtype: float
        """
        return self._base_rate_probability

    @base_rate_probability.setter
    def base_rate_probability(self, base_rate_probability):
        """Sets the base_rate_probability of this SubjectiveOpinion.

        The probability of the opinion being true in the absence of the information generating it.  # noqa: E501

        :param base_rate_probability: The base_rate_probability of this SubjectiveOpinion.
        :type base_rate_probability: float
        """

        self._base_rate_probability = base_rate_probability
