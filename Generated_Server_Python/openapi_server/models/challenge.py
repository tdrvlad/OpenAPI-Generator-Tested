# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_access_type_enum import ChallengeAccessTypeEnum
from openapi_server.models.challenge_completion_percentage import ChallengeCompletionPercentage
from openapi_server.models.challenge_dataset_metadata import ChallengeDatasetMetadata
from openapi_server.models.challenge_status_enum import ChallengeStatusEnum
from openapi_server.models.challenge_tenant_role_enum import ChallengeTenantRoleEnum
from openapi_server.models.shape_type_enum import ShapeTypeEnum
from openapi_server import util

from openapi_server.models.challenge_access_type_enum import ChallengeAccessTypeEnum  # noqa: E501
from openapi_server.models.challenge_completion_percentage import ChallengeCompletionPercentage  # noqa: E501
from openapi_server.models.challenge_dataset_metadata import ChallengeDatasetMetadata  # noqa: E501
from openapi_server.models.challenge_status_enum import ChallengeStatusEnum  # noqa: E501
from openapi_server.models.challenge_tenant_role_enum import ChallengeTenantRoleEnum  # noqa: E501
from openapi_server.models.shape_type_enum import ShapeTypeEnum  # noqa: E501

class Challenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, challenge_id=None, dataset_id=None, evaluation_policy_id=None, dispatch_policy_id=None, creation_timestamp=None, status=None, access_type=None, tenant_role=None, name=None, completion_percentage=None, completion_percentage_for_collaborator=None, description=None, budget=None, stared=None, supplier_tenant_id=None, resolution=None, demander_tenant_id=None, initial_number_of_shards=None, dataset_metadata=None, tag_type=None, estimated_tags_per_media_item=None, node_taxonomy=None, edge_taxonomy=None, completion_percentages=None, expiration=None, challenge_access_token=None):  # noqa: E501
        """Challenge - a model defined in OpenAPI

        :param challenge_id: The challenge_id of this Challenge.  # noqa: E501
        :type challenge_id: str
        :param dataset_id: The dataset_id of this Challenge.  # noqa: E501
        :type dataset_id: str
        :param evaluation_policy_id: The evaluation_policy_id of this Challenge.  # noqa: E501
        :type evaluation_policy_id: str
        :param dispatch_policy_id: The dispatch_policy_id of this Challenge.  # noqa: E501
        :type dispatch_policy_id: str
        :param creation_timestamp: The creation_timestamp of this Challenge.  # noqa: E501
        :type creation_timestamp: datetime
        :param status: The status of this Challenge.  # noqa: E501
        :type status: ChallengeStatusEnum
        :param access_type: The access_type of this Challenge.  # noqa: E501
        :type access_type: ChallengeAccessTypeEnum
        :param tenant_role: The tenant_role of this Challenge.  # noqa: E501
        :type tenant_role: ChallengeTenantRoleEnum
        :param name: The name of this Challenge.  # noqa: E501
        :type name: str
        :param completion_percentage: The completion_percentage of this Challenge.  # noqa: E501
        :type completion_percentage: int
        :param completion_percentage_for_collaborator: The completion_percentage_for_collaborator of this Challenge.  # noqa: E501
        :type completion_percentage_for_collaborator: int
        :param description: The description of this Challenge.  # noqa: E501
        :type description: str
        :param budget: The budget of this Challenge.  # noqa: E501
        :type budget: float
        :param stared: The stared of this Challenge.  # noqa: E501
        :type stared: bool
        :param supplier_tenant_id: The supplier_tenant_id of this Challenge.  # noqa: E501
        :type supplier_tenant_id: str
        :param resolution: The resolution of this Challenge.  # noqa: E501
        :type resolution: str
        :param demander_tenant_id: The demander_tenant_id of this Challenge.  # noqa: E501
        :type demander_tenant_id: str
        :param initial_number_of_shards: The initial_number_of_shards of this Challenge.  # noqa: E501
        :type initial_number_of_shards: int
        :param dataset_metadata: The dataset_metadata of this Challenge.  # noqa: E501
        :type dataset_metadata: ChallengeDatasetMetadata
        :param tag_type: The tag_type of this Challenge.  # noqa: E501
        :type tag_type: ShapeTypeEnum
        :param estimated_tags_per_media_item: The estimated_tags_per_media_item of this Challenge.  # noqa: E501
        :type estimated_tags_per_media_item: float
        :param node_taxonomy: The node_taxonomy of this Challenge.  # noqa: E501
        :type node_taxonomy: List[str]
        :param edge_taxonomy: The edge_taxonomy of this Challenge.  # noqa: E501
        :type edge_taxonomy: List[str]
        :param completion_percentages: The completion_percentages of this Challenge.  # noqa: E501
        :type completion_percentages: List[ChallengeCompletionPercentage]
        :param expiration: The expiration of this Challenge.  # noqa: E501
        :type expiration: int
        :param challenge_access_token: The challenge_access_token of this Challenge.  # noqa: E501
        :type challenge_access_token: str
        """
        self.openapi_types = {
            'challenge_id': str,
            'dataset_id': str,
            'evaluation_policy_id': str,
            'dispatch_policy_id': str,
            'creation_timestamp': datetime,
            'status': ChallengeStatusEnum,
            'access_type': ChallengeAccessTypeEnum,
            'tenant_role': ChallengeTenantRoleEnum,
            'name': str,
            'completion_percentage': int,
            'completion_percentage_for_collaborator': int,
            'description': str,
            'budget': float,
            'stared': bool,
            'supplier_tenant_id': str,
            'resolution': str,
            'demander_tenant_id': str,
            'initial_number_of_shards': int,
            'dataset_metadata': ChallengeDatasetMetadata,
            'tag_type': ShapeTypeEnum,
            'estimated_tags_per_media_item': float,
            'node_taxonomy': List[str],
            'edge_taxonomy': List[str],
            'completion_percentages': List[ChallengeCompletionPercentage],
            'expiration': int,
            'challenge_access_token': str
        }

        self.attribute_map = {
            'challenge_id': 'challengeId',
            'dataset_id': 'datasetId',
            'evaluation_policy_id': 'evaluationPolicyId',
            'dispatch_policy_id': 'dispatchPolicyId',
            'creation_timestamp': 'creationTimestamp',
            'status': 'status',
            'access_type': 'accessType',
            'tenant_role': 'tenantRole',
            'name': 'name',
            'completion_percentage': 'completionPercentage',
            'completion_percentage_for_collaborator': 'completionPercentageForCollaborator',
            'description': 'description',
            'budget': 'budget',
            'stared': 'stared',
            'supplier_tenant_id': 'supplierTenantId',
            'resolution': 'resolution',
            'demander_tenant_id': 'demanderTenantId',
            'initial_number_of_shards': 'initialNumberOfShards',
            'dataset_metadata': 'datasetMetadata',
            'tag_type': 'tagType',
            'estimated_tags_per_media_item': 'estimatedTagsPerMediaItem',
            'node_taxonomy': 'nodeTaxonomy',
            'edge_taxonomy': 'edgeTaxonomy',
            'completion_percentages': 'completionPercentages',
            'expiration': 'expiration',
            'challenge_access_token': 'challengeAccessToken'
        }

        self._challenge_id = challenge_id
        self._dataset_id = dataset_id
        self._evaluation_policy_id = evaluation_policy_id
        self._dispatch_policy_id = dispatch_policy_id
        self._creation_timestamp = creation_timestamp
        self._status = status
        self._access_type = access_type
        self._tenant_role = tenant_role
        self._name = name
        self._completion_percentage = completion_percentage
        self._completion_percentage_for_collaborator = completion_percentage_for_collaborator
        self._description = description
        self._budget = budget
        self._stared = stared
        self._supplier_tenant_id = supplier_tenant_id
        self._resolution = resolution
        self._demander_tenant_id = demander_tenant_id
        self._initial_number_of_shards = initial_number_of_shards
        self._dataset_metadata = dataset_metadata
        self._tag_type = tag_type
        self._estimated_tags_per_media_item = estimated_tags_per_media_item
        self._node_taxonomy = node_taxonomy
        self._edge_taxonomy = edge_taxonomy
        self._completion_percentages = completion_percentages
        self._expiration = expiration
        self._challenge_access_token = challenge_access_token

    @classmethod
    def from_dict(cls, dikt) -> 'Challenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Challenge of this Challenge.  # noqa: E501
        :rtype: Challenge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def challenge_id(self):
        """Gets the challenge_id of this Challenge.

        Alpha-numeric, unique id of challenge.   # noqa: E501

        :return: The challenge_id of this Challenge.
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this Challenge.

        Alpha-numeric, unique id of challenge.   # noqa: E501

        :param challenge_id: The challenge_id of this Challenge.
        :type challenge_id: str
        """

        self._challenge_id = challenge_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Challenge.

        Alpha-numeric, unique id of dataset  # noqa: E501

        :return: The dataset_id of this Challenge.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Challenge.

        Alpha-numeric, unique id of dataset  # noqa: E501

        :param dataset_id: The dataset_id of this Challenge.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def evaluation_policy_id(self):
        """Gets the evaluation_policy_id of this Challenge.

        Alpha-numeric, unique id of evaluation policy  # noqa: E501

        :return: The evaluation_policy_id of this Challenge.
        :rtype: str
        """
        return self._evaluation_policy_id

    @evaluation_policy_id.setter
    def evaluation_policy_id(self, evaluation_policy_id):
        """Sets the evaluation_policy_id of this Challenge.

        Alpha-numeric, unique id of evaluation policy  # noqa: E501

        :param evaluation_policy_id: The evaluation_policy_id of this Challenge.
        :type evaluation_policy_id: str
        """

        self._evaluation_policy_id = evaluation_policy_id

    @property
    def dispatch_policy_id(self):
        """Gets the dispatch_policy_id of this Challenge.

        Alpha-numeric, unique id of dispatch policy  # noqa: E501

        :return: The dispatch_policy_id of this Challenge.
        :rtype: str
        """
        return self._dispatch_policy_id

    @dispatch_policy_id.setter
    def dispatch_policy_id(self, dispatch_policy_id):
        """Sets the dispatch_policy_id of this Challenge.

        Alpha-numeric, unique id of dispatch policy  # noqa: E501

        :param dispatch_policy_id: The dispatch_policy_id of this Challenge.
        :type dispatch_policy_id: str
        """

        self._dispatch_policy_id = dispatch_policy_id

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this Challenge.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :return: The creation_timestamp of this Challenge.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this Challenge.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this Challenge.
        :type creation_timestamp: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def status(self):
        """Gets the status of this Challenge.


        :return: The status of this Challenge.
        :rtype: ChallengeStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Challenge.


        :param status: The status of this Challenge.
        :type status: ChallengeStatusEnum
        """

        self._status = status

    @property
    def access_type(self):
        """Gets the access_type of this Challenge.


        :return: The access_type of this Challenge.
        :rtype: ChallengeAccessTypeEnum
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this Challenge.


        :param access_type: The access_type of this Challenge.
        :type access_type: ChallengeAccessTypeEnum
        """
        if access_type is None:
            raise ValueError("Invalid value for `access_type`, must not be `None`")  # noqa: E501

        self._access_type = access_type

    @property
    def tenant_role(self):
        """Gets the tenant_role of this Challenge.


        :return: The tenant_role of this Challenge.
        :rtype: ChallengeTenantRoleEnum
        """
        return self._tenant_role

    @tenant_role.setter
    def tenant_role(self, tenant_role):
        """Sets the tenant_role of this Challenge.


        :param tenant_role: The tenant_role of this Challenge.
        :type tenant_role: ChallengeTenantRoleEnum
        """

        self._tenant_role = tenant_role

    @property
    def name(self):
        """Gets the name of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The name of this Challenge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param name: The name of this Challenge.
        :type name: str
        """

        self._name = name

    @property
    def completion_percentage(self):
        """Gets the completion_percentage of this Challenge.

        completion percentage of a challenge  # noqa: E501

        :return: The completion_percentage of this Challenge.
        :rtype: int
        """
        return self._completion_percentage

    @completion_percentage.setter
    def completion_percentage(self, completion_percentage):
        """Sets the completion_percentage of this Challenge.

        completion percentage of a challenge  # noqa: E501

        :param completion_percentage: The completion_percentage of this Challenge.
        :type completion_percentage: int
        """

        self._completion_percentage = completion_percentage

    @property
    def completion_percentage_for_collaborator(self):
        """Gets the completion_percentage_for_collaborator of this Challenge.

        completion percentage of a challenge for a collaborator  # noqa: E501

        :return: The completion_percentage_for_collaborator of this Challenge.
        :rtype: int
        """
        return self._completion_percentage_for_collaborator

    @completion_percentage_for_collaborator.setter
    def completion_percentage_for_collaborator(self, completion_percentage_for_collaborator):
        """Sets the completion_percentage_for_collaborator of this Challenge.

        completion percentage of a challenge for a collaborator  # noqa: E501

        :param completion_percentage_for_collaborator: The completion_percentage_for_collaborator of this Challenge.
        :type completion_percentage_for_collaborator: int
        """

        self._completion_percentage_for_collaborator = completion_percentage_for_collaborator

    @property
    def description(self):
        """Gets the description of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The description of this Challenge.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param description: The description of this Challenge.
        :type description: str
        """

        self._description = description

    @property
    def budget(self):
        """Gets the budget of this Challenge.

        budget allocated for challenge  # noqa: E501

        :return: The budget of this Challenge.
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this Challenge.

        budget allocated for challenge  # noqa: E501

        :param budget: The budget of this Challenge.
        :type budget: float
        """

        self._budget = budget

    @property
    def stared(self):
        """Gets the stared of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The stared of this Challenge.
        :rtype: bool
        """
        return self._stared

    @stared.setter
    def stared(self, stared):
        """Sets the stared of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param stared: The stared of this Challenge.
        :type stared: bool
        """

        self._stared = stared

    @property
    def supplier_tenant_id(self):
        """Gets the supplier_tenant_id of this Challenge.

        [TBD] Alpha-numeric, name of supplierTenantId  # noqa: E501

        :return: The supplier_tenant_id of this Challenge.
        :rtype: str
        """
        return self._supplier_tenant_id

    @supplier_tenant_id.setter
    def supplier_tenant_id(self, supplier_tenant_id):
        """Sets the supplier_tenant_id of this Challenge.

        [TBD] Alpha-numeric, name of supplierTenantId  # noqa: E501

        :param supplier_tenant_id: The supplier_tenant_id of this Challenge.
        :type supplier_tenant_id: str
        """

        self._supplier_tenant_id = supplier_tenant_id

    @property
    def resolution(self):
        """Gets the resolution of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The resolution of this Challenge.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Challenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param resolution: The resolution of this Challenge.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def demander_tenant_id(self):
        """Gets the demander_tenant_id of this Challenge.

        [TBD] Alpha-numeric, name of demanderTenantId  # noqa: E501

        :return: The demander_tenant_id of this Challenge.
        :rtype: str
        """
        return self._demander_tenant_id

    @demander_tenant_id.setter
    def demander_tenant_id(self, demander_tenant_id):
        """Sets the demander_tenant_id of this Challenge.

        [TBD] Alpha-numeric, name of demanderTenantId  # noqa: E501

        :param demander_tenant_id: The demander_tenant_id of this Challenge.
        :type demander_tenant_id: str
        """

        self._demander_tenant_id = demander_tenant_id

    @property
    def initial_number_of_shards(self):
        """Gets the initial_number_of_shards of this Challenge.

        shards in dataset  # noqa: E501

        :return: The initial_number_of_shards of this Challenge.
        :rtype: int
        """
        return self._initial_number_of_shards

    @initial_number_of_shards.setter
    def initial_number_of_shards(self, initial_number_of_shards):
        """Sets the initial_number_of_shards of this Challenge.

        shards in dataset  # noqa: E501

        :param initial_number_of_shards: The initial_number_of_shards of this Challenge.
        :type initial_number_of_shards: int
        """

        self._initial_number_of_shards = initial_number_of_shards

    @property
    def dataset_metadata(self):
        """Gets the dataset_metadata of this Challenge.


        :return: The dataset_metadata of this Challenge.
        :rtype: ChallengeDatasetMetadata
        """
        return self._dataset_metadata

    @dataset_metadata.setter
    def dataset_metadata(self, dataset_metadata):
        """Sets the dataset_metadata of this Challenge.


        :param dataset_metadata: The dataset_metadata of this Challenge.
        :type dataset_metadata: ChallengeDatasetMetadata
        """

        self._dataset_metadata = dataset_metadata

    @property
    def tag_type(self):
        """Gets the tag_type of this Challenge.


        :return: The tag_type of this Challenge.
        :rtype: ShapeTypeEnum
        """
        return self._tag_type

    @tag_type.setter
    def tag_type(self, tag_type):
        """Sets the tag_type of this Challenge.


        :param tag_type: The tag_type of this Challenge.
        :type tag_type: ShapeTypeEnum
        """

        self._tag_type = tag_type

    @property
    def estimated_tags_per_media_item(self):
        """Gets the estimated_tags_per_media_item of this Challenge.

        estimated Tags Per Media Item  # noqa: E501

        :return: The estimated_tags_per_media_item of this Challenge.
        :rtype: float
        """
        return self._estimated_tags_per_media_item

    @estimated_tags_per_media_item.setter
    def estimated_tags_per_media_item(self, estimated_tags_per_media_item):
        """Sets the estimated_tags_per_media_item of this Challenge.

        estimated Tags Per Media Item  # noqa: E501

        :param estimated_tags_per_media_item: The estimated_tags_per_media_item of this Challenge.
        :type estimated_tags_per_media_item: float
        """

        self._estimated_tags_per_media_item = estimated_tags_per_media_item

    @property
    def node_taxonomy(self):
        """Gets the node_taxonomy of this Challenge.

        taxonomy list for nodeType  # noqa: E501

        :return: The node_taxonomy of this Challenge.
        :rtype: List[str]
        """
        return self._node_taxonomy

    @node_taxonomy.setter
    def node_taxonomy(self, node_taxonomy):
        """Sets the node_taxonomy of this Challenge.

        taxonomy list for nodeType  # noqa: E501

        :param node_taxonomy: The node_taxonomy of this Challenge.
        :type node_taxonomy: List[str]
        """

        self._node_taxonomy = node_taxonomy

    @property
    def edge_taxonomy(self):
        """Gets the edge_taxonomy of this Challenge.

        taxonomy list for edgeType  # noqa: E501

        :return: The edge_taxonomy of this Challenge.
        :rtype: List[str]
        """
        return self._edge_taxonomy

    @edge_taxonomy.setter
    def edge_taxonomy(self, edge_taxonomy):
        """Sets the edge_taxonomy of this Challenge.

        taxonomy list for edgeType  # noqa: E501

        :param edge_taxonomy: The edge_taxonomy of this Challenge.
        :type edge_taxonomy: List[str]
        """

        self._edge_taxonomy = edge_taxonomy

    @property
    def completion_percentages(self):
        """Gets the completion_percentages of this Challenge.


        :return: The completion_percentages of this Challenge.
        :rtype: List[ChallengeCompletionPercentage]
        """
        return self._completion_percentages

    @completion_percentages.setter
    def completion_percentages(self, completion_percentages):
        """Sets the completion_percentages of this Challenge.


        :param completion_percentages: The completion_percentages of this Challenge.
        :type completion_percentages: List[ChallengeCompletionPercentage]
        """

        self._completion_percentages = completion_percentages

    @property
    def expiration(self):
        """Gets the expiration of this Challenge.

        hours until the challenge is expired  # noqa: E501

        :return: The expiration of this Challenge.
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this Challenge.

        hours until the challenge is expired  # noqa: E501

        :param expiration: The expiration of this Challenge.
        :type expiration: int
        """

        self._expiration = expiration

    @property
    def challenge_access_token(self):
        """Gets the challenge_access_token of this Challenge.

        Token for accessing the challenge  # noqa: E501

        :return: The challenge_access_token of this Challenge.
        :rtype: str
        """
        return self._challenge_access_token

    @challenge_access_token.setter
    def challenge_access_token(self, challenge_access_token):
        """Sets the challenge_access_token of this Challenge.

        Token for accessing the challenge  # noqa: E501

        :param challenge_access_token: The challenge_access_token of this Challenge.
        :type challenge_access_token: str
        """

        self._challenge_access_token = challenge_access_token
