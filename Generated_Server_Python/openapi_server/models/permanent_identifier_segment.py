# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PermanentIdentifierSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding=None, index=None, weight=None, assignment_function=None, value=None):  # noqa: E501
        """PermanentIdentifierSegment - a model defined in OpenAPI

        :param encoding: The encoding of this PermanentIdentifierSegment.  # noqa: E501
        :type encoding: str
        :param index: The index of this PermanentIdentifierSegment.  # noqa: E501
        :type index: int
        :param weight: The weight of this PermanentIdentifierSegment.  # noqa: E501
        :type weight: float
        :param assignment_function: The assignment_function of this PermanentIdentifierSegment.  # noqa: E501
        :type assignment_function: str
        :param value: The value of this PermanentIdentifierSegment.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'encoding': str,
            'index': int,
            'weight': float,
            'assignment_function': str,
            'value': str
        }

        self.attribute_map = {
            'encoding': 'encoding',
            'index': 'index',
            'weight': 'weight',
            'assignment_function': 'assignmentFunction',
            'value': 'value'
        }

        self._encoding = encoding
        self._index = index
        self._weight = weight
        self._assignment_function = assignment_function
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'PermanentIdentifierSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PermanentIdentifierSegment of this PermanentIdentifierSegment.  # noqa: E501
        :rtype: PermanentIdentifierSegment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding(self):
        """Gets the encoding of this PermanentIdentifierSegment.

        The encoding used for deserializing the value, before distance and identity functions can be computed  # noqa: E501

        :return: The encoding of this PermanentIdentifierSegment.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this PermanentIdentifierSegment.

        The encoding used for deserializing the value, before distance and identity functions can be computed  # noqa: E501

        :param encoding: The encoding of this PermanentIdentifierSegment.
        :type encoding: str
        """
        allowed_values = ["json-array", "base64-binary-float", "base64-binary-double", "base64-binary-int32", "base64-binary-int64", "text-ascii", "text-unicode"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def index(self):
        """Gets the index of this PermanentIdentifierSegment.

        The index of the segment, so as to guarantee strict ordering of segment comparison  # noqa: E501

        :return: The index of this PermanentIdentifierSegment.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this PermanentIdentifierSegment.

        The index of the segment, so as to guarantee strict ordering of segment comparison  # noqa: E501

        :param index: The index of this PermanentIdentifierSegment.
        :type index: int
        """

        self._index = index

    @property
    def weight(self):
        """Gets the weight of this PermanentIdentifierSegment.

        The weight of the distance in the total distance  # noqa: E501

        :return: The weight of this PermanentIdentifierSegment.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this PermanentIdentifierSegment.

        The weight of the distance in the total distance  # noqa: E501

        :param weight: The weight of this PermanentIdentifierSegment.
        :type weight: float
        """

        self._weight = weight

    @property
    def assignment_function(self):
        """Gets the assignment_function of this PermanentIdentifierSegment.

        The hashcode obtained by running a SHA-512 on the binary values of the segments, in their order.   # noqa: E501

        :return: The assignment_function of this PermanentIdentifierSegment.
        :rtype: str
        """
        return self._assignment_function

    @assignment_function.setter
    def assignment_function(self, assignment_function):
        """Sets the assignment_function of this PermanentIdentifierSegment.

        The hashcode obtained by running a SHA-512 on the binary values of the segments, in their order.   # noqa: E501

        :param assignment_function: The assignment_function of this PermanentIdentifierSegment.
        :type assignment_function: str
        """
        allowed_values = ["hashed-from-data", "machine-random-uniform", "machine-timestamp", "machine-identifier", "remote-timestamp", "remote-generated", "entity-identifier-ledger", "enforced-unique-ledger", "sequential-enforced-volatile-ledger", "sequential-enforced-persistent-ledger"]  # noqa: E501
        if assignment_function not in allowed_values:
            raise ValueError(
                "Invalid value for `assignment_function` ({0}), must be one of {1}"
                .format(assignment_function, allowed_values)
            )

        self._assignment_function = assignment_function

    @property
    def value(self):
        """Gets the value of this PermanentIdentifierSegment.

        The serialized value of the segment  # noqa: E501

        :return: The value of this PermanentIdentifierSegment.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PermanentIdentifierSegment.

        The serialized value of the segment  # noqa: E501

        :param value: The value of this PermanentIdentifierSegment.
        :type value: str
        """

        self._value = value
