# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.point2_d import Point2D
from openapi_server import util

from openapi_server.models.point2_d import Point2D  # noqa: E501

class Shape2DPolygonAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, points=None):  # noqa: E501
        """Shape2DPolygonAllOf - a model defined in OpenAPI

        :param points: The points of this Shape2DPolygonAllOf.  # noqa: E501
        :type points: List[Point2D]
        """
        self.openapi_types = {
            'points': List[Point2D]
        }

        self.attribute_map = {
            'points': 'points'
        }

        self._points = points

    @classmethod
    def from_dict(cls, dikt) -> 'Shape2DPolygonAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Shape2DPolygon_allOf of this Shape2DPolygonAllOf.  # noqa: E501
        :rtype: Shape2DPolygonAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def points(self):
        """Gets the points of this Shape2DPolygonAllOf.


        :return: The points of this Shape2DPolygonAllOf.
        :rtype: List[Point2D]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Shape2DPolygonAllOf.


        :param points: The points of this Shape2DPolygonAllOf.
        :type points: List[Point2D]
        """

        self._points = points
