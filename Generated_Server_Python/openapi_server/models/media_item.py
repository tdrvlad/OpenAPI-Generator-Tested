# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.image import Image
from openapi_server.models.media_descriptor import MediaDescriptor
from openapi_server.models.sharding_descriptor import ShardingDescriptor
from openapi_server import util

from openapi_server.models.image import Image  # noqa: E501
from openapi_server.models.media_descriptor import MediaDescriptor  # noqa: E501
from openapi_server.models.sharding_descriptor import ShardingDescriptor  # noqa: E501

class MediaItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_item_id=None, type=None, format=None, descriptor=None, sharding=None, image=None):  # noqa: E501
        """MediaItem - a model defined in OpenAPI

        :param media_item_id: The media_item_id of this MediaItem.  # noqa: E501
        :type media_item_id: str
        :param type: The type of this MediaItem.  # noqa: E501
        :type type: str
        :param format: The format of this MediaItem.  # noqa: E501
        :type format: str
        :param descriptor: The descriptor of this MediaItem.  # noqa: E501
        :type descriptor: MediaDescriptor
        :param sharding: The sharding of this MediaItem.  # noqa: E501
        :type sharding: ShardingDescriptor
        :param image: The image of this MediaItem.  # noqa: E501
        :type image: Image
        """
        self.openapi_types = {
            'media_item_id': str,
            'type': str,
            'format': str,
            'descriptor': MediaDescriptor,
            'sharding': ShardingDescriptor,
            'image': Image
        }

        self.attribute_map = {
            'media_item_id': 'mediaItemId',
            'type': 'type',
            'format': 'format',
            'descriptor': 'descriptor',
            'sharding': 'sharding',
            'image': 'image'
        }

        self._media_item_id = media_item_id
        self._type = type
        self._format = format
        self._descriptor = descriptor
        self._sharding = sharding
        self._image = image

    @classmethod
    def from_dict(cls, dikt) -> 'MediaItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaItem of this MediaItem.  # noqa: E501
        :rtype: MediaItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_item_id(self):
        """Gets the media_item_id of this MediaItem.

        [TBD] Alpha-numeric, unique id of media item  # noqa: E501

        :return: The media_item_id of this MediaItem.
        :rtype: str
        """
        return self._media_item_id

    @media_item_id.setter
    def media_item_id(self, media_item_id):
        """Sets the media_item_id of this MediaItem.

        [TBD] Alpha-numeric, unique id of media item  # noqa: E501

        :param media_item_id: The media_item_id of this MediaItem.
        :type media_item_id: str
        """

        self._media_item_id = media_item_id

    @property
    def type(self):
        """Gets the type of this MediaItem.


        :return: The type of this MediaItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MediaItem.


        :param type: The type of this MediaItem.
        :type type: str
        """
        allowed_values = ["rgb-static-photo", "rgb-live-photo", "rgb-video", "audio-rgb-video", "audio-only", "text"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def format(self):
        """Gets the format of this MediaItem.


        :return: The format of this MediaItem.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MediaItem.


        :param format: The format of this MediaItem.
        :type format: str
        """
        allowed_values = ["image/heif", "image/heic", "image/heif-sequence", "image/jpeg", "image/png", "video/mp4", "video/3gpp", "video/quicktime", "video/x-msvideo", "video/x-ms-wmv"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def descriptor(self):
        """Gets the descriptor of this MediaItem.


        :return: The descriptor of this MediaItem.
        :rtype: MediaDescriptor
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this MediaItem.


        :param descriptor: The descriptor of this MediaItem.
        :type descriptor: MediaDescriptor
        """

        self._descriptor = descriptor

    @property
    def sharding(self):
        """Gets the sharding of this MediaItem.


        :return: The sharding of this MediaItem.
        :rtype: ShardingDescriptor
        """
        return self._sharding

    @sharding.setter
    def sharding(self, sharding):
        """Sets the sharding of this MediaItem.


        :param sharding: The sharding of this MediaItem.
        :type sharding: ShardingDescriptor
        """

        self._sharding = sharding

    @property
    def image(self):
        """Gets the image of this MediaItem.


        :return: The image of this MediaItem.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this MediaItem.


        :param image: The image of this MediaItem.
        :type image: Image
        """

        self._image = image
