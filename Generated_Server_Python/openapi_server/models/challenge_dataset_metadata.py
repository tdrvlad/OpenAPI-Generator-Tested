# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ChallengeDatasetMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, media_items=None, number_of_shards=None):  # noqa: E501
        """ChallengeDatasetMetadata - a model defined in OpenAPI

        :param name: The name of this ChallengeDatasetMetadata.  # noqa: E501
        :type name: str
        :param media_items: The media_items of this ChallengeDatasetMetadata.  # noqa: E501
        :type media_items: int
        :param number_of_shards: The number_of_shards of this ChallengeDatasetMetadata.  # noqa: E501
        :type number_of_shards: int
        """
        self.openapi_types = {
            'name': str,
            'media_items': int,
            'number_of_shards': int
        }

        self.attribute_map = {
            'name': 'name',
            'media_items': 'mediaItems',
            'number_of_shards': 'numberOfShards'
        }

        self._name = name
        self._media_items = media_items
        self._number_of_shards = number_of_shards

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeDatasetMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Challenge_datasetMetadata of this ChallengeDatasetMetadata.  # noqa: E501
        :rtype: ChallengeDatasetMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ChallengeDatasetMetadata.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The name of this ChallengeDatasetMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChallengeDatasetMetadata.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param name: The name of this ChallengeDatasetMetadata.
        :type name: str
        """

        self._name = name

    @property
    def media_items(self):
        """Gets the media_items of this ChallengeDatasetMetadata.

        estimated Tags Per Media Item  # noqa: E501

        :return: The media_items of this ChallengeDatasetMetadata.
        :rtype: int
        """
        return self._media_items

    @media_items.setter
    def media_items(self, media_items):
        """Sets the media_items of this ChallengeDatasetMetadata.

        estimated Tags Per Media Item  # noqa: E501

        :param media_items: The media_items of this ChallengeDatasetMetadata.
        :type media_items: int
        """

        self._media_items = media_items

    @property
    def number_of_shards(self):
        """Gets the number_of_shards of this ChallengeDatasetMetadata.

        shards in dataset  # noqa: E501

        :return: The number_of_shards of this ChallengeDatasetMetadata.
        :rtype: int
        """
        return self._number_of_shards

    @number_of_shards.setter
    def number_of_shards(self, number_of_shards):
        """Sets the number_of_shards of this ChallengeDatasetMetadata.

        shards in dataset  # noqa: E501

        :param number_of_shards: The number_of_shards of this ChallengeDatasetMetadata.
        :type number_of_shards: int
        """

        self._number_of_shards = number_of_shards
