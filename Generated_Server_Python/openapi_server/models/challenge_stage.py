# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.life_form_enum import LifeFormEnum
from openapi_server import util

from openapi_server.models.life_form_enum import LifeFormEnum  # noqa: E501

class ChallengeStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stage_number=None, percentage=None, operator=None):  # noqa: E501
        """ChallengeStage - a model defined in OpenAPI

        :param stage_number: The stage_number of this ChallengeStage.  # noqa: E501
        :type stage_number: int
        :param percentage: The percentage of this ChallengeStage.  # noqa: E501
        :type percentage: int
        :param operator: The operator of this ChallengeStage.  # noqa: E501
        :type operator: LifeFormEnum
        """
        self.openapi_types = {
            'stage_number': int,
            'percentage': int,
            'operator': LifeFormEnum
        }

        self.attribute_map = {
            'stage_number': 'stageNumber',
            'percentage': 'percentage',
            'operator': 'operator'
        }

        self._stage_number = stage_number
        self._percentage = percentage
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeStage of this ChallengeStage.  # noqa: E501
        :rtype: ChallengeStage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stage_number(self):
        """Gets the stage_number of this ChallengeStage.

        stage number  # noqa: E501

        :return: The stage_number of this ChallengeStage.
        :rtype: int
        """
        return self._stage_number

    @stage_number.setter
    def stage_number(self, stage_number):
        """Sets the stage_number of this ChallengeStage.

        stage number  # noqa: E501

        :param stage_number: The stage_number of this ChallengeStage.
        :type stage_number: int
        """

        self._stage_number = stage_number

    @property
    def percentage(self):
        """Gets the percentage of this ChallengeStage.

        completion percentage for this stage  # noqa: E501

        :return: The percentage of this ChallengeStage.
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this ChallengeStage.

        completion percentage for this stage  # noqa: E501

        :param percentage: The percentage of this ChallengeStage.
        :type percentage: int
        """

        self._percentage = percentage

    @property
    def operator(self):
        """Gets the operator of this ChallengeStage.


        :return: The operator of this ChallengeStage.
        :rtype: LifeFormEnum
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this ChallengeStage.


        :param operator: The operator of this ChallengeStage.
        :type operator: LifeFormEnum
        """

        self._operator = operator
