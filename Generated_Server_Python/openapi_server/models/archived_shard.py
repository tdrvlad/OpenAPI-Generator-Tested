# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ArchivedShard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, challenge_id=None, shard=None, archive_name=None, creation_timestamp=None, last_update_timestamp=None, archive_completion_percentage=None, current_completion_percentage=None):  # noqa: E501
        """ArchivedShard - a model defined in OpenAPI

        :param challenge_id: The challenge_id of this ArchivedShard.  # noqa: E501
        :type challenge_id: str
        :param shard: The shard of this ArchivedShard.  # noqa: E501
        :type shard: int
        :param archive_name: The archive_name of this ArchivedShard.  # noqa: E501
        :type archive_name: str
        :param creation_timestamp: The creation_timestamp of this ArchivedShard.  # noqa: E501
        :type creation_timestamp: datetime
        :param last_update_timestamp: The last_update_timestamp of this ArchivedShard.  # noqa: E501
        :type last_update_timestamp: datetime
        :param archive_completion_percentage: The archive_completion_percentage of this ArchivedShard.  # noqa: E501
        :type archive_completion_percentage: float
        :param current_completion_percentage: The current_completion_percentage of this ArchivedShard.  # noqa: E501
        :type current_completion_percentage: float
        """
        self.openapi_types = {
            'challenge_id': str,
            'shard': int,
            'archive_name': str,
            'creation_timestamp': datetime,
            'last_update_timestamp': datetime,
            'archive_completion_percentage': float,
            'current_completion_percentage': float
        }

        self.attribute_map = {
            'challenge_id': 'challengeId',
            'shard': 'shard',
            'archive_name': 'archiveName',
            'creation_timestamp': 'creationTimestamp',
            'last_update_timestamp': 'lastUpdateTimestamp',
            'archive_completion_percentage': 'archiveCompletionPercentage',
            'current_completion_percentage': 'currentCompletionPercentage'
        }

        self._challenge_id = challenge_id
        self._shard = shard
        self._archive_name = archive_name
        self._creation_timestamp = creation_timestamp
        self._last_update_timestamp = last_update_timestamp
        self._archive_completion_percentage = archive_completion_percentage
        self._current_completion_percentage = current_completion_percentage

    @classmethod
    def from_dict(cls, dikt) -> 'ArchivedShard':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ArchivedShard of this ArchivedShard.  # noqa: E501
        :rtype: ArchivedShard
        """
        return util.deserialize_model(dikt, cls)

    @property
    def challenge_id(self):
        """Gets the challenge_id of this ArchivedShard.

        Alpha-numeric, unique id of challenge.   # noqa: E501

        :return: The challenge_id of this ArchivedShard.
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this ArchivedShard.

        Alpha-numeric, unique id of challenge.   # noqa: E501

        :param challenge_id: The challenge_id of this ArchivedShard.
        :type challenge_id: str
        """

        self._challenge_id = challenge_id

    @property
    def shard(self):
        """Gets the shard of this ArchivedShard.

        TBD  # noqa: E501

        :return: The shard of this ArchivedShard.
        :rtype: int
        """
        return self._shard

    @shard.setter
    def shard(self, shard):
        """Sets the shard of this ArchivedShard.

        TBD  # noqa: E501

        :param shard: The shard of this ArchivedShard.
        :type shard: int
        """

        self._shard = shard

    @property
    def archive_name(self):
        """Gets the archive_name of this ArchivedShard.

        name of the archived shard  # noqa: E501

        :return: The archive_name of this ArchivedShard.
        :rtype: str
        """
        return self._archive_name

    @archive_name.setter
    def archive_name(self, archive_name):
        """Sets the archive_name of this ArchivedShard.

        name of the archived shard  # noqa: E501

        :param archive_name: The archive_name of this ArchivedShard.
        :type archive_name: str
        """

        self._archive_name = archive_name

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ArchivedShard.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :return: The creation_timestamp of this ArchivedShard.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ArchivedShard.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this ArchivedShard.
        :type creation_timestamp: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this ArchivedShard.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :return: The last_update_timestamp of this ArchivedShard.
        :rtype: datetime
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this ArchivedShard.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this ArchivedShard.
        :type last_update_timestamp: datetime
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def archive_completion_percentage(self):
        """Gets the archive_completion_percentage of this ArchivedShard.

        completion percentage of a challenge  # noqa: E501

        :return: The archive_completion_percentage of this ArchivedShard.
        :rtype: float
        """
        return self._archive_completion_percentage

    @archive_completion_percentage.setter
    def archive_completion_percentage(self, archive_completion_percentage):
        """Sets the archive_completion_percentage of this ArchivedShard.

        completion percentage of a challenge  # noqa: E501

        :param archive_completion_percentage: The archive_completion_percentage of this ArchivedShard.
        :type archive_completion_percentage: float
        """

        self._archive_completion_percentage = archive_completion_percentage

    @property
    def current_completion_percentage(self):
        """Gets the current_completion_percentage of this ArchivedShard.

        completion percentage of a challenge  # noqa: E501

        :return: The current_completion_percentage of this ArchivedShard.
        :rtype: float
        """
        return self._current_completion_percentage

    @current_completion_percentage.setter
    def current_completion_percentage(self, current_completion_percentage):
        """Sets the current_completion_percentage of this ArchivedShard.

        completion percentage of a challenge  # noqa: E501

        :param current_completion_percentage: The current_completion_percentage of this ArchivedShard.
        :type current_completion_percentage: float
        """

        self._current_completion_percentage = current_completion_percentage
