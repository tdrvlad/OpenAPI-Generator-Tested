# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DispatchPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dispatch_policy_id=None, name=None, number_of_users=None, media_item_lock_timeout=None):  # noqa: E501
        """DispatchPolicy - a model defined in OpenAPI

        :param dispatch_policy_id: The dispatch_policy_id of this DispatchPolicy.  # noqa: E501
        :type dispatch_policy_id: str
        :param name: The name of this DispatchPolicy.  # noqa: E501
        :type name: str
        :param number_of_users: The number_of_users of this DispatchPolicy.  # noqa: E501
        :type number_of_users: int
        :param media_item_lock_timeout: The media_item_lock_timeout of this DispatchPolicy.  # noqa: E501
        :type media_item_lock_timeout: int
        """
        self.openapi_types = {
            'dispatch_policy_id': str,
            'name': str,
            'number_of_users': int,
            'media_item_lock_timeout': int
        }

        self.attribute_map = {
            'dispatch_policy_id': 'dispatchPolicyId',
            'name': 'name',
            'number_of_users': 'numberOfUsers',
            'media_item_lock_timeout': 'mediaItemLockTimeout'
        }

        self._dispatch_policy_id = dispatch_policy_id
        self._name = name
        self._number_of_users = number_of_users
        self._media_item_lock_timeout = media_item_lock_timeout

    @classmethod
    def from_dict(cls, dikt) -> 'DispatchPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DispatchPolicy of this DispatchPolicy.  # noqa: E501
        :rtype: DispatchPolicy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dispatch_policy_id(self):
        """Gets the dispatch_policy_id of this DispatchPolicy.

        Unique ID of dispatch policy  # noqa: E501

        :return: The dispatch_policy_id of this DispatchPolicy.
        :rtype: str
        """
        return self._dispatch_policy_id

    @dispatch_policy_id.setter
    def dispatch_policy_id(self, dispatch_policy_id):
        """Sets the dispatch_policy_id of this DispatchPolicy.

        Unique ID of dispatch policy  # noqa: E501

        :param dispatch_policy_id: The dispatch_policy_id of this DispatchPolicy.
        :type dispatch_policy_id: str
        """

        self._dispatch_policy_id = dispatch_policy_id

    @property
    def name(self):
        """Gets the name of this DispatchPolicy.

        name  # noqa: E501

        :return: The name of this DispatchPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DispatchPolicy.

        name  # noqa: E501

        :param name: The name of this DispatchPolicy.
        :type name: str
        """

        self._name = name

    @property
    def number_of_users(self):
        """Gets the number_of_users of this DispatchPolicy.

        Number of users that are assigned the same task  # noqa: E501

        :return: The number_of_users of this DispatchPolicy.
        :rtype: int
        """
        return self._number_of_users

    @number_of_users.setter
    def number_of_users(self, number_of_users):
        """Sets the number_of_users of this DispatchPolicy.

        Number of users that are assigned the same task  # noqa: E501

        :param number_of_users: The number_of_users of this DispatchPolicy.
        :type number_of_users: int
        """

        self._number_of_users = number_of_users

    @property
    def media_item_lock_timeout(self):
        """Gets the media_item_lock_timeout of this DispatchPolicy.

        Time to wait before assign the same mediaItem to other user  # noqa: E501

        :return: The media_item_lock_timeout of this DispatchPolicy.
        :rtype: int
        """
        return self._media_item_lock_timeout

    @media_item_lock_timeout.setter
    def media_item_lock_timeout(self, media_item_lock_timeout):
        """Sets the media_item_lock_timeout of this DispatchPolicy.

        Time to wait before assign the same mediaItem to other user  # noqa: E501

        :param media_item_lock_timeout: The media_item_lock_timeout of this DispatchPolicy.
        :type media_item_lock_timeout: int
        """

        self._media_item_lock_timeout = media_item_lock_timeout
