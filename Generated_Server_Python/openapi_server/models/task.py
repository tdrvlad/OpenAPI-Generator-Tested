# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.edge import Edge
from openapi_server.models.image import Image
from openapi_server.models.tag import Tag
from openapi_server.models.task_resolution import TaskResolution
from openapi_server import util

from openapi_server.models.edge import Edge  # noqa: E501
from openapi_server.models.image import Image  # noqa: E501
from openapi_server.models.tag import Tag  # noqa: E501
from openapi_server.models.task_resolution import TaskResolution  # noqa: E501

class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id=None, avatar_id=None, challenge_id=None, attempt_sequence_number=None, generation_timestamp=None, submission_timestamp=None, image=None, evaluation_status=None, challenge_name=None, challenge_description=None, tags=None, edges=None, resolution=None):  # noqa: E501
        """Task - a model defined in OpenAPI

        :param task_id: The task_id of this Task.  # noqa: E501
        :type task_id: str
        :param avatar_id: The avatar_id of this Task.  # noqa: E501
        :type avatar_id: str
        :param challenge_id: The challenge_id of this Task.  # noqa: E501
        :type challenge_id: str
        :param attempt_sequence_number: The attempt_sequence_number of this Task.  # noqa: E501
        :type attempt_sequence_number: int
        :param generation_timestamp: The generation_timestamp of this Task.  # noqa: E501
        :type generation_timestamp: datetime
        :param submission_timestamp: The submission_timestamp of this Task.  # noqa: E501
        :type submission_timestamp: datetime
        :param image: The image of this Task.  # noqa: E501
        :type image: Image
        :param evaluation_status: The evaluation_status of this Task.  # noqa: E501
        :type evaluation_status: str
        :param challenge_name: The challenge_name of this Task.  # noqa: E501
        :type challenge_name: str
        :param challenge_description: The challenge_description of this Task.  # noqa: E501
        :type challenge_description: str
        :param tags: The tags of this Task.  # noqa: E501
        :type tags: List[Tag]
        :param edges: The edges of this Task.  # noqa: E501
        :type edges: List[Edge]
        :param resolution: The resolution of this Task.  # noqa: E501
        :type resolution: TaskResolution
        """
        self.openapi_types = {
            'task_id': str,
            'avatar_id': str,
            'challenge_id': str,
            'attempt_sequence_number': int,
            'generation_timestamp': datetime,
            'submission_timestamp': datetime,
            'image': Image,
            'evaluation_status': str,
            'challenge_name': str,
            'challenge_description': str,
            'tags': List[Tag],
            'edges': List[Edge],
            'resolution': TaskResolution
        }

        self.attribute_map = {
            'task_id': 'taskId',
            'avatar_id': 'avatarId',
            'challenge_id': 'challengeId',
            'attempt_sequence_number': 'attemptSequenceNumber',
            'generation_timestamp': 'generationTimestamp',
            'submission_timestamp': 'submissionTimestamp',
            'image': 'image',
            'evaluation_status': 'evaluationStatus',
            'challenge_name': 'challengeName',
            'challenge_description': 'challengeDescription',
            'tags': 'tags',
            'edges': 'edges',
            'resolution': 'resolution'
        }

        self._task_id = task_id
        self._avatar_id = avatar_id
        self._challenge_id = challenge_id
        self._attempt_sequence_number = attempt_sequence_number
        self._generation_timestamp = generation_timestamp
        self._submission_timestamp = submission_timestamp
        self._image = image
        self._evaluation_status = evaluation_status
        self._challenge_name = challenge_name
        self._challenge_description = challenge_description
        self._tags = tags
        self._edges = edges
        self._resolution = resolution

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self):
        """Gets the task_id of this Task.

        Alpha-numeric, unique id of user who has performed the task  # noqa: E501

        :return: The task_id of this Task.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Task.

        Alpha-numeric, unique id of user who has performed the task  # noqa: E501

        :param task_id: The task_id of this Task.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def avatar_id(self):
        """Gets the avatar_id of this Task.

        Alpha-numeric, unique id of user who has performed the task.  # noqa: E501

        :return: The avatar_id of this Task.
        :rtype: str
        """
        return self._avatar_id

    @avatar_id.setter
    def avatar_id(self, avatar_id):
        """Sets the avatar_id of this Task.

        Alpha-numeric, unique id of user who has performed the task.  # noqa: E501

        :param avatar_id: The avatar_id of this Task.
        :type avatar_id: str
        """

        self._avatar_id = avatar_id

    @property
    def challenge_id(self):
        """Gets the challenge_id of this Task.

        Alpa-numeric, unique id of challenge.   # noqa: E501

        :return: The challenge_id of this Task.
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this Task.

        Alpa-numeric, unique id of challenge.   # noqa: E501

        :param challenge_id: The challenge_id of this Task.
        :type challenge_id: str
        """

        self._challenge_id = challenge_id

    @property
    def attempt_sequence_number(self):
        """Gets the attempt_sequence_number of this Task.

        Identifies the number of evaluation attempts performed on this specific media item.  # noqa: E501

        :return: The attempt_sequence_number of this Task.
        :rtype: int
        """
        return self._attempt_sequence_number

    @attempt_sequence_number.setter
    def attempt_sequence_number(self, attempt_sequence_number):
        """Sets the attempt_sequence_number of this Task.

        Identifies the number of evaluation attempts performed on this specific media item.  # noqa: E501

        :param attempt_sequence_number: The attempt_sequence_number of this Task.
        :type attempt_sequence_number: int
        """

        self._attempt_sequence_number = attempt_sequence_number

    @property
    def generation_timestamp(self):
        """Gets the generation_timestamp of this Task.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was requested by the user  # noqa: E501

        :return: The generation_timestamp of this Task.
        :rtype: datetime
        """
        return self._generation_timestamp

    @generation_timestamp.setter
    def generation_timestamp(self, generation_timestamp):
        """Sets the generation_timestamp of this Task.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was requested by the user  # noqa: E501

        :param generation_timestamp: The generation_timestamp of this Task.
        :type generation_timestamp: datetime
        """

        self._generation_timestamp = generation_timestamp

    @property
    def submission_timestamp(self):
        """Gets the submission_timestamp of this Task.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was submitted by the user  # noqa: E501

        :return: The submission_timestamp of this Task.
        :rtype: datetime
        """
        return self._submission_timestamp

    @submission_timestamp.setter
    def submission_timestamp(self, submission_timestamp):
        """Sets the submission_timestamp of this Task.

        Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was submitted by the user  # noqa: E501

        :param submission_timestamp: The submission_timestamp of this Task.
        :type submission_timestamp: datetime
        """

        self._submission_timestamp = submission_timestamp

    @property
    def image(self):
        """Gets the image of this Task.


        :return: The image of this Task.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Task.


        :param image: The image of this Task.
        :type image: Image
        """

        self._image = image

    @property
    def evaluation_status(self):
        """Gets the evaluation_status of this Task.


        :return: The evaluation_status of this Task.
        :rtype: str
        """
        return self._evaluation_status

    @evaluation_status.setter
    def evaluation_status(self, evaluation_status):
        """Sets the evaluation_status of this Task.


        :param evaluation_status: The evaluation_status of this Task.
        :type evaluation_status: str
        """
        allowed_values = ["unallocated", "leased", "not-evaluated", "passed", "failed", "skipped", "timed-out", "permamnently-failed"]  # noqa: E501
        if evaluation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_status` ({0}), must be one of {1}"
                .format(evaluation_status, allowed_values)
            )

        self._evaluation_status = evaluation_status

    @property
    def challenge_name(self):
        """Gets the challenge_name of this Task.

        Name of Challenge  # noqa: E501

        :return: The challenge_name of this Task.
        :rtype: str
        """
        return self._challenge_name

    @challenge_name.setter
    def challenge_name(self, challenge_name):
        """Sets the challenge_name of this Task.

        Name of Challenge  # noqa: E501

        :param challenge_name: The challenge_name of this Task.
        :type challenge_name: str
        """

        self._challenge_name = challenge_name

    @property
    def challenge_description(self):
        """Gets the challenge_description of this Task.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The challenge_description of this Task.
        :rtype: str
        """
        return self._challenge_description

    @challenge_description.setter
    def challenge_description(self, challenge_description):
        """Sets the challenge_description of this Task.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param challenge_description: The challenge_description of this Task.
        :type challenge_description: str
        """

        self._challenge_description = challenge_description

    @property
    def tags(self):
        """Gets the tags of this Task.


        :return: The tags of this Task.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Task.


        :param tags: The tags of this Task.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def edges(self):
        """Gets the edges of this Task.


        :return: The edges of this Task.
        :rtype: List[Edge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this Task.


        :param edges: The edges of this Task.
        :type edges: List[Edge]
        """

        self._edges = edges

    @property
    def resolution(self):
        """Gets the resolution of this Task.


        :return: The resolution of this Task.
        :rtype: TaskResolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Task.


        :param resolution: The resolution of this Task.
        :type resolution: TaskResolution
        """

        self._resolution = resolution
