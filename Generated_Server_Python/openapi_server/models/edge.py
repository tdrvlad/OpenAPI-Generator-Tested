# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.internal_subjective_opinion import InternalSubjectiveOpinion
from openapi_server import util

from openapi_server.models.internal_subjective_opinion import InternalSubjectiveOpinion  # noqa: E501

class Edge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_tag_id=None, destination_tag_id=None, source_text_box_id=None, destination_text_box_id=None, edge_type=None, slack=None, elasticity=None, internal_subjective_opinion=None):  # noqa: E501
        """Edge - a model defined in OpenAPI

        :param source_tag_id: The source_tag_id of this Edge.  # noqa: E501
        :type source_tag_id: str
        :param destination_tag_id: The destination_tag_id of this Edge.  # noqa: E501
        :type destination_tag_id: str
        :param source_text_box_id: The source_text_box_id of this Edge.  # noqa: E501
        :type source_text_box_id: str
        :param destination_text_box_id: The destination_text_box_id of this Edge.  # noqa: E501
        :type destination_text_box_id: str
        :param edge_type: The edge_type of this Edge.  # noqa: E501
        :type edge_type: str
        :param slack: The slack of this Edge.  # noqa: E501
        :type slack: float
        :param elasticity: The elasticity of this Edge.  # noqa: E501
        :type elasticity: float
        :param internal_subjective_opinion: The internal_subjective_opinion of this Edge.  # noqa: E501
        :type internal_subjective_opinion: InternalSubjectiveOpinion
        """
        self.openapi_types = {
            'source_tag_id': str,
            'destination_tag_id': str,
            'source_text_box_id': str,
            'destination_text_box_id': str,
            'edge_type': str,
            'slack': float,
            'elasticity': float,
            'internal_subjective_opinion': InternalSubjectiveOpinion
        }

        self.attribute_map = {
            'source_tag_id': 'sourceTagId',
            'destination_tag_id': 'destinationTagID',
            'source_text_box_id': 'sourceTextBoxId',
            'destination_text_box_id': 'destinationTextBoxId',
            'edge_type': 'edgeType',
            'slack': 'slack',
            'elasticity': 'elasticity',
            'internal_subjective_opinion': 'internalSubjectiveOpinion'
        }

        self._source_tag_id = source_tag_id
        self._destination_tag_id = destination_tag_id
        self._source_text_box_id = source_text_box_id
        self._destination_text_box_id = destination_text_box_id
        self._edge_type = edge_type
        self._slack = slack
        self._elasticity = elasticity
        self._internal_subjective_opinion = internal_subjective_opinion

    @classmethod
    def from_dict(cls, dikt) -> 'Edge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Edge of this Edge.  # noqa: E501
        :rtype: Edge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_tag_id(self):
        """Gets the source_tag_id of this Edge.

        Need to find solution for unifying tag id's across taggers-collaborators.Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The source_tag_id of this Edge.
        :rtype: str
        """
        return self._source_tag_id

    @source_tag_id.setter
    def source_tag_id(self, source_tag_id):
        """Sets the source_tag_id of this Edge.

        Need to find solution for unifying tag id's across taggers-collaborators.Alpha-numeric, unique id of tagged object  # noqa: E501

        :param source_tag_id: The source_tag_id of this Edge.
        :type source_tag_id: str
        """

        self._source_tag_id = source_tag_id

    @property
    def destination_tag_id(self):
        """Gets the destination_tag_id of this Edge.

        Need to find solution for unifying tag id's across taggers-collaborators. Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The destination_tag_id of this Edge.
        :rtype: str
        """
        return self._destination_tag_id

    @destination_tag_id.setter
    def destination_tag_id(self, destination_tag_id):
        """Sets the destination_tag_id of this Edge.

        Need to find solution for unifying tag id's across taggers-collaborators. Alpha-numeric, unique id of tagged object  # noqa: E501

        :param destination_tag_id: The destination_tag_id of this Edge.
        :type destination_tag_id: str
        """

        self._destination_tag_id = destination_tag_id

    @property
    def source_text_box_id(self):
        """Gets the source_text_box_id of this Edge.

        textBox id from inside sourceTag  # noqa: E501

        :return: The source_text_box_id of this Edge.
        :rtype: str
        """
        return self._source_text_box_id

    @source_text_box_id.setter
    def source_text_box_id(self, source_text_box_id):
        """Sets the source_text_box_id of this Edge.

        textBox id from inside sourceTag  # noqa: E501

        :param source_text_box_id: The source_text_box_id of this Edge.
        :type source_text_box_id: str
        """

        self._source_text_box_id = source_text_box_id

    @property
    def destination_text_box_id(self):
        """Gets the destination_text_box_id of this Edge.

        textBox id from inside destinationTag  # noqa: E501

        :return: The destination_text_box_id of this Edge.
        :rtype: str
        """
        return self._destination_text_box_id

    @destination_text_box_id.setter
    def destination_text_box_id(self, destination_text_box_id):
        """Sets the destination_text_box_id of this Edge.

        textBox id from inside destinationTag  # noqa: E501

        :param destination_text_box_id: The destination_text_box_id of this Edge.
        :type destination_text_box_id: str
        """

        self._destination_text_box_id = destination_text_box_id

    @property
    def edge_type(self):
        """Gets the edge_type of this Edge.

        The type of the relationship between the two objects. Can be extended to discrete histogram of types. All types must belong to taxonomy or the challenge must allow for open-taxonomy.  # noqa: E501

        :return: The edge_type of this Edge.
        :rtype: str
        """
        return self._edge_type

    @edge_type.setter
    def edge_type(self, edge_type):
        """Sets the edge_type of this Edge.

        The type of the relationship between the two objects. Can be extended to discrete histogram of types. All types must belong to taxonomy or the challenge must allow for open-taxonomy.  # noqa: E501

        :param edge_type: The edge_type of this Edge.
        :type edge_type: str
        """

        self._edge_type = edge_type

    @property
    def slack(self):
        """Gets the slack of this Edge.

        How much the edge can allow for the nodes to move without changing its length?  # noqa: E501

        :return: The slack of this Edge.
        :rtype: float
        """
        return self._slack

    @slack.setter
    def slack(self, slack):
        """Sets the slack of this Edge.

        How much the edge can allow for the nodes to move without changing its length?  # noqa: E501

        :param slack: The slack of this Edge.
        :type slack: float
        """

        self._slack = slack

    @property
    def elasticity(self):
        """Gets the elasticity of this Edge.

        How much the edge can extended or contracted?  # noqa: E501

        :return: The elasticity of this Edge.
        :rtype: float
        """
        return self._elasticity

    @elasticity.setter
    def elasticity(self, elasticity):
        """Sets the elasticity of this Edge.

        How much the edge can extended or contracted?  # noqa: E501

        :param elasticity: The elasticity of this Edge.
        :type elasticity: float
        """

        self._elasticity = elasticity

    @property
    def internal_subjective_opinion(self):
        """Gets the internal_subjective_opinion of this Edge.


        :return: The internal_subjective_opinion of this Edge.
        :rtype: InternalSubjectiveOpinion
        """
        return self._internal_subjective_opinion

    @internal_subjective_opinion.setter
    def internal_subjective_opinion(self, internal_subjective_opinion):
        """Sets the internal_subjective_opinion of this Edge.


        :param internal_subjective_opinion: The internal_subjective_opinion of this Edge.
        :type internal_subjective_opinion: InternalSubjectiveOpinion
        """

        self._internal_subjective_opinion = internal_subjective_opinion
