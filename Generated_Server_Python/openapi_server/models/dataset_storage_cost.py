# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dataset_type_enum import DatasetTypeEnum
from openapi_server import util

from openapi_server.models.dataset_type_enum import DatasetTypeEnum  # noqa: E501

class DatasetStorageCost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_id=None, type=None, estimated_shard_cost=None, total_cost=None):  # noqa: E501
        """DatasetStorageCost - a model defined in OpenAPI

        :param dataset_id: The dataset_id of this DatasetStorageCost.  # noqa: E501
        :type dataset_id: str
        :param type: The type of this DatasetStorageCost.  # noqa: E501
        :type type: DatasetTypeEnum
        :param estimated_shard_cost: The estimated_shard_cost of this DatasetStorageCost.  # noqa: E501
        :type estimated_shard_cost: float
        :param total_cost: The total_cost of this DatasetStorageCost.  # noqa: E501
        :type total_cost: float
        """
        self.openapi_types = {
            'dataset_id': str,
            'type': DatasetTypeEnum,
            'estimated_shard_cost': float,
            'total_cost': float
        }

        self.attribute_map = {
            'dataset_id': 'datasetId',
            'type': 'type',
            'estimated_shard_cost': 'estimatedShardCost',
            'total_cost': 'totalCost'
        }

        self._dataset_id = dataset_id
        self._type = type
        self._estimated_shard_cost = estimated_shard_cost
        self._total_cost = total_cost

    @classmethod
    def from_dict(cls, dikt) -> 'DatasetStorageCost':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DatasetStorageCost of this DatasetStorageCost.  # noqa: E501
        :rtype: DatasetStorageCost
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_id(self):
        """Gets the dataset_id of this DatasetStorageCost.

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :return: The dataset_id of this DatasetStorageCost.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this DatasetStorageCost.

        [TBD] Alpha-numeric, unique id of dataset  # noqa: E501

        :param dataset_id: The dataset_id of this DatasetStorageCost.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def type(self):
        """Gets the type of this DatasetStorageCost.


        :return: The type of this DatasetStorageCost.
        :rtype: DatasetTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatasetStorageCost.


        :param type: The type of this DatasetStorageCost.
        :type type: DatasetTypeEnum
        """

        self._type = type

    @property
    def estimated_shard_cost(self):
        """Gets the estimated_shard_cost of this DatasetStorageCost.

        cost for storage in dollars per month  # noqa: E501

        :return: The estimated_shard_cost of this DatasetStorageCost.
        :rtype: float
        """
        return self._estimated_shard_cost

    @estimated_shard_cost.setter
    def estimated_shard_cost(self, estimated_shard_cost):
        """Sets the estimated_shard_cost of this DatasetStorageCost.

        cost for storage in dollars per month  # noqa: E501

        :param estimated_shard_cost: The estimated_shard_cost of this DatasetStorageCost.
        :type estimated_shard_cost: float
        """

        self._estimated_shard_cost = estimated_shard_cost

    @property
    def total_cost(self):
        """Gets the total_cost of this DatasetStorageCost.

        cost for storage in dollars per month  # noqa: E501

        :return: The total_cost of this DatasetStorageCost.
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this DatasetStorageCost.

        cost for storage in dollars per month  # noqa: E501

        :param total_cost: The total_cost of this DatasetStorageCost.
        :type total_cost: float
        """

        self._total_cost = total_cost
