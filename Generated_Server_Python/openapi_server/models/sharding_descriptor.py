# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ShardingDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block=None, shard=None):  # noqa: E501
        """ShardingDescriptor - a model defined in OpenAPI

        :param block: The block of this ShardingDescriptor.  # noqa: E501
        :type block: int
        :param shard: The shard of this ShardingDescriptor.  # noqa: E501
        :type shard: int
        """
        self.openapi_types = {
            'block': int,
            'shard': int
        }

        self.attribute_map = {
            'block': 'block',
            'shard': 'shard'
        }

        self._block = block
        self._shard = shard

    @classmethod
    def from_dict(cls, dikt) -> 'ShardingDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShardingDescriptor of this ShardingDescriptor.  # noqa: E501
        :rtype: ShardingDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block(self):
        """Gets the block of this ShardingDescriptor.

        TBD  # noqa: E501

        :return: The block of this ShardingDescriptor.
        :rtype: int
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this ShardingDescriptor.

        TBD  # noqa: E501

        :param block: The block of this ShardingDescriptor.
        :type block: int
        """

        self._block = block

    @property
    def shard(self):
        """Gets the shard of this ShardingDescriptor.

        TBD  # noqa: E501

        :return: The shard of this ShardingDescriptor.
        :rtype: int
        """
        return self._shard

    @shard.setter
    def shard(self, shard):
        """Sets the shard of this ShardingDescriptor.

        TBD  # noqa: E501

        :param shard: The shard of this ShardingDescriptor.
        :type shard: int
        """

        self._shard = shard
