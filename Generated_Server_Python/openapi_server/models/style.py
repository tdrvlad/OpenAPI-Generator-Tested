# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Style(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, font_style=None, font_variant=None, font_size=None, font_color=None):  # noqa: E501
        """Style - a model defined in OpenAPI

        :param font_style: The font_style of this Style.  # noqa: E501
        :type font_style: str
        :param font_variant: The font_variant of this Style.  # noqa: E501
        :type font_variant: str
        :param font_size: The font_size of this Style.  # noqa: E501
        :type font_size: int
        :param font_color: The font_color of this Style.  # noqa: E501
        :type font_color: str
        """
        self.openapi_types = {
            'font_style': str,
            'font_variant': str,
            'font_size': int,
            'font_color': str
        }

        self.attribute_map = {
            'font_style': 'font-style',
            'font_variant': 'font-variant',
            'font_size': 'font-size',
            'font_color': 'font-color'
        }

        self._font_style = font_style
        self._font_variant = font_variant
        self._font_size = font_size
        self._font_color = font_color

    @classmethod
    def from_dict(cls, dikt) -> 'Style':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Style of this Style.  # noqa: E501
        :rtype: Style
        """
        return util.deserialize_model(dikt, cls)

    @property
    def font_style(self):
        """Gets the font_style of this Style.

        Character encoding type  # noqa: E501

        :return: The font_style of this Style.
        :rtype: str
        """
        return self._font_style

    @font_style.setter
    def font_style(self, font_style):
        """Sets the font_style of this Style.

        Character encoding type  # noqa: E501

        :param font_style: The font_style of this Style.
        :type font_style: str
        """
        allowed_values = ["serif", "sans-serif", "handwritten", "collage"]  # noqa: E501
        if font_style not in allowed_values:
            raise ValueError(
                "Invalid value for `font_style` ({0}), must be one of {1}"
                .format(font_style, allowed_values)
            )

        self._font_style = font_style

    @property
    def font_variant(self):
        """Gets the font_variant of this Style.

        Character encoding type  # noqa: E501

        :return: The font_variant of this Style.
        :rtype: str
        """
        return self._font_variant

    @font_variant.setter
    def font_variant(self, font_variant):
        """Sets the font_variant of this Style.

        Character encoding type  # noqa: E501

        :param font_variant: The font_variant of this Style.
        :type font_variant: str
        """
        allowed_values = ["all-caps", "no-caps", "handwritten", "collage"]  # noqa: E501
        if font_variant not in allowed_values:
            raise ValueError(
                "Invalid value for `font_variant` ({0}), must be one of {1}"
                .format(font_variant, allowed_values)
            )

        self._font_variant = font_variant

    @property
    def font_size(self):
        """Gets the font_size of this Style.

        Size of font  # noqa: E501

        :return: The font_size of this Style.
        :rtype: int
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this Style.

        Size of font  # noqa: E501

        :param font_size: The font_size of this Style.
        :type font_size: int
        """

        self._font_size = font_size

    @property
    def font_color(self):
        """Gets the font_color of this Style.

        Color in hex format   # noqa: E501

        :return: The font_color of this Style.
        :rtype: str
        """
        return self._font_color

    @font_color.setter
    def font_color(self, font_color):
        """Sets the font_color of this Style.

        Color in hex format   # noqa: E501

        :param font_color: The font_color of this Style.
        :type font_color: str
        """

        self._font_color = font_color
