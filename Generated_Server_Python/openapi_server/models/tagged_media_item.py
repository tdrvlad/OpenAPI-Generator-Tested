# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.edge import Edge
from openapi_server.models.image import Image
from openapi_server.models.merged_tag import MergedTag
from openapi_server import util

from openapi_server.models.edge import Edge  # noqa: E501
from openapi_server.models.image import Image  # noqa: E501
from openapi_server.models.merged_tag import MergedTag  # noqa: E501

class TaggedMediaItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tagged_media_item_id=None, media_item_id=None, challenge_id=None, composing_tasks=None, merged_tags=None, image=None, merged_edges=None):  # noqa: E501
        """TaggedMediaItem - a model defined in OpenAPI

        :param tagged_media_item_id: The tagged_media_item_id of this TaggedMediaItem.  # noqa: E501
        :type tagged_media_item_id: str
        :param media_item_id: The media_item_id of this TaggedMediaItem.  # noqa: E501
        :type media_item_id: str
        :param challenge_id: The challenge_id of this TaggedMediaItem.  # noqa: E501
        :type challenge_id: str
        :param composing_tasks: The composing_tasks of this TaggedMediaItem.  # noqa: E501
        :type composing_tasks: List[str]
        :param merged_tags: The merged_tags of this TaggedMediaItem.  # noqa: E501
        :type merged_tags: List[MergedTag]
        :param image: The image of this TaggedMediaItem.  # noqa: E501
        :type image: Image
        :param merged_edges: The merged_edges of this TaggedMediaItem.  # noqa: E501
        :type merged_edges: List[Edge]
        """
        self.openapi_types = {
            'tagged_media_item_id': str,
            'media_item_id': str,
            'challenge_id': str,
            'composing_tasks': List[str],
            'merged_tags': List[MergedTag],
            'image': Image,
            'merged_edges': List[Edge]
        }

        self.attribute_map = {
            'tagged_media_item_id': 'taggedMediaItemId',
            'media_item_id': 'mediaItemId',
            'challenge_id': 'challengeId',
            'composing_tasks': 'composingTasks',
            'merged_tags': 'mergedTags',
            'image': 'image',
            'merged_edges': 'mergedEdges'
        }

        self._tagged_media_item_id = tagged_media_item_id
        self._media_item_id = media_item_id
        self._challenge_id = challenge_id
        self._composing_tasks = composing_tasks
        self._merged_tags = merged_tags
        self._image = image
        self._merged_edges = merged_edges

    @classmethod
    def from_dict(cls, dikt) -> 'TaggedMediaItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaggedMediaItem of this TaggedMediaItem.  # noqa: E501
        :rtype: TaggedMediaItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tagged_media_item_id(self):
        """Gets the tagged_media_item_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The tagged_media_item_id of this TaggedMediaItem.
        :rtype: str
        """
        return self._tagged_media_item_id

    @tagged_media_item_id.setter
    def tagged_media_item_id(self, tagged_media_item_id):
        """Sets the tagged_media_item_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param tagged_media_item_id: The tagged_media_item_id of this TaggedMediaItem.
        :type tagged_media_item_id: str
        """

        self._tagged_media_item_id = tagged_media_item_id

    @property
    def media_item_id(self):
        """Gets the media_item_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The media_item_id of this TaggedMediaItem.
        :rtype: str
        """
        return self._media_item_id

    @media_item_id.setter
    def media_item_id(self, media_item_id):
        """Sets the media_item_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param media_item_id: The media_item_id of this TaggedMediaItem.
        :type media_item_id: str
        """

        self._media_item_id = media_item_id

    @property
    def challenge_id(self):
        """Gets the challenge_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :return: The challenge_id of this TaggedMediaItem.
        :rtype: str
        """
        return self._challenge_id

    @challenge_id.setter
    def challenge_id(self, challenge_id):
        """Sets the challenge_id of this TaggedMediaItem.

        Alpha-numeric, unique id of tagged object  # noqa: E501

        :param challenge_id: The challenge_id of this TaggedMediaItem.
        :type challenge_id: str
        """

        self._challenge_id = challenge_id

    @property
    def composing_tasks(self):
        """Gets the composing_tasks of this TaggedMediaItem.

        What are the tasks contributed in the determination of these tags?  # noqa: E501

        :return: The composing_tasks of this TaggedMediaItem.
        :rtype: List[str]
        """
        return self._composing_tasks

    @composing_tasks.setter
    def composing_tasks(self, composing_tasks):
        """Sets the composing_tasks of this TaggedMediaItem.

        What are the tasks contributed in the determination of these tags?  # noqa: E501

        :param composing_tasks: The composing_tasks of this TaggedMediaItem.
        :type composing_tasks: List[str]
        """

        self._composing_tasks = composing_tasks

    @property
    def merged_tags(self):
        """Gets the merged_tags of this TaggedMediaItem.


        :return: The merged_tags of this TaggedMediaItem.
        :rtype: List[MergedTag]
        """
        return self._merged_tags

    @merged_tags.setter
    def merged_tags(self, merged_tags):
        """Sets the merged_tags of this TaggedMediaItem.


        :param merged_tags: The merged_tags of this TaggedMediaItem.
        :type merged_tags: List[MergedTag]
        """

        self._merged_tags = merged_tags

    @property
    def image(self):
        """Gets the image of this TaggedMediaItem.


        :return: The image of this TaggedMediaItem.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this TaggedMediaItem.


        :param image: The image of this TaggedMediaItem.
        :type image: Image
        """

        self._image = image

    @property
    def merged_edges(self):
        """Gets the merged_edges of this TaggedMediaItem.


        :return: The merged_edges of this TaggedMediaItem.
        :rtype: List[Edge]
        """
        return self._merged_edges

    @merged_edges.setter
    def merged_edges(self, merged_edges):
        """Sets the merged_edges of this TaggedMediaItem.


        :param merged_edges: The merged_edges of this TaggedMediaItem.
        :type merged_edges: List[Edge]
        """

        self._merged_edges = merged_edges
