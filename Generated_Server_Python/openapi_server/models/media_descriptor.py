# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MediaDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, size=None, hash=None, p_hash=None):  # noqa: E501
        """MediaDescriptor - a model defined in OpenAPI

        :param size: The size of this MediaDescriptor.  # noqa: E501
        :type size: int
        :param hash: The hash of this MediaDescriptor.  # noqa: E501
        :type hash: str
        :param p_hash: The p_hash of this MediaDescriptor.  # noqa: E501
        :type p_hash: str
        """
        self.openapi_types = {
            'size': int,
            'hash': str,
            'p_hash': str
        }

        self.attribute_map = {
            'size': 'size',
            'hash': 'hash',
            'p_hash': 'pHash'
        }

        self._size = size
        self._hash = hash
        self._p_hash = p_hash

    @classmethod
    def from_dict(cls, dikt) -> 'MediaDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaDescriptor of this MediaDescriptor.  # noqa: E501
        :rtype: MediaDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def size(self):
        """Gets the size of this MediaDescriptor.

        Size of files when represented in binary, without additional encoding. Used for de-duplication.  # noqa: E501

        :return: The size of this MediaDescriptor.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MediaDescriptor.

        Size of files when represented in binary, without additional encoding. Used for de-duplication.  # noqa: E501

        :param size: The size of this MediaDescriptor.
        :type size: int
        """

        self._size = size

    @property
    def hash(self):
        """Gets the hash of this MediaDescriptor.

        Cryptographic hash of original file. Used for de-duplication.  # noqa: E501

        :return: The hash of this MediaDescriptor.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this MediaDescriptor.

        Cryptographic hash of original file. Used for de-duplication.  # noqa: E501

        :param hash: The hash of this MediaDescriptor.
        :type hash: str
        """

        self._hash = hash

    @property
    def p_hash(self):
        """Gets the p_hash of this MediaDescriptor.

        Perceptual representation of the content of the media. Used for de-duplication.  # noqa: E501

        :return: The p_hash of this MediaDescriptor.
        :rtype: str
        """
        return self._p_hash

    @p_hash.setter
    def p_hash(self, p_hash):
        """Sets the p_hash of this MediaDescriptor.

        Perceptual representation of the content of the media. Used for de-duplication.  # noqa: E501

        :param p_hash: The p_hash of this MediaDescriptor.
        :type p_hash: str
        """

        self._p_hash = p_hash
