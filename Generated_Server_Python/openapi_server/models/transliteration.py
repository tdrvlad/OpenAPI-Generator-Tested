# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.observable_symbol import ObservableSymbol
from openapi_server import util

from openapi_server.models.observable_symbol import ObservableSymbol  # noqa: E501

class Transliteration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code=None, compressed_character_sequence=None, encoding=None, charset=None, direction=None, collation_language=None, character_sequence=None):  # noqa: E501
        """Transliteration - a model defined in OpenAPI

        :param language_code: The language_code of this Transliteration.  # noqa: E501
        :type language_code: str
        :param compressed_character_sequence: The compressed_character_sequence of this Transliteration.  # noqa: E501
        :type compressed_character_sequence: str
        :param encoding: The encoding of this Transliteration.  # noqa: E501
        :type encoding: str
        :param charset: The charset of this Transliteration.  # noqa: E501
        :type charset: str
        :param direction: The direction of this Transliteration.  # noqa: E501
        :type direction: str
        :param collation_language: The collation_language of this Transliteration.  # noqa: E501
        :type collation_language: str
        :param character_sequence: The character_sequence of this Transliteration.  # noqa: E501
        :type character_sequence: List[ObservableSymbol]
        """
        self.openapi_types = {
            'language_code': str,
            'compressed_character_sequence': str,
            'encoding': str,
            'charset': str,
            'direction': str,
            'collation_language': str,
            'character_sequence': List[ObservableSymbol]
        }

        self.attribute_map = {
            'language_code': 'languageCode',
            'compressed_character_sequence': 'compressedCharacterSequence',
            'encoding': 'encoding',
            'charset': 'charset',
            'direction': 'direction',
            'collation_language': 'collation-language',
            'character_sequence': 'characterSequence'
        }

        self._language_code = language_code
        self._compressed_character_sequence = compressed_character_sequence
        self._encoding = encoding
        self._charset = charset
        self._direction = direction
        self._collation_language = collation_language
        self._character_sequence = character_sequence

    @classmethod
    def from_dict(cls, dikt) -> 'Transliteration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transliteration of this Transliteration.  # noqa: E501
        :rtype: Transliteration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this Transliteration.

        The BCP-47 language code  # noqa: E501

        :return: The language_code of this Transliteration.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Transliteration.

        The BCP-47 language code  # noqa: E501

        :param language_code: The language_code of this Transliteration.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def compressed_character_sequence(self):
        """Gets the compressed_character_sequence of this Transliteration.

        compressed version of character sequence  # noqa: E501

        :return: The compressed_character_sequence of this Transliteration.
        :rtype: str
        """
        return self._compressed_character_sequence

    @compressed_character_sequence.setter
    def compressed_character_sequence(self, compressed_character_sequence):
        """Sets the compressed_character_sequence of this Transliteration.

        compressed version of character sequence  # noqa: E501

        :param compressed_character_sequence: The compressed_character_sequence of this Transliteration.
        :type compressed_character_sequence: str
        """

        self._compressed_character_sequence = compressed_character_sequence

    @property
    def encoding(self):
        """Gets the encoding of this Transliteration.

        Character encoding type  # noqa: E501

        :return: The encoding of this Transliteration.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this Transliteration.

        Character encoding type  # noqa: E501

        :param encoding: The encoding of this Transliteration.
        :type encoding: str
        """
        allowed_values = ["ISO-646-ASCII", "UTF-8"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def charset(self):
        """Gets the charset of this Transliteration.

        The set of characters allowed , alphabet  # noqa: E501

        :return: The charset of this Transliteration.
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this Transliteration.

        The set of characters allowed , alphabet  # noqa: E501

        :param charset: The charset of this Transliteration.
        :type charset: str
        """
        allowed_values = ["latin1", "latin2", "cp1251", "greek", "hebrew"]  # noqa: E501
        if charset not in allowed_values:
            raise ValueError(
                "Invalid value for `charset` ({0}), must be one of {1}"
                .format(charset, allowed_values)
            )

        self._charset = charset

    @property
    def direction(self):
        """Gets the direction of this Transliteration.

        reading direction  # noqa: E501

        :return: The direction of this Transliteration.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Transliteration.

        reading direction  # noqa: E501

        :param direction: The direction of this Transliteration.
        :type direction: str
        """
        allowed_values = ["left-to-right", "right-to-left", "top-to-bottom", "bottom-to-top"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def collation_language(self):
        """Gets the collation_language of this Transliteration.

        collation use for comparing and sorting the characters, as per Unicode Sorting Algorithm  # noqa: E501

        :return: The collation_language of this Transliteration.
        :rtype: str
        """
        return self._collation_language

    @collation_language.setter
    def collation_language(self, collation_language):
        """Sets the collation_language of this Transliteration.

        collation use for comparing and sorting the characters, as per Unicode Sorting Algorithm  # noqa: E501

        :param collation_language: The collation_language of this Transliteration.
        :type collation_language: str
        """
        allowed_values = ["utf8_romanian_ci", "latin2_general_ci", "cp1250_general_ci", "greek_general_ci", "hebrew_general_ci"]  # noqa: E501
        if collation_language not in allowed_values:
            raise ValueError(
                "Invalid value for `collation_language` ({0}), must be one of {1}"
                .format(collation_language, allowed_values)
            )

        self._collation_language = collation_language

    @property
    def character_sequence(self):
        """Gets the character_sequence of this Transliteration.

        The order of the characters, according to the direction of the transliteration  # noqa: E501

        :return: The character_sequence of this Transliteration.
        :rtype: List[ObservableSymbol]
        """
        return self._character_sequence

    @character_sequence.setter
    def character_sequence(self, character_sequence):
        """Sets the character_sequence of this Transliteration.

        The order of the characters, according to the direction of the transliteration  # noqa: E501

        :param character_sequence: The character_sequence of this Transliteration.
        :type character_sequence: List[ObservableSymbol]
        """

        self._character_sequence = character_sequence
