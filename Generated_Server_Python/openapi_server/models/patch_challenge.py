# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_access_type_enum import ChallengeAccessTypeEnum
from openapi_server import util

from openapi_server.models.challenge_access_type_enum import ChallengeAccessTypeEnum  # noqa: E501

class PatchChallenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_policy_id=None, dispatch_policy_id=None, access_type=None, name=None, description=None, budget=None):  # noqa: E501
        """PatchChallenge - a model defined in OpenAPI

        :param evaluation_policy_id: The evaluation_policy_id of this PatchChallenge.  # noqa: E501
        :type evaluation_policy_id: str
        :param dispatch_policy_id: The dispatch_policy_id of this PatchChallenge.  # noqa: E501
        :type dispatch_policy_id: str
        :param access_type: The access_type of this PatchChallenge.  # noqa: E501
        :type access_type: ChallengeAccessTypeEnum
        :param name: The name of this PatchChallenge.  # noqa: E501
        :type name: str
        :param description: The description of this PatchChallenge.  # noqa: E501
        :type description: str
        :param budget: The budget of this PatchChallenge.  # noqa: E501
        :type budget: float
        """
        self.openapi_types = {
            'evaluation_policy_id': str,
            'dispatch_policy_id': str,
            'access_type': ChallengeAccessTypeEnum,
            'name': str,
            'description': str,
            'budget': float
        }

        self.attribute_map = {
            'evaluation_policy_id': 'evaluationPolicyId',
            'dispatch_policy_id': 'dispatchPolicyId',
            'access_type': 'accessType',
            'name': 'name',
            'description': 'description',
            'budget': 'budget'
        }

        self._evaluation_policy_id = evaluation_policy_id
        self._dispatch_policy_id = dispatch_policy_id
        self._access_type = access_type
        self._name = name
        self._description = description
        self._budget = budget

    @classmethod
    def from_dict(cls, dikt) -> 'PatchChallenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PatchChallenge of this PatchChallenge.  # noqa: E501
        :rtype: PatchChallenge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_policy_id(self):
        """Gets the evaluation_policy_id of this PatchChallenge.

        Alpha-numeric, unique id of evaluation policy  # noqa: E501

        :return: The evaluation_policy_id of this PatchChallenge.
        :rtype: str
        """
        return self._evaluation_policy_id

    @evaluation_policy_id.setter
    def evaluation_policy_id(self, evaluation_policy_id):
        """Sets the evaluation_policy_id of this PatchChallenge.

        Alpha-numeric, unique id of evaluation policy  # noqa: E501

        :param evaluation_policy_id: The evaluation_policy_id of this PatchChallenge.
        :type evaluation_policy_id: str
        """

        self._evaluation_policy_id = evaluation_policy_id

    @property
    def dispatch_policy_id(self):
        """Gets the dispatch_policy_id of this PatchChallenge.

        Alpha-numeric, unique id of dispatch policy  # noqa: E501

        :return: The dispatch_policy_id of this PatchChallenge.
        :rtype: str
        """
        return self._dispatch_policy_id

    @dispatch_policy_id.setter
    def dispatch_policy_id(self, dispatch_policy_id):
        """Sets the dispatch_policy_id of this PatchChallenge.

        Alpha-numeric, unique id of dispatch policy  # noqa: E501

        :param dispatch_policy_id: The dispatch_policy_id of this PatchChallenge.
        :type dispatch_policy_id: str
        """

        self._dispatch_policy_id = dispatch_policy_id

    @property
    def access_type(self):
        """Gets the access_type of this PatchChallenge.


        :return: The access_type of this PatchChallenge.
        :rtype: ChallengeAccessTypeEnum
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this PatchChallenge.


        :param access_type: The access_type of this PatchChallenge.
        :type access_type: ChallengeAccessTypeEnum
        """

        self._access_type = access_type

    @property
    def name(self):
        """Gets the name of this PatchChallenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The name of this PatchChallenge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchChallenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param name: The name of this PatchChallenge.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PatchChallenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :return: The description of this PatchChallenge.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchChallenge.

        [TBD] Alpha-numeric, name of dataset  # noqa: E501

        :param description: The description of this PatchChallenge.
        :type description: str
        """

        self._description = description

    @property
    def budget(self):
        """Gets the budget of this PatchChallenge.

        budget allocated for challenge  # noqa: E501

        :return: The budget of this PatchChallenge.
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this PatchChallenge.

        budget allocated for challenge  # noqa: E501

        :param budget: The budget of this PatchChallenge.
        :type budget: float
        """

        self._budget = budget
