# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InternalSubjectiveOpinion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opinion_emitter_id=None, opinion_reason_id=None, attributed_belief_numerator=None, attributed_disbelief_numerator=None, unattributed_uncertainty_numerator=None, common_denominator=None, base_rate_numerator=None):  # noqa: E501
        """InternalSubjectiveOpinion - a model defined in OpenAPI

        :param opinion_emitter_id: The opinion_emitter_id of this InternalSubjectiveOpinion.  # noqa: E501
        :type opinion_emitter_id: str
        :param opinion_reason_id: The opinion_reason_id of this InternalSubjectiveOpinion.  # noqa: E501
        :type opinion_reason_id: str
        :param attributed_belief_numerator: The attributed_belief_numerator of this InternalSubjectiveOpinion.  # noqa: E501
        :type attributed_belief_numerator: int
        :param attributed_disbelief_numerator: The attributed_disbelief_numerator of this InternalSubjectiveOpinion.  # noqa: E501
        :type attributed_disbelief_numerator: int
        :param unattributed_uncertainty_numerator: The unattributed_uncertainty_numerator of this InternalSubjectiveOpinion.  # noqa: E501
        :type unattributed_uncertainty_numerator: int
        :param common_denominator: The common_denominator of this InternalSubjectiveOpinion.  # noqa: E501
        :type common_denominator: int
        :param base_rate_numerator: The base_rate_numerator of this InternalSubjectiveOpinion.  # noqa: E501
        :type base_rate_numerator: int
        """
        self.openapi_types = {
            'opinion_emitter_id': str,
            'opinion_reason_id': str,
            'attributed_belief_numerator': int,
            'attributed_disbelief_numerator': int,
            'unattributed_uncertainty_numerator': int,
            'common_denominator': int,
            'base_rate_numerator': int
        }

        self.attribute_map = {
            'opinion_emitter_id': 'opinionEmitterId',
            'opinion_reason_id': 'opinionReasonId',
            'attributed_belief_numerator': 'attributedBeliefNumerator',
            'attributed_disbelief_numerator': 'attributedDisbeliefNumerator',
            'unattributed_uncertainty_numerator': 'unattributedUncertaintyNumerator',
            'common_denominator': 'commonDenominator',
            'base_rate_numerator': 'baseRateNumerator'
        }

        self._opinion_emitter_id = opinion_emitter_id
        self._opinion_reason_id = opinion_reason_id
        self._attributed_belief_numerator = attributed_belief_numerator
        self._attributed_disbelief_numerator = attributed_disbelief_numerator
        self._unattributed_uncertainty_numerator = unattributed_uncertainty_numerator
        self._common_denominator = common_denominator
        self._base_rate_numerator = base_rate_numerator

    @classmethod
    def from_dict(cls, dikt) -> 'InternalSubjectiveOpinion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InternalSubjectiveOpinion of this InternalSubjectiveOpinion.  # noqa: E501
        :rtype: InternalSubjectiveOpinion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opinion_emitter_id(self):
        """Gets the opinion_emitter_id of this InternalSubjectiveOpinion.

        Functional source, if any, for this opinion, such a specific condition   # noqa: E501

        :return: The opinion_emitter_id of this InternalSubjectiveOpinion.
        :rtype: str
        """
        return self._opinion_emitter_id

    @opinion_emitter_id.setter
    def opinion_emitter_id(self, opinion_emitter_id):
        """Sets the opinion_emitter_id of this InternalSubjectiveOpinion.

        Functional source, if any, for this opinion, such a specific condition   # noqa: E501

        :param opinion_emitter_id: The opinion_emitter_id of this InternalSubjectiveOpinion.
        :type opinion_emitter_id: str
        """

        self._opinion_emitter_id = opinion_emitter_id

    @property
    def opinion_reason_id(self):
        """Gets the opinion_reason_id of this InternalSubjectiveOpinion.

        Reason evoked, invoked or inferred by source for this opinion.  # noqa: E501

        :return: The opinion_reason_id of this InternalSubjectiveOpinion.
        :rtype: str
        """
        return self._opinion_reason_id

    @opinion_reason_id.setter
    def opinion_reason_id(self, opinion_reason_id):
        """Sets the opinion_reason_id of this InternalSubjectiveOpinion.

        Reason evoked, invoked or inferred by source for this opinion.  # noqa: E501

        :param opinion_reason_id: The opinion_reason_id of this InternalSubjectiveOpinion.
        :type opinion_reason_id: str
        """

        self._opinion_reason_id = opinion_reason_id

    @property
    def attributed_belief_numerator(self):
        """Gets the attributed_belief_numerator of this InternalSubjectiveOpinion.

        Number, signed and additive, of fulfillment points out of total that are attributed to belief that the opinion is TRUE. belief mass (bx) numerator accumulator.  # noqa: E501

        :return: The attributed_belief_numerator of this InternalSubjectiveOpinion.
        :rtype: int
        """
        return self._attributed_belief_numerator

    @attributed_belief_numerator.setter
    def attributed_belief_numerator(self, attributed_belief_numerator):
        """Sets the attributed_belief_numerator of this InternalSubjectiveOpinion.

        Number, signed and additive, of fulfillment points out of total that are attributed to belief that the opinion is TRUE. belief mass (bx) numerator accumulator.  # noqa: E501

        :param attributed_belief_numerator: The attributed_belief_numerator of this InternalSubjectiveOpinion.
        :type attributed_belief_numerator: int
        """

        self._attributed_belief_numerator = attributed_belief_numerator

    @property
    def attributed_disbelief_numerator(self):
        """Gets the attributed_disbelief_numerator of this InternalSubjectiveOpinion.

        Number, signed and additive, of fulfillment points out of total that are attributed to belief that the opinion is FALSE. belief mass (dx) numerator accumulator  # noqa: E501

        :return: The attributed_disbelief_numerator of this InternalSubjectiveOpinion.
        :rtype: int
        """
        return self._attributed_disbelief_numerator

    @attributed_disbelief_numerator.setter
    def attributed_disbelief_numerator(self, attributed_disbelief_numerator):
        """Sets the attributed_disbelief_numerator of this InternalSubjectiveOpinion.

        Number, signed and additive, of fulfillment points out of total that are attributed to belief that the opinion is FALSE. belief mass (dx) numerator accumulator  # noqa: E501

        :param attributed_disbelief_numerator: The attributed_disbelief_numerator of this InternalSubjectiveOpinion.
        :type attributed_disbelief_numerator: int
        """

        self._attributed_disbelief_numerator = attributed_disbelief_numerator

    @property
    def unattributed_uncertainty_numerator(self):
        """Gets the unattributed_uncertainty_numerator of this InternalSubjectiveOpinion.

        Number, signed and additive, of fulfillment points out of total that are unattributed to either belief or disbelief and thus represent uncertainty. uncertainty mass (ux) numerator accumulator.  # noqa: E501

        :return: The unattributed_uncertainty_numerator of this InternalSubjectiveOpinion.
        :rtype: int
        """
        return self._unattributed_uncertainty_numerator

    @unattributed_uncertainty_numerator.setter
    def unattributed_uncertainty_numerator(self, unattributed_uncertainty_numerator):
        """Sets the unattributed_uncertainty_numerator of this InternalSubjectiveOpinion.

        Number, signed and additive, of fulfillment points out of total that are unattributed to either belief or disbelief and thus represent uncertainty. uncertainty mass (ux) numerator accumulator.  # noqa: E501

        :param unattributed_uncertainty_numerator: The unattributed_uncertainty_numerator of this InternalSubjectiveOpinion.
        :type unattributed_uncertainty_numerator: int
        """

        self._unattributed_uncertainty_numerator = unattributed_uncertainty_numerator

    @property
    def common_denominator(self):
        """Gets the common_denominator of this InternalSubjectiveOpinion.

        The normalizing factor (the common denominator) of uncertainty, belief and disbelief.  # noqa: E501

        :return: The common_denominator of this InternalSubjectiveOpinion.
        :rtype: int
        """
        return self._common_denominator

    @common_denominator.setter
    def common_denominator(self, common_denominator):
        """Sets the common_denominator of this InternalSubjectiveOpinion.

        The normalizing factor (the common denominator) of uncertainty, belief and disbelief.  # noqa: E501

        :param common_denominator: The common_denominator of this InternalSubjectiveOpinion.
        :type common_denominator: int
        """

        self._common_denominator = common_denominator

    @property
    def base_rate_numerator(self):
        """Gets the base_rate_numerator of this InternalSubjectiveOpinion.

        The probability of the opinion being true in the absence of the information generating it; this represents the default probability of a an element or character or letter appearing in a specific context  # noqa: E501

        :return: The base_rate_numerator of this InternalSubjectiveOpinion.
        :rtype: int
        """
        return self._base_rate_numerator

    @base_rate_numerator.setter
    def base_rate_numerator(self, base_rate_numerator):
        """Sets the base_rate_numerator of this InternalSubjectiveOpinion.

        The probability of the opinion being true in the absence of the information generating it; this represents the default probability of a an element or character or letter appearing in a specific context  # noqa: E501

        :param base_rate_numerator: The base_rate_numerator of this InternalSubjectiveOpinion.
        :type base_rate_numerator: int
        """

        self._base_rate_numerator = base_rate_numerator
