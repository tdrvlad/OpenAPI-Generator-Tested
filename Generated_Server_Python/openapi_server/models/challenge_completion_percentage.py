# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_stage import ChallengeStage
from openapi_server import util

from openapi_server.models.challenge_stage import ChallengeStage  # noqa: E501

class ChallengeCompletionPercentage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shard=None, stages=None):  # noqa: E501
        """ChallengeCompletionPercentage - a model defined in OpenAPI

        :param shard: The shard of this ChallengeCompletionPercentage.  # noqa: E501
        :type shard: int
        :param stages: The stages of this ChallengeCompletionPercentage.  # noqa: E501
        :type stages: List[ChallengeStage]
        """
        self.openapi_types = {
            'shard': int,
            'stages': List[ChallengeStage]
        }

        self.attribute_map = {
            'shard': 'shard',
            'stages': 'stages'
        }

        self._shard = shard
        self._stages = stages

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeCompletionPercentage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeCompletionPercentage of this ChallengeCompletionPercentage.  # noqa: E501
        :rtype: ChallengeCompletionPercentage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shard(self):
        """Gets the shard of this ChallengeCompletionPercentage.

        shard number  # noqa: E501

        :return: The shard of this ChallengeCompletionPercentage.
        :rtype: int
        """
        return self._shard

    @shard.setter
    def shard(self, shard):
        """Sets the shard of this ChallengeCompletionPercentage.

        shard number  # noqa: E501

        :param shard: The shard of this ChallengeCompletionPercentage.
        :type shard: int
        """

        self._shard = shard

    @property
    def stages(self):
        """Gets the stages of this ChallengeCompletionPercentage.


        :return: The stages of this ChallengeCompletionPercentage.
        :rtype: List[ChallengeStage]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this ChallengeCompletionPercentage.


        :param stages: The stages of this ChallengeCompletionPercentage.
        :type stages: List[ChallengeStage]
        """

        self._stages = stages
